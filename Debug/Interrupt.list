
Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046e0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004880  08004880  00014880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048f4  080048f4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080048f4  080048f4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048f4  080048f4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048f4  080048f4  000148f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048f8  080048f8  000148f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080048fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000070  0800496c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  0800496c  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a31b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a4f  00000000  00000000  0002a3bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000850  00000000  00000000  0002be10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000788  00000000  00000000  0002c660  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020341  00000000  00000000  0002cde8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a0d4  00000000  00000000  0004d129  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c7181  00000000  00000000  000571fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011e37e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000233c  00000000  00000000  0011e3fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004868 	.word	0x08004868

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004868 	.word	0x08004868

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b08a      	sub	sp, #40	; 0x28
 8000294:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8000296:	f107 031c 	add.w	r3, r7, #28
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	2200      	movs	r2, #0
 80002a6:	601a      	str	r2, [r3, #0]
 80002a8:	605a      	str	r2, [r3, #4]
 80002aa:	609a      	str	r2, [r3, #8]
 80002ac:	60da      	str	r2, [r3, #12]
 80002ae:	611a      	str	r2, [r3, #16]
 80002b0:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002b2:	4b2e      	ldr	r3, [pc, #184]	; (800036c <MX_ADC1_Init+0xdc>)
 80002b4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002ba:	4b2c      	ldr	r3, [pc, #176]	; (800036c <MX_ADC1_Init+0xdc>)
 80002bc:	2200      	movs	r2, #0
 80002be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002c0:	4b2a      	ldr	r3, [pc, #168]	; (800036c <MX_ADC1_Init+0xdc>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002c6:	4b29      	ldr	r3, [pc, #164]	; (800036c <MX_ADC1_Init+0xdc>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002cc:	4b27      	ldr	r3, [pc, #156]	; (800036c <MX_ADC1_Init+0xdc>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002d2:	4b26      	ldr	r3, [pc, #152]	; (800036c <MX_ADC1_Init+0xdc>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80002da:	4b24      	ldr	r3, [pc, #144]	; (800036c <MX_ADC1_Init+0xdc>)
 80002dc:	2200      	movs	r2, #0
 80002de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002e0:	4b22      	ldr	r3, [pc, #136]	; (800036c <MX_ADC1_Init+0xdc>)
 80002e2:	2201      	movs	r2, #1
 80002e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002e6:	4b21      	ldr	r3, [pc, #132]	; (800036c <MX_ADC1_Init+0xdc>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80002ec:	4b1f      	ldr	r3, [pc, #124]	; (800036c <MX_ADC1_Init+0xdc>)
 80002ee:	2201      	movs	r2, #1
 80002f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80002f2:	4b1e      	ldr	r3, [pc, #120]	; (800036c <MX_ADC1_Init+0xdc>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80002fa:	4b1c      	ldr	r3, [pc, #112]	; (800036c <MX_ADC1_Init+0xdc>)
 80002fc:	2204      	movs	r2, #4
 80002fe:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000300:	4b1a      	ldr	r3, [pc, #104]	; (800036c <MX_ADC1_Init+0xdc>)
 8000302:	2200      	movs	r2, #0
 8000304:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000306:	4b19      	ldr	r3, [pc, #100]	; (800036c <MX_ADC1_Init+0xdc>)
 8000308:	2200      	movs	r2, #0
 800030a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800030c:	4817      	ldr	r0, [pc, #92]	; (800036c <MX_ADC1_Init+0xdc>)
 800030e:	f000 fb51 	bl	80009b4 <HAL_ADC_Init>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000318:	f000 f97f 	bl	800061a <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800031c:	2300      	movs	r3, #0
 800031e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000320:	f107 031c 	add.w	r3, r7, #28
 8000324:	4619      	mov	r1, r3
 8000326:	4811      	ldr	r0, [pc, #68]	; (800036c <MX_ADC1_Init+0xdc>)
 8000328:	f001 fa48 	bl	80017bc <HAL_ADCEx_MultiModeConfigChannel>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000332:	f000 f972 	bl	800061a <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000336:	2301      	movs	r3, #1
 8000338:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800033a:	2301      	movs	r3, #1
 800033c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800033e:	2300      	movs	r3, #0
 8000340:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000342:	2300      	movs	r3, #0
 8000344:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000346:	2300      	movs	r3, #0
 8000348:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800034a:	2300      	movs	r3, #0
 800034c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	4619      	mov	r1, r3
 8000352:	4806      	ldr	r0, [pc, #24]	; (800036c <MX_ADC1_Init+0xdc>)
 8000354:	f000 ff46 	bl	80011e4 <HAL_ADC_ConfigChannel>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800035e:	f000 f95c 	bl	800061a <Error_Handler>
  }

}
 8000362:	bf00      	nop
 8000364:	3728      	adds	r7, #40	; 0x28
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	20000098 	.word	0x20000098

08000370 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b08a      	sub	sp, #40	; 0x28
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000378:	f107 0314 	add.w	r3, r7, #20
 800037c:	2200      	movs	r2, #0
 800037e:	601a      	str	r2, [r3, #0]
 8000380:	605a      	str	r2, [r3, #4]
 8000382:	609a      	str	r2, [r3, #8]
 8000384:	60da      	str	r2, [r3, #12]
 8000386:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000390:	d124      	bne.n	80003dc <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000392:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <HAL_ADC_MspInit+0x74>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	4a13      	ldr	r2, [pc, #76]	; (80003e4 <HAL_ADC_MspInit+0x74>)
 8000398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800039c:	6153      	str	r3, [r2, #20]
 800039e:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <HAL_ADC_MspInit+0x74>)
 80003a0:	695b      	ldr	r3, [r3, #20]
 80003a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003a6:	613b      	str	r3, [r7, #16]
 80003a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003aa:	4b0e      	ldr	r3, [pc, #56]	; (80003e4 <HAL_ADC_MspInit+0x74>)
 80003ac:	695b      	ldr	r3, [r3, #20]
 80003ae:	4a0d      	ldr	r2, [pc, #52]	; (80003e4 <HAL_ADC_MspInit+0x74>)
 80003b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003b4:	6153      	str	r3, [r2, #20]
 80003b6:	4b0b      	ldr	r3, [pc, #44]	; (80003e4 <HAL_ADC_MspInit+0x74>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003be:	60fb      	str	r3, [r7, #12]
 80003c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80003c2:	2301      	movs	r3, #1
 80003c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003c6:	2303      	movs	r3, #3
 80003c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ca:	2300      	movs	r3, #0
 80003cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ce:	f107 0314 	add.w	r3, r7, #20
 80003d2:	4619      	mov	r1, r3
 80003d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003d8:	f001 fcb2 	bl	8001d40 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80003dc:	bf00      	nop
 80003de:	3728      	adds	r7, #40	; 0x28
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	40021000 	.word	0x40021000

080003e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b08a      	sub	sp, #40	; 0x28
 80003ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ee:	f107 0314 	add.w	r3, r7, #20
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	605a      	str	r2, [r3, #4]
 80003f8:	609a      	str	r2, [r3, #8]
 80003fa:	60da      	str	r2, [r3, #12]
 80003fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003fe:	4b2f      	ldr	r3, [pc, #188]	; (80004bc <MX_GPIO_Init+0xd4>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	4a2e      	ldr	r2, [pc, #184]	; (80004bc <MX_GPIO_Init+0xd4>)
 8000404:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000408:	6153      	str	r3, [r2, #20]
 800040a:	4b2c      	ldr	r3, [pc, #176]	; (80004bc <MX_GPIO_Init+0xd4>)
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000412:	613b      	str	r3, [r7, #16]
 8000414:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000416:	4b29      	ldr	r3, [pc, #164]	; (80004bc <MX_GPIO_Init+0xd4>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	4a28      	ldr	r2, [pc, #160]	; (80004bc <MX_GPIO_Init+0xd4>)
 800041c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000420:	6153      	str	r3, [r2, #20]
 8000422:	4b26      	ldr	r3, [pc, #152]	; (80004bc <MX_GPIO_Init+0xd4>)
 8000424:	695b      	ldr	r3, [r3, #20]
 8000426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800042e:	4b23      	ldr	r3, [pc, #140]	; (80004bc <MX_GPIO_Init+0xd4>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	4a22      	ldr	r2, [pc, #136]	; (80004bc <MX_GPIO_Init+0xd4>)
 8000434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000438:	6153      	str	r3, [r2, #20]
 800043a:	4b20      	ldr	r3, [pc, #128]	; (80004bc <MX_GPIO_Init+0xd4>)
 800043c:	695b      	ldr	r3, [r3, #20]
 800043e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000442:	60bb      	str	r3, [r7, #8]
 8000444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000446:	4b1d      	ldr	r3, [pc, #116]	; (80004bc <MX_GPIO_Init+0xd4>)
 8000448:	695b      	ldr	r3, [r3, #20]
 800044a:	4a1c      	ldr	r2, [pc, #112]	; (80004bc <MX_GPIO_Init+0xd4>)
 800044c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000450:	6153      	str	r3, [r2, #20]
 8000452:	4b1a      	ldr	r3, [pc, #104]	; (80004bc <MX_GPIO_Init+0xd4>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800045a:	607b      	str	r3, [r7, #4]
 800045c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800045e:	2200      	movs	r2, #0
 8000460:	2120      	movs	r1, #32
 8000462:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000466:	f001 fdf5 	bl	8002054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800046a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800046e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000470:	4b13      	ldr	r3, [pc, #76]	; (80004c0 <MX_GPIO_Init+0xd8>)
 8000472:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000474:	2300      	movs	r3, #0
 8000476:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000478:	f107 0314 	add.w	r3, r7, #20
 800047c:	4619      	mov	r1, r3
 800047e:	4811      	ldr	r0, [pc, #68]	; (80004c4 <MX_GPIO_Init+0xdc>)
 8000480:	f001 fc5e 	bl	8001d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000484:	2320      	movs	r3, #32
 8000486:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000488:	2301      	movs	r3, #1
 800048a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048c:	2300      	movs	r3, #0
 800048e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000490:	2300      	movs	r3, #0
 8000492:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000494:	f107 0314 	add.w	r3, r7, #20
 8000498:	4619      	mov	r1, r3
 800049a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800049e:	f001 fc4f 	bl	8001d40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80004a2:	2200      	movs	r2, #0
 80004a4:	2100      	movs	r1, #0
 80004a6:	2028      	movs	r0, #40	; 0x28
 80004a8:	f001 fc13 	bl	8001cd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80004ac:	2028      	movs	r0, #40	; 0x28
 80004ae:	f001 fc2c 	bl	8001d0a <HAL_NVIC_EnableIRQ>

}
 80004b2:	bf00      	nop
 80004b4:	3728      	adds	r7, #40	; 0x28
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	40021000 	.word	0x40021000
 80004c0:	10210000 	.word	0x10210000
 80004c4:	48000800 	.word	0x48000800

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f000 f9e9 	bl	80008a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f82f 	bl	8000534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f7ff ff87 	bl	80003e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004da:	f000 f947 	bl	800076c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80004de:	f7ff fed7 	bl	8000290 <MX_ADC1_Init>
	  //counter = counter + 1;
	  // send buf zero termination string to UART2
	  //HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), 100);

	  // Get ADC value
	  HAL_ADC_Start(&hadc1);
 80004e2:	4811      	ldr	r0, [pc, #68]	; (8000528 <main+0x60>)
 80004e4:	f000 fc60 	bl	8000da8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80004e8:	f04f 31ff 	mov.w	r1, #4294967295
 80004ec:	480e      	ldr	r0, [pc, #56]	; (8000528 <main+0x60>)
 80004ee:	f000 fd71 	bl	8000fd4 <HAL_ADC_PollForConversion>
	  raw = HAL_ADC_GetValue(&hadc1);
 80004f2:	480d      	ldr	r0, [pc, #52]	; (8000528 <main+0x60>)
 80004f4:	f000 fe68 	bl	80011c8 <HAL_ADC_GetValue>
 80004f8:	4603      	mov	r3, r0
 80004fa:	81fb      	strh	r3, [r7, #14]

	  //raw = raw*1000; - dodanie tutaj tej linijki prawidłowo przemnaża liczbę która ma być przesłana do uarta
	  // Convert to string and print
	  sprintf(msg, "%hu\r\n", raw);
 80004fc:	89fa      	ldrh	r2, [r7, #14]
 80004fe:	1d3b      	adds	r3, r7, #4
 8000500:	490a      	ldr	r1, [pc, #40]	; (800052c <main+0x64>)
 8000502:	4618      	mov	r0, r3
 8000504:	f003 fdaa 	bl	800405c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000508:	1d3b      	adds	r3, r7, #4
 800050a:	4618      	mov	r0, r3
 800050c:	f7ff fe68 	bl	80001e0 <strlen>
 8000510:	4603      	mov	r3, r0
 8000512:	b29a      	uxth	r2, r3
 8000514:	1d39      	adds	r1, r7, #4
 8000516:	f04f 33ff 	mov.w	r3, #4294967295
 800051a:	4805      	ldr	r0, [pc, #20]	; (8000530 <main+0x68>)
 800051c:	f003 f99c 	bl	8003858 <HAL_UART_Transmit>

	  HAL_Delay(100);
 8000520:	2064      	movs	r0, #100	; 0x64
 8000522:	f000 fa25 	bl	8000970 <HAL_Delay>
  {
 8000526:	e7dc      	b.n	80004e2 <main+0x1a>
 8000528:	20000098 	.word	0x20000098
 800052c:	08004880 	.word	0x08004880
 8000530:	200000e8 	.word	0x200000e8

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b0a6      	sub	sp, #152	; 0x98
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800053e:	2228      	movs	r2, #40	; 0x28
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f003 fd82 	bl	800404c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	2258      	movs	r2, #88	; 0x58
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f003 fd74 	bl	800404c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000564:	2302      	movs	r3, #2
 8000566:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000568:	2301      	movs	r3, #1
 800056a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056c:	2310      	movs	r3, #16
 800056e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000572:	2302      	movs	r3, #2
 8000574:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000578:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800057c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000580:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000584:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000588:	2300      	movs	r3, #0
 800058a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000592:	4618      	mov	r0, r3
 8000594:	f001 fda8 	bl	80020e8 <HAL_RCC_OscConfig>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800059e:	f000 f83c 	bl	800061a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a2:	230f      	movs	r3, #15
 80005a4:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a6:	2302      	movs	r3, #2
 80005a8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005b2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005b8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80005bc:	2102      	movs	r1, #2
 80005be:	4618      	mov	r0, r3
 80005c0:	f002 fca8 	bl	8002f14 <HAL_RCC_ClockConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005ca:	f000 f826 	bl	800061a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 80005ce:	2382      	movs	r3, #130	; 0x82
 80005d0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80005d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	4618      	mov	r0, r3
 80005e0:	f002 fece 	bl	8003380 <HAL_RCCEx_PeriphCLKConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0xba>
  {
    Error_Handler();
 80005ea:	f000 f816 	bl	800061a <Error_Handler>
  }
}
 80005ee:	bf00      	nop
 80005f0:	3798      	adds	r7, #152	; 0x98
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}

080005f6 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005f6:	b580      	push	{r7, lr}
 80005f8:	b082      	sub	sp, #8
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	4603      	mov	r3, r0
 80005fe:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == B1_Pin)
 8000600:	88fb      	ldrh	r3, [r7, #6]
 8000602:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000606:	d104      	bne.n	8000612 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8000608:	2120      	movs	r1, #32
 800060a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800060e:	f001 fd39 	bl	8002084 <HAL_GPIO_TogglePin>
		//raw = raw*1000; - użycie tutaj zwraca: 'raw' undeclared (first use in this function)
	}
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}

0800061a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800061a:	b480      	push	{r7}
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800061e:	bf00      	nop
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800062e:	4b0f      	ldr	r3, [pc, #60]	; (800066c <HAL_MspInit+0x44>)
 8000630:	699b      	ldr	r3, [r3, #24]
 8000632:	4a0e      	ldr	r2, [pc, #56]	; (800066c <HAL_MspInit+0x44>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	6193      	str	r3, [r2, #24]
 800063a:	4b0c      	ldr	r3, [pc, #48]	; (800066c <HAL_MspInit+0x44>)
 800063c:	699b      	ldr	r3, [r3, #24]
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000646:	4b09      	ldr	r3, [pc, #36]	; (800066c <HAL_MspInit+0x44>)
 8000648:	69db      	ldr	r3, [r3, #28]
 800064a:	4a08      	ldr	r2, [pc, #32]	; (800066c <HAL_MspInit+0x44>)
 800064c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000650:	61d3      	str	r3, [r2, #28]
 8000652:	4b06      	ldr	r3, [pc, #24]	; (800066c <HAL_MspInit+0x44>)
 8000654:	69db      	ldr	r3, [r3, #28]
 8000656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065a:	603b      	str	r3, [r7, #0]
 800065c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800065e:	2007      	movs	r0, #7
 8000660:	f001 fb2c 	bl	8001cbc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40021000 	.word	0x40021000

08000670 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr

0800067e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000682:	e7fe      	b.n	8000682 <HardFault_Handler+0x4>

08000684 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000688:	e7fe      	b.n	8000688 <MemManage_Handler+0x4>

0800068a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800068e:	e7fe      	b.n	800068e <BusFault_Handler+0x4>

08000690 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000694:	e7fe      	b.n	8000694 <UsageFault_Handler+0x4>

08000696 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000696:	b480      	push	{r7}
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800069a:	bf00      	nop
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr

080006a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr

080006b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr

080006c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006c4:	f000 f934 	bl	8000930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}

080006cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80006d0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80006d4:	f001 fcf0 	bl	80020b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}

080006dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006e4:	4a14      	ldr	r2, [pc, #80]	; (8000738 <_sbrk+0x5c>)
 80006e6:	4b15      	ldr	r3, [pc, #84]	; (800073c <_sbrk+0x60>)
 80006e8:	1ad3      	subs	r3, r2, r3
 80006ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006f0:	4b13      	ldr	r3, [pc, #76]	; (8000740 <_sbrk+0x64>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d102      	bne.n	80006fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006f8:	4b11      	ldr	r3, [pc, #68]	; (8000740 <_sbrk+0x64>)
 80006fa:	4a12      	ldr	r2, [pc, #72]	; (8000744 <_sbrk+0x68>)
 80006fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006fe:	4b10      	ldr	r3, [pc, #64]	; (8000740 <_sbrk+0x64>)
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4413      	add	r3, r2
 8000706:	693a      	ldr	r2, [r7, #16]
 8000708:	429a      	cmp	r2, r3
 800070a:	d207      	bcs.n	800071c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800070c:	f003 fc74 	bl	8003ff8 <__errno>
 8000710:	4602      	mov	r2, r0
 8000712:	230c      	movs	r3, #12
 8000714:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000716:	f04f 33ff 	mov.w	r3, #4294967295
 800071a:	e009      	b.n	8000730 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800071c:	4b08      	ldr	r3, [pc, #32]	; (8000740 <_sbrk+0x64>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000722:	4b07      	ldr	r3, [pc, #28]	; (8000740 <_sbrk+0x64>)
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4413      	add	r3, r2
 800072a:	4a05      	ldr	r2, [pc, #20]	; (8000740 <_sbrk+0x64>)
 800072c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800072e:	68fb      	ldr	r3, [r7, #12]
}
 8000730:	4618      	mov	r0, r3
 8000732:	3718      	adds	r7, #24
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20010000 	.word	0x20010000
 800073c:	00000400 	.word	0x00000400
 8000740:	2000008c 	.word	0x2000008c
 8000744:	20000178 	.word	0x20000178

08000748 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <SystemInit+0x20>)
 800074e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000752:	4a05      	ldr	r2, [pc, #20]	; (8000768 <SystemInit+0x20>)
 8000754:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000758:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	e000ed00 	.word	0xe000ed00

0800076c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000770:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <MX_USART2_UART_Init+0x58>)
 8000772:	4a15      	ldr	r2, [pc, #84]	; (80007c8 <MX_USART2_UART_Init+0x5c>)
 8000774:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000776:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <MX_USART2_UART_Init+0x58>)
 8000778:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800077c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_USART2_UART_Init+0x58>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_USART2_UART_Init+0x58>)
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_USART2_UART_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <MX_USART2_UART_Init+0x58>)
 8000792:	220c      	movs	r2, #12
 8000794:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <MX_USART2_UART_Init+0x58>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_USART2_UART_Init+0x58>)
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <MX_USART2_UART_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_USART2_UART_Init+0x58>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_USART2_UART_Init+0x58>)
 80007b0:	f003 f804 	bl	80037bc <HAL_UART_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007ba:	f7ff ff2e 	bl	800061a <Error_Handler>
  }

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200000e8 	.word	0x200000e8
 80007c8:	40004400 	.word	0x40004400

080007cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	; 0x28
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a17      	ldr	r2, [pc, #92]	; (8000848 <HAL_UART_MspInit+0x7c>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d128      	bne.n	8000840 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007ee:	4b17      	ldr	r3, [pc, #92]	; (800084c <HAL_UART_MspInit+0x80>)
 80007f0:	69db      	ldr	r3, [r3, #28]
 80007f2:	4a16      	ldr	r2, [pc, #88]	; (800084c <HAL_UART_MspInit+0x80>)
 80007f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007f8:	61d3      	str	r3, [r2, #28]
 80007fa:	4b14      	ldr	r3, [pc, #80]	; (800084c <HAL_UART_MspInit+0x80>)
 80007fc:	69db      	ldr	r3, [r3, #28]
 80007fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	4b11      	ldr	r3, [pc, #68]	; (800084c <HAL_UART_MspInit+0x80>)
 8000808:	695b      	ldr	r3, [r3, #20]
 800080a:	4a10      	ldr	r2, [pc, #64]	; (800084c <HAL_UART_MspInit+0x80>)
 800080c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000810:	6153      	str	r3, [r2, #20]
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <HAL_UART_MspInit+0x80>)
 8000814:	695b      	ldr	r3, [r3, #20]
 8000816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800081e:	230c      	movs	r3, #12
 8000820:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000822:	2302      	movs	r3, #2
 8000824:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800082e:	2307      	movs	r3, #7
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	4619      	mov	r1, r3
 8000838:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800083c:	f001 fa80 	bl	8001d40 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000840:	bf00      	nop
 8000842:	3728      	adds	r7, #40	; 0x28
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40004400 	.word	0x40004400
 800084c:	40021000 	.word	0x40021000

08000850 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000850:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000888 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000854:	480d      	ldr	r0, [pc, #52]	; (800088c <LoopForever+0x6>)
  ldr r1, =_edata
 8000856:	490e      	ldr	r1, [pc, #56]	; (8000890 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000858:	4a0e      	ldr	r2, [pc, #56]	; (8000894 <LoopForever+0xe>)
  movs r3, #0
 800085a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800085c:	e002      	b.n	8000864 <LoopCopyDataInit>

0800085e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800085e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000862:	3304      	adds	r3, #4

08000864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000868:	d3f9      	bcc.n	800085e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800086a:	4a0b      	ldr	r2, [pc, #44]	; (8000898 <LoopForever+0x12>)
  ldr r4, =_ebss
 800086c:	4c0b      	ldr	r4, [pc, #44]	; (800089c <LoopForever+0x16>)
  movs r3, #0
 800086e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000870:	e001      	b.n	8000876 <LoopFillZerobss>

08000872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000874:	3204      	adds	r2, #4

08000876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000878:	d3fb      	bcc.n	8000872 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800087a:	f7ff ff65 	bl	8000748 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800087e:	f003 fbc1 	bl	8004004 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000882:	f7ff fe21 	bl	80004c8 <main>

08000886 <LoopForever>:

LoopForever:
    b LoopForever
 8000886:	e7fe      	b.n	8000886 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000888:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800088c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000890:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000894:	080048fc 	.word	0x080048fc
  ldr r2, =_sbss
 8000898:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800089c:	20000174 	.word	0x20000174

080008a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008a0:	e7fe      	b.n	80008a0 <ADC1_2_IRQHandler>
	...

080008a4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008a8:	4b08      	ldr	r3, [pc, #32]	; (80008cc <HAL_Init+0x28>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a07      	ldr	r2, [pc, #28]	; (80008cc <HAL_Init+0x28>)
 80008ae:	f043 0310 	orr.w	r3, r3, #16
 80008b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b4:	2003      	movs	r0, #3
 80008b6:	f001 fa01 	bl	8001cbc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ba:	2000      	movs	r0, #0
 80008bc:	f000 f808 	bl	80008d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008c0:	f7ff feb2 	bl	8000628 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008c4:	2300      	movs	r3, #0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40022000 	.word	0x40022000

080008d0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <HAL_InitTick+0x54>)
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <HAL_InitTick+0x58>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	4619      	mov	r1, r3
 80008e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ee:	4618      	mov	r0, r3
 80008f0:	f001 fa19 	bl	8001d26 <HAL_SYSTICK_Config>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
 80008fc:	e00e      	b.n	800091c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2b0f      	cmp	r3, #15
 8000902:	d80a      	bhi.n	800091a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000904:	2200      	movs	r2, #0
 8000906:	6879      	ldr	r1, [r7, #4]
 8000908:	f04f 30ff 	mov.w	r0, #4294967295
 800090c:	f001 f9e1 	bl	8001cd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000910:	4a06      	ldr	r2, [pc, #24]	; (800092c <HAL_InitTick+0x5c>)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000916:	2300      	movs	r3, #0
 8000918:	e000      	b.n	800091c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800091a:	2301      	movs	r3, #1
}
 800091c:	4618      	mov	r0, r3
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000000 	.word	0x20000000
 8000928:	20000008 	.word	0x20000008
 800092c:	20000004 	.word	0x20000004

08000930 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <HAL_IncTick+0x20>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	461a      	mov	r2, r3
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <HAL_IncTick+0x24>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4413      	add	r3, r2
 8000940:	4a04      	ldr	r2, [pc, #16]	; (8000954 <HAL_IncTick+0x24>)
 8000942:	6013      	str	r3, [r2, #0]
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	20000008 	.word	0x20000008
 8000954:	2000016c 	.word	0x2000016c

08000958 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  return uwTick;  
 800095c:	4b03      	ldr	r3, [pc, #12]	; (800096c <HAL_GetTick+0x14>)
 800095e:	681b      	ldr	r3, [r3, #0]
}
 8000960:	4618      	mov	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	2000016c 	.word	0x2000016c

08000970 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000978:	f7ff ffee 	bl	8000958 <HAL_GetTick>
 800097c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000988:	d005      	beq.n	8000996 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <HAL_Delay+0x40>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	461a      	mov	r2, r3
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	4413      	add	r3, r2
 8000994:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000996:	bf00      	nop
 8000998:	f7ff ffde 	bl	8000958 <HAL_GetTick>
 800099c:	4602      	mov	r2, r0
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	68fa      	ldr	r2, [r7, #12]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d8f7      	bhi.n	8000998 <HAL_Delay+0x28>
  {
  }
}
 80009a8:	bf00      	nop
 80009aa:	3710      	adds	r7, #16
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000008 	.word	0x20000008

080009b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b09a      	sub	sp, #104	; 0x68
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009bc:	2300      	movs	r3, #0
 80009be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80009c2:	2300      	movs	r3, #0
 80009c4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d101      	bne.n	80009d4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80009d0:	2301      	movs	r3, #1
 80009d2:	e1e3      	b.n	8000d9c <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	691b      	ldr	r3, [r3, #16]
 80009d8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	f003 0310 	and.w	r3, r3, #16
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d176      	bne.n	8000ad4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d152      	bne.n	8000a94 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2200      	movs	r2, #0
 80009f2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2200      	movs	r2, #0
 80009f8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2200      	movs	r2, #0
 80009fe:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2200      	movs	r2, #0
 8000a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	f7ff fcb1 	bl	8000370 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	689b      	ldr	r3, [r3, #8]
 8000a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d13b      	bne.n	8000a94 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f001 f81d 	bl	8001a5c <ADC_Disable>
 8000a22:	4603      	mov	r3, r0
 8000a24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2c:	f003 0310 	and.w	r3, r3, #16
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d12f      	bne.n	8000a94 <HAL_ADC_Init+0xe0>
 8000a34:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d12b      	bne.n	8000a94 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a40:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a44:	f023 0302 	bic.w	r3, r3, #2
 8000a48:	f043 0202 	orr.w	r2, r3, #2
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	689a      	ldr	r2, [r3, #8]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000a5e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	689a      	ldr	r2, [r3, #8]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a6e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000a70:	4b92      	ldr	r3, [pc, #584]	; (8000cbc <HAL_ADC_Init+0x308>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a92      	ldr	r2, [pc, #584]	; (8000cc0 <HAL_ADC_Init+0x30c>)
 8000a76:	fba2 2303 	umull	r2, r3, r2, r3
 8000a7a:	0c9a      	lsrs	r2, r3, #18
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	4413      	add	r3, r2
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a86:	e002      	b.n	8000a8e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d1f9      	bne.n	8000a88 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d007      	beq.n	8000ab2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	689b      	ldr	r3, [r3, #8]
 8000aa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000aac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ab0:	d110      	bne.n	8000ad4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	f023 0312 	bic.w	r3, r3, #18
 8000aba:	f043 0210 	orr.w	r2, r3, #16
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac6:	f043 0201 	orr.w	r2, r3, #1
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad8:	f003 0310 	and.w	r3, r3, #16
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	f040 8150 	bne.w	8000d82 <HAL_ADC_Init+0x3ce>
 8000ae2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f040 814b 	bne.w	8000d82 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	689b      	ldr	r3, [r3, #8]
 8000af2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f040 8143 	bne.w	8000d82 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b00:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000b04:	f043 0202 	orr.w	r2, r3, #2
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b14:	d004      	beq.n	8000b20 <HAL_ADC_Init+0x16c>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a6a      	ldr	r2, [pc, #424]	; (8000cc4 <HAL_ADC_Init+0x310>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d101      	bne.n	8000b24 <HAL_ADC_Init+0x170>
 8000b20:	4b69      	ldr	r3, [pc, #420]	; (8000cc8 <HAL_ADC_Init+0x314>)
 8000b22:	e000      	b.n	8000b26 <HAL_ADC_Init+0x172>
 8000b24:	4b69      	ldr	r3, [pc, #420]	; (8000ccc <HAL_ADC_Init+0x318>)
 8000b26:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b30:	d102      	bne.n	8000b38 <HAL_ADC_Init+0x184>
 8000b32:	4b64      	ldr	r3, [pc, #400]	; (8000cc4 <HAL_ADC_Init+0x310>)
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	e01a      	b.n	8000b6e <HAL_ADC_Init+0x1ba>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a61      	ldr	r2, [pc, #388]	; (8000cc4 <HAL_ADC_Init+0x310>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d103      	bne.n	8000b4a <HAL_ADC_Init+0x196>
 8000b42:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	e011      	b.n	8000b6e <HAL_ADC_Init+0x1ba>
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a60      	ldr	r2, [pc, #384]	; (8000cd0 <HAL_ADC_Init+0x31c>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d102      	bne.n	8000b5a <HAL_ADC_Init+0x1a6>
 8000b54:	4b5f      	ldr	r3, [pc, #380]	; (8000cd4 <HAL_ADC_Init+0x320>)
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	e009      	b.n	8000b6e <HAL_ADC_Init+0x1ba>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a5d      	ldr	r2, [pc, #372]	; (8000cd4 <HAL_ADC_Init+0x320>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d102      	bne.n	8000b6a <HAL_ADC_Init+0x1b6>
 8000b64:	4b5a      	ldr	r3, [pc, #360]	; (8000cd0 <HAL_ADC_Init+0x31c>)
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	e001      	b.n	8000b6e <HAL_ADC_Init+0x1ba>
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	f003 0303 	and.w	r3, r3, #3
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d108      	bne.n	8000b8e <HAL_ADC_Init+0x1da>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d101      	bne.n	8000b8e <HAL_ADC_Init+0x1da>
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e000      	b.n	8000b90 <HAL_ADC_Init+0x1dc>
 8000b8e:	2300      	movs	r3, #0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d11c      	bne.n	8000bce <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000b94:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d010      	beq.n	8000bbc <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	689b      	ldr	r3, [r3, #8]
 8000b9e:	f003 0303 	and.w	r3, r3, #3
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d107      	bne.n	8000bb6 <HAL_ADC_Init+0x202>
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d101      	bne.n	8000bb6 <HAL_ADC_Init+0x202>
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e000      	b.n	8000bb8 <HAL_ADC_Init+0x204>
 8000bb6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d108      	bne.n	8000bce <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000bbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	431a      	orrs	r2, r3
 8000bca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000bcc:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	7e5b      	ldrb	r3, [r3, #25]
 8000bd2:	035b      	lsls	r3, r3, #13
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000bd8:	2a01      	cmp	r2, #1
 8000bda:	d002      	beq.n	8000be2 <HAL_ADC_Init+0x22e>
 8000bdc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000be0:	e000      	b.n	8000be4 <HAL_ADC_Init+0x230>
 8000be2:	2200      	movs	r2, #0
 8000be4:	431a      	orrs	r2, r3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	68db      	ldr	r3, [r3, #12]
 8000bea:	431a      	orrs	r2, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d11b      	bne.n	8000c3a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	7e5b      	ldrb	r3, [r3, #25]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d109      	bne.n	8000c1e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	045a      	lsls	r2, r3, #17
 8000c12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000c14:	4313      	orrs	r3, r2
 8000c16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c1a:	663b      	str	r3, [r7, #96]	; 0x60
 8000c1c:	e00d      	b.n	8000c3a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000c26:	f043 0220 	orr.w	r2, r3, #32
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c32:	f043 0201 	orr.w	r2, r3, #1
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d054      	beq.n	8000cec <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a22      	ldr	r2, [pc, #136]	; (8000cd0 <HAL_ADC_Init+0x31c>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d004      	beq.n	8000c56 <HAL_ADC_Init+0x2a2>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a20      	ldr	r2, [pc, #128]	; (8000cd4 <HAL_ADC_Init+0x320>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d140      	bne.n	8000cd8 <HAL_ADC_Init+0x324>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c5a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8000c5e:	d02a      	beq.n	8000cb6 <HAL_ADC_Init+0x302>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c68:	d022      	beq.n	8000cb0 <HAL_ADC_Init+0x2fc>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c6e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8000c72:	d01a      	beq.n	8000caa <HAL_ADC_Init+0x2f6>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c78:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8000c7c:	d012      	beq.n	8000ca4 <HAL_ADC_Init+0x2f0>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c82:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8000c86:	d00a      	beq.n	8000c9e <HAL_ADC_Init+0x2ea>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c8c:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8000c90:	d002      	beq.n	8000c98 <HAL_ADC_Init+0x2e4>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c96:	e023      	b.n	8000ce0 <HAL_ADC_Init+0x32c>
 8000c98:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c9c:	e020      	b.n	8000ce0 <HAL_ADC_Init+0x32c>
 8000c9e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000ca2:	e01d      	b.n	8000ce0 <HAL_ADC_Init+0x32c>
 8000ca4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000ca8:	e01a      	b.n	8000ce0 <HAL_ADC_Init+0x32c>
 8000caa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cae:	e017      	b.n	8000ce0 <HAL_ADC_Init+0x32c>
 8000cb0:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000cb4:	e014      	b.n	8000ce0 <HAL_ADC_Init+0x32c>
 8000cb6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000cba:	e011      	b.n	8000ce0 <HAL_ADC_Init+0x32c>
 8000cbc:	20000000 	.word	0x20000000
 8000cc0:	431bde83 	.word	0x431bde83
 8000cc4:	50000100 	.word	0x50000100
 8000cc8:	50000300 	.word	0x50000300
 8000ccc:	50000700 	.word	0x50000700
 8000cd0:	50000400 	.word	0x50000400
 8000cd4:	50000500 	.word	0x50000500
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ce0:	687a      	ldr	r2, [r7, #4]
 8000ce2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	f003 030c 	and.w	r3, r3, #12
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d114      	bne.n	8000d24 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	6812      	ldr	r2, [r2, #0]
 8000d04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d08:	f023 0302 	bic.w	r3, r3, #2
 8000d0c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	7e1b      	ldrb	r3, [r3, #24]
 8000d12:	039a      	lsls	r2, r3, #14
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d20:	4313      	orrs	r3, r2
 8000d22:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	68da      	ldr	r2, [r3, #12]
 8000d2a:	4b1e      	ldr	r3, [pc, #120]	; (8000da4 <HAL_ADC_Init+0x3f0>)
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	6812      	ldr	r2, [r2, #0]
 8000d32:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000d34:	430b      	orrs	r3, r1
 8000d36:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	691b      	ldr	r3, [r3, #16]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d10c      	bne.n	8000d5a <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f023 010f 	bic.w	r1, r3, #15
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	69db      	ldr	r3, [r3, #28]
 8000d4e:	1e5a      	subs	r2, r3, #1
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	430a      	orrs	r2, r1
 8000d56:	631a      	str	r2, [r3, #48]	; 0x30
 8000d58:	e007      	b.n	8000d6a <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f022 020f 	bic.w	r2, r2, #15
 8000d68:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d74:	f023 0303 	bic.w	r3, r3, #3
 8000d78:	f043 0201 	orr.w	r2, r3, #1
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	641a      	str	r2, [r3, #64]	; 0x40
 8000d80:	e00a      	b.n	8000d98 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	f023 0312 	bic.w	r3, r3, #18
 8000d8a:	f043 0210 	orr.w	r2, r3, #16
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000d92:	2301      	movs	r3, #1
 8000d94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000d98:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3768      	adds	r7, #104	; 0x68
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	fff0c007 	.word	0xfff0c007

08000da8 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000db0:	2300      	movs	r3, #0
 8000db2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	f003 0304 	and.w	r3, r3, #4
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	f040 80f9 	bne.w	8000fb6 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d101      	bne.n	8000dd2 <HAL_ADC_Start+0x2a>
 8000dce:	2302      	movs	r3, #2
 8000dd0:	e0f4      	b.n	8000fbc <HAL_ADC_Start+0x214>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f000 fde0 	bl	80019a0 <ADC_Enable>
 8000de0:	4603      	mov	r3, r0
 8000de2:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000de4:	7bfb      	ldrb	r3, [r7, #15]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	f040 80e0 	bne.w	8000fac <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000df4:	f023 0301 	bic.w	r3, r3, #1
 8000df8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e08:	d004      	beq.n	8000e14 <HAL_ADC_Start+0x6c>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a6d      	ldr	r2, [pc, #436]	; (8000fc4 <HAL_ADC_Start+0x21c>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d106      	bne.n	8000e22 <HAL_ADC_Start+0x7a>
 8000e14:	4b6c      	ldr	r3, [pc, #432]	; (8000fc8 <HAL_ADC_Start+0x220>)
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	f003 031f 	and.w	r3, r3, #31
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d010      	beq.n	8000e42 <HAL_ADC_Start+0x9a>
 8000e20:	e005      	b.n	8000e2e <HAL_ADC_Start+0x86>
 8000e22:	4b6a      	ldr	r3, [pc, #424]	; (8000fcc <HAL_ADC_Start+0x224>)
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	f003 031f 	and.w	r3, r3, #31
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d009      	beq.n	8000e42 <HAL_ADC_Start+0x9a>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e36:	d004      	beq.n	8000e42 <HAL_ADC_Start+0x9a>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a64      	ldr	r2, [pc, #400]	; (8000fd0 <HAL_ADC_Start+0x228>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d115      	bne.n	8000e6e <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d036      	beq.n	8000eca <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e60:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e64:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000e6c:	e02d      	b.n	8000eca <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e82:	d004      	beq.n	8000e8e <HAL_ADC_Start+0xe6>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a4e      	ldr	r2, [pc, #312]	; (8000fc4 <HAL_ADC_Start+0x21c>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d10a      	bne.n	8000ea4 <HAL_ADC_Start+0xfc>
 8000e8e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	bf14      	ite	ne
 8000e9c:	2301      	movne	r3, #1
 8000e9e:	2300      	moveq	r3, #0
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	e008      	b.n	8000eb6 <HAL_ADC_Start+0x10e>
 8000ea4:	4b4a      	ldr	r3, [pc, #296]	; (8000fd0 <HAL_ADC_Start+0x228>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	bf14      	ite	ne
 8000eb0:	2301      	movne	r3, #1
 8000eb2:	2300      	moveq	r3, #0
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d007      	beq.n	8000eca <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ec2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ed2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ed6:	d106      	bne.n	8000ee6 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000edc:	f023 0206 	bic.w	r2, r3, #6
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	645a      	str	r2, [r3, #68]	; 0x44
 8000ee4:	e002      	b.n	8000eec <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	221c      	movs	r2, #28
 8000efa:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f04:	d004      	beq.n	8000f10 <HAL_ADC_Start+0x168>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a2e      	ldr	r2, [pc, #184]	; (8000fc4 <HAL_ADC_Start+0x21c>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d106      	bne.n	8000f1e <HAL_ADC_Start+0x176>
 8000f10:	4b2d      	ldr	r3, [pc, #180]	; (8000fc8 <HAL_ADC_Start+0x220>)
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	f003 031f 	and.w	r3, r3, #31
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d03e      	beq.n	8000f9a <HAL_ADC_Start+0x1f2>
 8000f1c:	e005      	b.n	8000f2a <HAL_ADC_Start+0x182>
 8000f1e:	4b2b      	ldr	r3, [pc, #172]	; (8000fcc <HAL_ADC_Start+0x224>)
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	f003 031f 	and.w	r3, r3, #31
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d037      	beq.n	8000f9a <HAL_ADC_Start+0x1f2>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f32:	d004      	beq.n	8000f3e <HAL_ADC_Start+0x196>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a22      	ldr	r2, [pc, #136]	; (8000fc4 <HAL_ADC_Start+0x21c>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d106      	bne.n	8000f4c <HAL_ADC_Start+0x1a4>
 8000f3e:	4b22      	ldr	r3, [pc, #136]	; (8000fc8 <HAL_ADC_Start+0x220>)
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	f003 031f 	and.w	r3, r3, #31
 8000f46:	2b05      	cmp	r3, #5
 8000f48:	d027      	beq.n	8000f9a <HAL_ADC_Start+0x1f2>
 8000f4a:	e005      	b.n	8000f58 <HAL_ADC_Start+0x1b0>
 8000f4c:	4b1f      	ldr	r3, [pc, #124]	; (8000fcc <HAL_ADC_Start+0x224>)
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	f003 031f 	and.w	r3, r3, #31
 8000f54:	2b05      	cmp	r3, #5
 8000f56:	d020      	beq.n	8000f9a <HAL_ADC_Start+0x1f2>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f60:	d004      	beq.n	8000f6c <HAL_ADC_Start+0x1c4>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a17      	ldr	r2, [pc, #92]	; (8000fc4 <HAL_ADC_Start+0x21c>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d106      	bne.n	8000f7a <HAL_ADC_Start+0x1d2>
 8000f6c:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <HAL_ADC_Start+0x220>)
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	f003 031f 	and.w	r3, r3, #31
 8000f74:	2b09      	cmp	r3, #9
 8000f76:	d010      	beq.n	8000f9a <HAL_ADC_Start+0x1f2>
 8000f78:	e005      	b.n	8000f86 <HAL_ADC_Start+0x1de>
 8000f7a:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <HAL_ADC_Start+0x224>)
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	f003 031f 	and.w	r3, r3, #31
 8000f82:	2b09      	cmp	r3, #9
 8000f84:	d009      	beq.n	8000f9a <HAL_ADC_Start+0x1f2>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f8e:	d004      	beq.n	8000f9a <HAL_ADC_Start+0x1f2>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a0e      	ldr	r2, [pc, #56]	; (8000fd0 <HAL_ADC_Start+0x228>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d10f      	bne.n	8000fba <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	689a      	ldr	r2, [r3, #8]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f042 0204 	orr.w	r2, r2, #4
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	e006      	b.n	8000fba <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000fb4:	e001      	b.n	8000fba <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	50000100 	.word	0x50000100
 8000fc8:	50000300 	.word	0x50000300
 8000fcc:	50000700 	.word	0x50000700
 8000fd0:	50000400 	.word	0x50000400

08000fd4 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	2b08      	cmp	r3, #8
 8000fe8:	d102      	bne.n	8000ff0 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000fea:	2308      	movs	r3, #8
 8000fec:	617b      	str	r3, [r7, #20]
 8000fee:	e03a      	b.n	8001066 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ff8:	d004      	beq.n	8001004 <HAL_ADC_PollForConversion+0x30>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a6e      	ldr	r2, [pc, #440]	; (80011b8 <HAL_ADC_PollForConversion+0x1e4>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d101      	bne.n	8001008 <HAL_ADC_PollForConversion+0x34>
 8001004:	4b6d      	ldr	r3, [pc, #436]	; (80011bc <HAL_ADC_PollForConversion+0x1e8>)
 8001006:	e000      	b.n	800100a <HAL_ADC_PollForConversion+0x36>
 8001008:	4b6d      	ldr	r3, [pc, #436]	; (80011c0 <HAL_ADC_PollForConversion+0x1ec>)
 800100a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	f003 031f 	and.w	r3, r3, #31
 8001014:	2b00      	cmp	r3, #0
 8001016:	d112      	bne.n	800103e <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	2b01      	cmp	r3, #1
 8001024:	d11d      	bne.n	8001062 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	f043 0220 	orr.w	r2, r3, #32
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e0b8      	b.n	80011b0 <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d00b      	beq.n	8001062 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	f043 0220 	orr.w	r2, r3, #32
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2200      	movs	r2, #0
 800105a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e0a6      	b.n	80011b0 <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001062:	230c      	movs	r3, #12
 8001064:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800106e:	d004      	beq.n	800107a <HAL_ADC_PollForConversion+0xa6>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a50      	ldr	r2, [pc, #320]	; (80011b8 <HAL_ADC_PollForConversion+0x1e4>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d106      	bne.n	8001088 <HAL_ADC_PollForConversion+0xb4>
 800107a:	4b50      	ldr	r3, [pc, #320]	; (80011bc <HAL_ADC_PollForConversion+0x1e8>)
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	f003 031f 	and.w	r3, r3, #31
 8001082:	2b00      	cmp	r3, #0
 8001084:	d010      	beq.n	80010a8 <HAL_ADC_PollForConversion+0xd4>
 8001086:	e005      	b.n	8001094 <HAL_ADC_PollForConversion+0xc0>
 8001088:	4b4d      	ldr	r3, [pc, #308]	; (80011c0 <HAL_ADC_PollForConversion+0x1ec>)
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f003 031f 	and.w	r3, r3, #31
 8001090:	2b00      	cmp	r3, #0
 8001092:	d009      	beq.n	80010a8 <HAL_ADC_PollForConversion+0xd4>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800109c:	d004      	beq.n	80010a8 <HAL_ADC_PollForConversion+0xd4>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a48      	ldr	r2, [pc, #288]	; (80011c4 <HAL_ADC_PollForConversion+0x1f0>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d104      	bne.n	80010b2 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	e00f      	b.n	80010d2 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010ba:	d004      	beq.n	80010c6 <HAL_ADC_PollForConversion+0xf2>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a3d      	ldr	r2, [pc, #244]	; (80011b8 <HAL_ADC_PollForConversion+0x1e4>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d102      	bne.n	80010cc <HAL_ADC_PollForConversion+0xf8>
 80010c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80010ca:	e000      	b.n	80010ce <HAL_ADC_PollForConversion+0xfa>
 80010cc:	4b3d      	ldr	r3, [pc, #244]	; (80011c4 <HAL_ADC_PollForConversion+0x1f0>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80010d2:	f7ff fc41 	bl	8000958 <HAL_GetTick>
 80010d6:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80010d8:	e01a      	b.n	8001110 <HAL_ADC_PollForConversion+0x13c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e0:	d016      	beq.n	8001110 <HAL_ADC_PollForConversion+0x13c>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d007      	beq.n	80010f8 <HAL_ADC_PollForConversion+0x124>
 80010e8:	f7ff fc36 	bl	8000958 <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	683a      	ldr	r2, [r7, #0]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d20b      	bcs.n	8001110 <HAL_ADC_PollForConversion+0x13c>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fc:	f043 0204 	orr.w	r2, r3, #4
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e04f      	b.n	80011b0 <HAL_ADC_PollForConversion+0x1dc>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	4013      	ands	r3, r2
 800111a:	2b00      	cmp	r3, #0
 800111c:	d0dd      	beq.n	80010da <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001134:	2b00      	cmp	r3, #0
 8001136:	d131      	bne.n	800119c <HAL_ADC_PollForConversion+0x1c8>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800113e:	2b00      	cmp	r3, #0
 8001140:	d12c      	bne.n	800119c <HAL_ADC_PollForConversion+0x1c8>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0308 	and.w	r3, r3, #8
 800114c:	2b08      	cmp	r3, #8
 800114e:	d125      	bne.n	800119c <HAL_ADC_PollForConversion+0x1c8>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f003 0304 	and.w	r3, r3, #4
 800115a:	2b00      	cmp	r3, #0
 800115c:	d112      	bne.n	8001184 <HAL_ADC_PollForConversion+0x1b0>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d112      	bne.n	800119c <HAL_ADC_PollForConversion+0x1c8>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	f043 0201 	orr.w	r2, r3, #1
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	641a      	str	r2, [r3, #64]	; 0x40
 8001182:	e00b      	b.n	800119c <HAL_ADC_PollForConversion+0x1c8>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001188:	f043 0220 	orr.w	r2, r3, #32
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001194:	f043 0201 	orr.w	r2, r3, #1
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d103      	bne.n	80011ae <HAL_ADC_PollForConversion+0x1da>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	697a      	ldr	r2, [r7, #20]
 80011ac:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80011ae:	2300      	movs	r3, #0
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	50000100 	.word	0x50000100
 80011bc:	50000300 	.word	0x50000300
 80011c0:	50000700 	.word	0x50000700
 80011c4:	50000400 	.word	0x50000400

080011c8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
	...

080011e4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b09b      	sub	sp, #108	; 0x6c
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011ee:	2300      	movs	r3, #0
 80011f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d101      	bne.n	8001206 <HAL_ADC_ConfigChannel+0x22>
 8001202:	2302      	movs	r3, #2
 8001204:	e2cb      	b.n	800179e <HAL_ADC_ConfigChannel+0x5ba>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2201      	movs	r2, #1
 800120a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f003 0304 	and.w	r3, r3, #4
 8001218:	2b00      	cmp	r3, #0
 800121a:	f040 82af 	bne.w	800177c <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	2b04      	cmp	r3, #4
 8001224:	d81c      	bhi.n	8001260 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	4613      	mov	r3, r2
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	4413      	add	r3, r2
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	461a      	mov	r2, r3
 800123a:	231f      	movs	r3, #31
 800123c:	4093      	lsls	r3, r2
 800123e:	43db      	mvns	r3, r3
 8001240:	4019      	ands	r1, r3
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	6818      	ldr	r0, [r3, #0]
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685a      	ldr	r2, [r3, #4]
 800124a:	4613      	mov	r3, r2
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	4413      	add	r3, r2
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	fa00 f203 	lsl.w	r2, r0, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	430a      	orrs	r2, r1
 800125c:	631a      	str	r2, [r3, #48]	; 0x30
 800125e:	e063      	b.n	8001328 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b09      	cmp	r3, #9
 8001266:	d81e      	bhi.n	80012a6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685a      	ldr	r2, [r3, #4]
 8001272:	4613      	mov	r3, r2
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	4413      	add	r3, r2
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	3b1e      	subs	r3, #30
 800127c:	221f      	movs	r2, #31
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43db      	mvns	r3, r3
 8001284:	4019      	ands	r1, r3
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	6818      	ldr	r0, [r3, #0]
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685a      	ldr	r2, [r3, #4]
 800128e:	4613      	mov	r3, r2
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	4413      	add	r3, r2
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	3b1e      	subs	r3, #30
 8001298:	fa00 f203 	lsl.w	r2, r0, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	430a      	orrs	r2, r1
 80012a2:	635a      	str	r2, [r3, #52]	; 0x34
 80012a4:	e040      	b.n	8001328 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	2b0e      	cmp	r3, #14
 80012ac:	d81e      	bhi.n	80012ec <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	4613      	mov	r3, r2
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	4413      	add	r3, r2
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	3b3c      	subs	r3, #60	; 0x3c
 80012c2:	221f      	movs	r2, #31
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	4019      	ands	r1, r3
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	6818      	ldr	r0, [r3, #0]
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685a      	ldr	r2, [r3, #4]
 80012d4:	4613      	mov	r3, r2
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	4413      	add	r3, r2
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	3b3c      	subs	r3, #60	; 0x3c
 80012de:	fa00 f203 	lsl.w	r2, r0, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	430a      	orrs	r2, r1
 80012e8:	639a      	str	r2, [r3, #56]	; 0x38
 80012ea:	e01d      	b.n	8001328 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685a      	ldr	r2, [r3, #4]
 80012f6:	4613      	mov	r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	4413      	add	r3, r2
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	3b5a      	subs	r3, #90	; 0x5a
 8001300:	221f      	movs	r2, #31
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43db      	mvns	r3, r3
 8001308:	4019      	ands	r1, r3
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	6818      	ldr	r0, [r3, #0]
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685a      	ldr	r2, [r3, #4]
 8001312:	4613      	mov	r3, r2
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	4413      	add	r3, r2
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	3b5a      	subs	r3, #90	; 0x5a
 800131c:	fa00 f203 	lsl.w	r2, r0, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	430a      	orrs	r2, r1
 8001326:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f003 030c 	and.w	r3, r3, #12
 8001332:	2b00      	cmp	r3, #0
 8001334:	f040 80e5 	bne.w	8001502 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b09      	cmp	r3, #9
 800133e:	d91c      	bls.n	800137a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	6999      	ldr	r1, [r3, #24]
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	4613      	mov	r3, r2
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	4413      	add	r3, r2
 8001350:	3b1e      	subs	r3, #30
 8001352:	2207      	movs	r2, #7
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	4019      	ands	r1, r3
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	6898      	ldr	r0, [r3, #8]
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	4613      	mov	r3, r2
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	4413      	add	r3, r2
 800136a:	3b1e      	subs	r3, #30
 800136c:	fa00 f203 	lsl.w	r2, r0, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	430a      	orrs	r2, r1
 8001376:	619a      	str	r2, [r3, #24]
 8001378:	e019      	b.n	80013ae <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	6959      	ldr	r1, [r3, #20]
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4613      	mov	r3, r2
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	4413      	add	r3, r2
 800138a:	2207      	movs	r2, #7
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	4019      	ands	r1, r3
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	6898      	ldr	r0, [r3, #8]
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	4613      	mov	r3, r2
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	4413      	add	r3, r2
 80013a2:	fa00 f203 	lsl.w	r2, r0, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	430a      	orrs	r2, r1
 80013ac:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	695a      	ldr	r2, [r3, #20]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	08db      	lsrs	r3, r3, #3
 80013ba:	f003 0303 	and.w	r3, r3, #3
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	2b03      	cmp	r3, #3
 80013ce:	d84f      	bhi.n	8001470 <HAL_ADC_ConfigChannel+0x28c>
 80013d0:	a201      	add	r2, pc, #4	; (adr r2, 80013d8 <HAL_ADC_ConfigChannel+0x1f4>)
 80013d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d6:	bf00      	nop
 80013d8:	080013e9 	.word	0x080013e9
 80013dc:	0800140b 	.word	0x0800140b
 80013e0:	0800142d 	.word	0x0800142d
 80013e4:	0800144f 	.word	0x0800144f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013ee:	4b9f      	ldr	r3, [pc, #636]	; (800166c <HAL_ADC_ConfigChannel+0x488>)
 80013f0:	4013      	ands	r3, r2
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	6812      	ldr	r2, [r2, #0]
 80013f6:	0691      	lsls	r1, r2, #26
 80013f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013fa:	430a      	orrs	r2, r1
 80013fc:	431a      	orrs	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001406:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001408:	e07e      	b.n	8001508 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001410:	4b96      	ldr	r3, [pc, #600]	; (800166c <HAL_ADC_ConfigChannel+0x488>)
 8001412:	4013      	ands	r3, r2
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	6812      	ldr	r2, [r2, #0]
 8001418:	0691      	lsls	r1, r2, #26
 800141a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800141c:	430a      	orrs	r2, r1
 800141e:	431a      	orrs	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001428:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800142a:	e06d      	b.n	8001508 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001432:	4b8e      	ldr	r3, [pc, #568]	; (800166c <HAL_ADC_ConfigChannel+0x488>)
 8001434:	4013      	ands	r3, r2
 8001436:	683a      	ldr	r2, [r7, #0]
 8001438:	6812      	ldr	r2, [r2, #0]
 800143a:	0691      	lsls	r1, r2, #26
 800143c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800143e:	430a      	orrs	r2, r1
 8001440:	431a      	orrs	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800144a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800144c:	e05c      	b.n	8001508 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001454:	4b85      	ldr	r3, [pc, #532]	; (800166c <HAL_ADC_ConfigChannel+0x488>)
 8001456:	4013      	ands	r3, r2
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	6812      	ldr	r2, [r2, #0]
 800145c:	0691      	lsls	r1, r2, #26
 800145e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001460:	430a      	orrs	r2, r1
 8001462:	431a      	orrs	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800146c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800146e:	e04b      	b.n	8001508 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001476:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	069b      	lsls	r3, r3, #26
 8001480:	429a      	cmp	r2, r3
 8001482:	d107      	bne.n	8001494 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001492:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800149a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	069b      	lsls	r3, r3, #26
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d107      	bne.n	80014b8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80014b6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80014be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	069b      	lsls	r3, r3, #26
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d107      	bne.n	80014dc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80014da:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80014e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	069b      	lsls	r3, r3, #26
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d10a      	bne.n	8001506 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80014fe:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001500:	e001      	b.n	8001506 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001502:	bf00      	nop
 8001504:	e000      	b.n	8001508 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001506:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f003 0303 	and.w	r3, r3, #3
 8001512:	2b01      	cmp	r3, #1
 8001514:	d108      	bne.n	8001528 <HAL_ADC_ConfigChannel+0x344>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	2b01      	cmp	r3, #1
 8001522:	d101      	bne.n	8001528 <HAL_ADC_ConfigChannel+0x344>
 8001524:	2301      	movs	r3, #1
 8001526:	e000      	b.n	800152a <HAL_ADC_ConfigChannel+0x346>
 8001528:	2300      	movs	r3, #0
 800152a:	2b00      	cmp	r3, #0
 800152c:	f040 8131 	bne.w	8001792 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d00f      	beq.n	8001558 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2201      	movs	r2, #1
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43da      	mvns	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	400a      	ands	r2, r1
 8001552:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001556:	e049      	b.n	80015ec <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2201      	movs	r2, #1
 8001566:	409a      	lsls	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	430a      	orrs	r2, r1
 800156e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2b09      	cmp	r3, #9
 8001578:	d91c      	bls.n	80015b4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	6999      	ldr	r1, [r3, #24]
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4613      	mov	r3, r2
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	4413      	add	r3, r2
 800158a:	3b1b      	subs	r3, #27
 800158c:	2207      	movs	r2, #7
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43db      	mvns	r3, r3
 8001594:	4019      	ands	r1, r3
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	6898      	ldr	r0, [r3, #8]
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	4613      	mov	r3, r2
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	4413      	add	r3, r2
 80015a4:	3b1b      	subs	r3, #27
 80015a6:	fa00 f203 	lsl.w	r2, r0, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	430a      	orrs	r2, r1
 80015b0:	619a      	str	r2, [r3, #24]
 80015b2:	e01b      	b.n	80015ec <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6959      	ldr	r1, [r3, #20]
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	1c5a      	adds	r2, r3, #1
 80015c0:	4613      	mov	r3, r2
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	4413      	add	r3, r2
 80015c6:	2207      	movs	r2, #7
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	43db      	mvns	r3, r3
 80015ce:	4019      	ands	r1, r3
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	6898      	ldr	r0, [r3, #8]
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	1c5a      	adds	r2, r3, #1
 80015da:	4613      	mov	r3, r2
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	4413      	add	r3, r2
 80015e0:	fa00 f203 	lsl.w	r2, r0, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	430a      	orrs	r2, r1
 80015ea:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015f4:	d004      	beq.n	8001600 <HAL_ADC_ConfigChannel+0x41c>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a1d      	ldr	r2, [pc, #116]	; (8001670 <HAL_ADC_ConfigChannel+0x48c>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d101      	bne.n	8001604 <HAL_ADC_ConfigChannel+0x420>
 8001600:	4b1c      	ldr	r3, [pc, #112]	; (8001674 <HAL_ADC_ConfigChannel+0x490>)
 8001602:	e000      	b.n	8001606 <HAL_ADC_ConfigChannel+0x422>
 8001604:	4b1c      	ldr	r3, [pc, #112]	; (8001678 <HAL_ADC_ConfigChannel+0x494>)
 8001606:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b10      	cmp	r3, #16
 800160e:	d105      	bne.n	800161c <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001610:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001618:	2b00      	cmp	r3, #0
 800161a:	d015      	beq.n	8001648 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001620:	2b11      	cmp	r3, #17
 8001622:	d105      	bne.n	8001630 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001624:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800162c:	2b00      	cmp	r3, #0
 800162e:	d00b      	beq.n	8001648 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001634:	2b12      	cmp	r3, #18
 8001636:	f040 80ac 	bne.w	8001792 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800163a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001642:	2b00      	cmp	r3, #0
 8001644:	f040 80a5 	bne.w	8001792 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001650:	d102      	bne.n	8001658 <HAL_ADC_ConfigChannel+0x474>
 8001652:	4b07      	ldr	r3, [pc, #28]	; (8001670 <HAL_ADC_ConfigChannel+0x48c>)
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	e023      	b.n	80016a0 <HAL_ADC_ConfigChannel+0x4bc>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a04      	ldr	r2, [pc, #16]	; (8001670 <HAL_ADC_ConfigChannel+0x48c>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d10c      	bne.n	800167c <HAL_ADC_ConfigChannel+0x498>
 8001662:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	e01a      	b.n	80016a0 <HAL_ADC_ConfigChannel+0x4bc>
 800166a:	bf00      	nop
 800166c:	83fff000 	.word	0x83fff000
 8001670:	50000100 	.word	0x50000100
 8001674:	50000300 	.word	0x50000300
 8001678:	50000700 	.word	0x50000700
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a4a      	ldr	r2, [pc, #296]	; (80017ac <HAL_ADC_ConfigChannel+0x5c8>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d102      	bne.n	800168c <HAL_ADC_ConfigChannel+0x4a8>
 8001686:	4b4a      	ldr	r3, [pc, #296]	; (80017b0 <HAL_ADC_ConfigChannel+0x5cc>)
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	e009      	b.n	80016a0 <HAL_ADC_ConfigChannel+0x4bc>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a47      	ldr	r2, [pc, #284]	; (80017b0 <HAL_ADC_ConfigChannel+0x5cc>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d102      	bne.n	800169c <HAL_ADC_ConfigChannel+0x4b8>
 8001696:	4b45      	ldr	r3, [pc, #276]	; (80017ac <HAL_ADC_ConfigChannel+0x5c8>)
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	e001      	b.n	80016a0 <HAL_ADC_ConfigChannel+0x4bc>
 800169c:	2300      	movs	r3, #0
 800169e:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f003 0303 	and.w	r3, r3, #3
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d108      	bne.n	80016c0 <HAL_ADC_ConfigChannel+0x4dc>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d101      	bne.n	80016c0 <HAL_ADC_ConfigChannel+0x4dc>
 80016bc:	2301      	movs	r3, #1
 80016be:	e000      	b.n	80016c2 <HAL_ADC_ConfigChannel+0x4de>
 80016c0:	2300      	movs	r3, #0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d150      	bne.n	8001768 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80016c6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d010      	beq.n	80016ee <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f003 0303 	and.w	r3, r3, #3
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d107      	bne.n	80016e8 <HAL_ADC_ConfigChannel+0x504>
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d101      	bne.n	80016e8 <HAL_ADC_ConfigChannel+0x504>
 80016e4:	2301      	movs	r3, #1
 80016e6:	e000      	b.n	80016ea <HAL_ADC_ConfigChannel+0x506>
 80016e8:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d13c      	bne.n	8001768 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2b10      	cmp	r3, #16
 80016f4:	d11d      	bne.n	8001732 <HAL_ADC_ConfigChannel+0x54e>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016fe:	d118      	bne.n	8001732 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001700:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001708:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800170a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800170c:	4b29      	ldr	r3, [pc, #164]	; (80017b4 <HAL_ADC_ConfigChannel+0x5d0>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a29      	ldr	r2, [pc, #164]	; (80017b8 <HAL_ADC_ConfigChannel+0x5d4>)
 8001712:	fba2 2303 	umull	r2, r3, r2, r3
 8001716:	0c9a      	lsrs	r2, r3, #18
 8001718:	4613      	mov	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001722:	e002      	b.n	800172a <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	3b01      	subs	r3, #1
 8001728:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1f9      	bne.n	8001724 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001730:	e02e      	b.n	8001790 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2b11      	cmp	r3, #17
 8001738:	d10b      	bne.n	8001752 <HAL_ADC_ConfigChannel+0x56e>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001742:	d106      	bne.n	8001752 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001744:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800174c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800174e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001750:	e01e      	b.n	8001790 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2b12      	cmp	r3, #18
 8001758:	d11a      	bne.n	8001790 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800175a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001762:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001764:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001766:	e013      	b.n	8001790 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176c:	f043 0220 	orr.w	r2, r3, #32
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800177a:	e00a      	b.n	8001792 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001780:	f043 0220 	orr.w	r2, r3, #32
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800178e:	e000      	b.n	8001792 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001790:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800179a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800179e:	4618      	mov	r0, r3
 80017a0:	376c      	adds	r7, #108	; 0x6c
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	50000400 	.word	0x50000400
 80017b0:	50000500 	.word	0x50000500
 80017b4:	20000000 	.word	0x20000000
 80017b8:	431bde83 	.word	0x431bde83

080017bc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80017bc:	b480      	push	{r7}
 80017be:	b099      	sub	sp, #100	; 0x64
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017c6:	2300      	movs	r3, #0
 80017c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017d4:	d102      	bne.n	80017dc <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80017d6:	4b6d      	ldr	r3, [pc, #436]	; (800198c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	e01a      	b.n	8001812 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a6a      	ldr	r2, [pc, #424]	; (800198c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d103      	bne.n	80017ee <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80017e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	e011      	b.n	8001812 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a67      	ldr	r2, [pc, #412]	; (8001990 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d102      	bne.n	80017fe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80017f8:	4b66      	ldr	r3, [pc, #408]	; (8001994 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	e009      	b.n	8001812 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a64      	ldr	r2, [pc, #400]	; (8001994 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d102      	bne.n	800180e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001808:	4b61      	ldr	r3, [pc, #388]	; (8001990 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800180a:	60bb      	str	r3, [r7, #8]
 800180c:	e001      	b.n	8001812 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800180e:	2300      	movs	r3, #0
 8001810:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d101      	bne.n	800181c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e0b0      	b.n	800197e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001822:	2b01      	cmp	r3, #1
 8001824:	d101      	bne.n	800182a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001826:	2302      	movs	r3, #2
 8001828:	e0a9      	b.n	800197e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 0304 	and.w	r3, r3, #4
 800183c:	2b00      	cmp	r3, #0
 800183e:	f040 808d 	bne.w	800195c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f003 0304 	and.w	r3, r3, #4
 800184a:	2b00      	cmp	r3, #0
 800184c:	f040 8086 	bne.w	800195c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001858:	d004      	beq.n	8001864 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a4b      	ldr	r2, [pc, #300]	; (800198c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d101      	bne.n	8001868 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001864:	4b4c      	ldr	r3, [pc, #304]	; (8001998 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001866:	e000      	b.n	800186a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001868:	4b4c      	ldr	r3, [pc, #304]	; (800199c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800186a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d040      	beq.n	80018f6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001874:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	6859      	ldr	r1, [r3, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001886:	035b      	lsls	r3, r3, #13
 8001888:	430b      	orrs	r3, r1
 800188a:	431a      	orrs	r2, r3
 800188c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800188e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	2b01      	cmp	r3, #1
 800189c:	d108      	bne.n	80018b0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d101      	bne.n	80018b0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80018ac:	2301      	movs	r3, #1
 80018ae:	e000      	b.n	80018b2 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80018b0:	2300      	movs	r3, #0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d15c      	bne.n	8001970 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f003 0303 	and.w	r3, r3, #3
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d107      	bne.n	80018d2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d101      	bne.n	80018d2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80018ce:	2301      	movs	r3, #1
 80018d0:	e000      	b.n	80018d4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80018d2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d14b      	bne.n	8001970 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80018d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80018e0:	f023 030f 	bic.w	r3, r3, #15
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	6811      	ldr	r1, [r2, #0]
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	6892      	ldr	r2, [r2, #8]
 80018ec:	430a      	orrs	r2, r1
 80018ee:	431a      	orrs	r2, r3
 80018f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018f2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80018f4:	e03c      	b.n	8001970 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80018f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001900:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f003 0303 	and.w	r3, r3, #3
 800190c:	2b01      	cmp	r3, #1
 800190e:	d108      	bne.n	8001922 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b01      	cmp	r3, #1
 800191c:	d101      	bne.n	8001922 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800191e:	2301      	movs	r3, #1
 8001920:	e000      	b.n	8001924 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001922:	2300      	movs	r3, #0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d123      	bne.n	8001970 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f003 0303 	and.w	r3, r3, #3
 8001930:	2b01      	cmp	r3, #1
 8001932:	d107      	bne.n	8001944 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	2b01      	cmp	r3, #1
 800193e:	d101      	bne.n	8001944 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001940:	2301      	movs	r3, #1
 8001942:	e000      	b.n	8001946 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001944:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001946:	2b00      	cmp	r3, #0
 8001948:	d112      	bne.n	8001970 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800194a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001952:	f023 030f 	bic.w	r3, r3, #15
 8001956:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001958:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800195a:	e009      	b.n	8001970 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001960:	f043 0220 	orr.w	r2, r3, #32
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800196e:	e000      	b.n	8001972 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001970:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800197a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800197e:	4618      	mov	r0, r3
 8001980:	3764      	adds	r7, #100	; 0x64
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	50000100 	.word	0x50000100
 8001990:	50000400 	.word	0x50000400
 8001994:	50000500 	.word	0x50000500
 8001998:	50000300 	.word	0x50000300
 800199c:	50000700 	.word	0x50000700

080019a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 0303 	and.w	r3, r3, #3
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d108      	bne.n	80019cc <ADC_Enable+0x2c>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0301 	and.w	r3, r3, #1
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d101      	bne.n	80019cc <ADC_Enable+0x2c>
 80019c8:	2301      	movs	r3, #1
 80019ca:	e000      	b.n	80019ce <ADC_Enable+0x2e>
 80019cc:	2300      	movs	r3, #0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d13c      	bne.n	8001a4c <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	4b1f      	ldr	r3, [pc, #124]	; (8001a58 <ADC_Enable+0xb8>)
 80019da:	4013      	ands	r3, r2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d00d      	beq.n	80019fc <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e4:	f043 0210 	orr.w	r2, r3, #16
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f0:	f043 0201 	orr.w	r2, r3, #1
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e028      	b.n	8001a4e <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	689a      	ldr	r2, [r3, #8]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f042 0201 	orr.w	r2, r2, #1
 8001a0a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001a0c:	f7fe ffa4 	bl	8000958 <HAL_GetTick>
 8001a10:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a12:	e014      	b.n	8001a3e <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a14:	f7fe ffa0 	bl	8000958 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d90d      	bls.n	8001a3e <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	f043 0210 	orr.w	r2, r3, #16
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a32:	f043 0201 	orr.w	r2, r3, #1
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e007      	b.n	8001a4e <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d1e3      	bne.n	8001a14 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	8000003f 	.word	0x8000003f

08001a5c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a64:	2300      	movs	r3, #0
 8001a66:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 0303 	and.w	r3, r3, #3
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d108      	bne.n	8001a88 <ADC_Disable+0x2c>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d101      	bne.n	8001a88 <ADC_Disable+0x2c>
 8001a84:	2301      	movs	r3, #1
 8001a86:	e000      	b.n	8001a8a <ADC_Disable+0x2e>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d040      	beq.n	8001b10 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 030d 	and.w	r3, r3, #13
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d10f      	bne.n	8001abc <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	689a      	ldr	r2, [r3, #8]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f042 0202 	orr.w	r2, r2, #2
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2203      	movs	r2, #3
 8001ab2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001ab4:	f7fe ff50 	bl	8000958 <HAL_GetTick>
 8001ab8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001aba:	e022      	b.n	8001b02 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac0:	f043 0210 	orr.w	r2, r3, #16
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001acc:	f043 0201 	orr.w	r2, r3, #1
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e01c      	b.n	8001b12 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ad8:	f7fe ff3e 	bl	8000958 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d90d      	bls.n	8001b02 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	f043 0210 	orr.w	r2, r3, #16
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af6:	f043 0201 	orr.w	r2, r3, #1
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e007      	b.n	8001b12 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d0e3      	beq.n	8001ad8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <__NVIC_SetPriorityGrouping+0x44>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b32:	68ba      	ldr	r2, [r7, #8]
 8001b34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b38:	4013      	ands	r3, r2
 8001b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b4e:	4a04      	ldr	r2, [pc, #16]	; (8001b60 <__NVIC_SetPriorityGrouping+0x44>)
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	60d3      	str	r3, [r2, #12]
}
 8001b54:	bf00      	nop
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b68:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <__NVIC_GetPriorityGrouping+0x18>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	0a1b      	lsrs	r3, r3, #8
 8001b6e:	f003 0307 	and.w	r3, r3, #7
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	db0b      	blt.n	8001baa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	f003 021f 	and.w	r2, r3, #31
 8001b98:	4907      	ldr	r1, [pc, #28]	; (8001bb8 <__NVIC_EnableIRQ+0x38>)
 8001b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9e:	095b      	lsrs	r3, r3, #5
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	e000e100 	.word	0xe000e100

08001bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	6039      	str	r1, [r7, #0]
 8001bc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	db0a      	blt.n	8001be6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	490c      	ldr	r1, [pc, #48]	; (8001c08 <__NVIC_SetPriority+0x4c>)
 8001bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bda:	0112      	lsls	r2, r2, #4
 8001bdc:	b2d2      	uxtb	r2, r2
 8001bde:	440b      	add	r3, r1
 8001be0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001be4:	e00a      	b.n	8001bfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	4908      	ldr	r1, [pc, #32]	; (8001c0c <__NVIC_SetPriority+0x50>)
 8001bec:	79fb      	ldrb	r3, [r7, #7]
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	3b04      	subs	r3, #4
 8001bf4:	0112      	lsls	r2, r2, #4
 8001bf6:	b2d2      	uxtb	r2, r2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	761a      	strb	r2, [r3, #24]
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	e000e100 	.word	0xe000e100
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b089      	sub	sp, #36	; 0x24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	f1c3 0307 	rsb	r3, r3, #7
 8001c2a:	2b04      	cmp	r3, #4
 8001c2c:	bf28      	it	cs
 8001c2e:	2304      	movcs	r3, #4
 8001c30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	3304      	adds	r3, #4
 8001c36:	2b06      	cmp	r3, #6
 8001c38:	d902      	bls.n	8001c40 <NVIC_EncodePriority+0x30>
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3b03      	subs	r3, #3
 8001c3e:	e000      	b.n	8001c42 <NVIC_EncodePriority+0x32>
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c44:	f04f 32ff 	mov.w	r2, #4294967295
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43da      	mvns	r2, r3
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	401a      	ands	r2, r3
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c58:	f04f 31ff 	mov.w	r1, #4294967295
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c62:	43d9      	mvns	r1, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c68:	4313      	orrs	r3, r2
         );
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3724      	adds	r7, #36	; 0x24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
	...

08001c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c88:	d301      	bcc.n	8001c8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e00f      	b.n	8001cae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c8e:	4a0a      	ldr	r2, [pc, #40]	; (8001cb8 <SysTick_Config+0x40>)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3b01      	subs	r3, #1
 8001c94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c96:	210f      	movs	r1, #15
 8001c98:	f04f 30ff 	mov.w	r0, #4294967295
 8001c9c:	f7ff ff8e 	bl	8001bbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ca0:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <SysTick_Config+0x40>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ca6:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <SysTick_Config+0x40>)
 8001ca8:	2207      	movs	r2, #7
 8001caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	e000e010 	.word	0xe000e010

08001cbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f7ff ff29 	bl	8001b1c <__NVIC_SetPriorityGrouping>
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b086      	sub	sp, #24
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	4603      	mov	r3, r0
 8001cda:	60b9      	str	r1, [r7, #8]
 8001cdc:	607a      	str	r2, [r7, #4]
 8001cde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce4:	f7ff ff3e 	bl	8001b64 <__NVIC_GetPriorityGrouping>
 8001ce8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	68b9      	ldr	r1, [r7, #8]
 8001cee:	6978      	ldr	r0, [r7, #20]
 8001cf0:	f7ff ff8e 	bl	8001c10 <NVIC_EncodePriority>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff ff5d 	bl	8001bbc <__NVIC_SetPriority>
}
 8001d02:	bf00      	nop
 8001d04:	3718      	adds	r7, #24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	4603      	mov	r3, r0
 8001d12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff ff31 	bl	8001b80 <__NVIC_EnableIRQ>
}
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7ff ffa2 	bl	8001c78 <SysTick_Config>
 8001d34:	4603      	mov	r3, r0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
	...

08001d40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b087      	sub	sp, #28
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d4e:	e160      	b.n	8002012 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	2101      	movs	r1, #1
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 8152 	beq.w	800200c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d00b      	beq.n	8001d88 <HAL_GPIO_Init+0x48>
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d007      	beq.n	8001d88 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d7c:	2b11      	cmp	r3, #17
 8001d7e:	d003      	beq.n	8001d88 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b12      	cmp	r3, #18
 8001d86:	d130      	bne.n	8001dea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	2203      	movs	r2, #3
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	68da      	ldr	r2, [r3, #12]
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	091b      	lsrs	r3, r3, #4
 8001dd4:	f003 0201 	and.w	r2, r3, #1
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	2203      	movs	r2, #3
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	689a      	ldr	r2, [r3, #8]
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d003      	beq.n	8001e2a <HAL_GPIO_Init+0xea>
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b12      	cmp	r3, #18
 8001e28:	d123      	bne.n	8001e72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	08da      	lsrs	r2, r3, #3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	3208      	adds	r2, #8
 8001e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	220f      	movs	r2, #15
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	43db      	mvns	r3, r3
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	691a      	ldr	r2, [r3, #16]
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	08da      	lsrs	r2, r3, #3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3208      	adds	r2, #8
 8001e6c:	6939      	ldr	r1, [r7, #16]
 8001e6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	2203      	movs	r2, #3
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43db      	mvns	r3, r3
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	4013      	ands	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f003 0203 	and.w	r2, r3, #3
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 80ac 	beq.w	800200c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb4:	4b5e      	ldr	r3, [pc, #376]	; (8002030 <HAL_GPIO_Init+0x2f0>)
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	4a5d      	ldr	r2, [pc, #372]	; (8002030 <HAL_GPIO_Init+0x2f0>)
 8001eba:	f043 0301 	orr.w	r3, r3, #1
 8001ebe:	6193      	str	r3, [r2, #24]
 8001ec0:	4b5b      	ldr	r3, [pc, #364]	; (8002030 <HAL_GPIO_Init+0x2f0>)
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ecc:	4a59      	ldr	r2, [pc, #356]	; (8002034 <HAL_GPIO_Init+0x2f4>)
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	089b      	lsrs	r3, r3, #2
 8001ed2:	3302      	adds	r3, #2
 8001ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f003 0303 	and.w	r3, r3, #3
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	220f      	movs	r2, #15
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	4013      	ands	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ef6:	d025      	beq.n	8001f44 <HAL_GPIO_Init+0x204>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a4f      	ldr	r2, [pc, #316]	; (8002038 <HAL_GPIO_Init+0x2f8>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d01f      	beq.n	8001f40 <HAL_GPIO_Init+0x200>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a4e      	ldr	r2, [pc, #312]	; (800203c <HAL_GPIO_Init+0x2fc>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d019      	beq.n	8001f3c <HAL_GPIO_Init+0x1fc>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a4d      	ldr	r2, [pc, #308]	; (8002040 <HAL_GPIO_Init+0x300>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d013      	beq.n	8001f38 <HAL_GPIO_Init+0x1f8>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a4c      	ldr	r2, [pc, #304]	; (8002044 <HAL_GPIO_Init+0x304>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d00d      	beq.n	8001f34 <HAL_GPIO_Init+0x1f4>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a4b      	ldr	r2, [pc, #300]	; (8002048 <HAL_GPIO_Init+0x308>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d007      	beq.n	8001f30 <HAL_GPIO_Init+0x1f0>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a4a      	ldr	r2, [pc, #296]	; (800204c <HAL_GPIO_Init+0x30c>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d101      	bne.n	8001f2c <HAL_GPIO_Init+0x1ec>
 8001f28:	2306      	movs	r3, #6
 8001f2a:	e00c      	b.n	8001f46 <HAL_GPIO_Init+0x206>
 8001f2c:	2307      	movs	r3, #7
 8001f2e:	e00a      	b.n	8001f46 <HAL_GPIO_Init+0x206>
 8001f30:	2305      	movs	r3, #5
 8001f32:	e008      	b.n	8001f46 <HAL_GPIO_Init+0x206>
 8001f34:	2304      	movs	r3, #4
 8001f36:	e006      	b.n	8001f46 <HAL_GPIO_Init+0x206>
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e004      	b.n	8001f46 <HAL_GPIO_Init+0x206>
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	e002      	b.n	8001f46 <HAL_GPIO_Init+0x206>
 8001f40:	2301      	movs	r3, #1
 8001f42:	e000      	b.n	8001f46 <HAL_GPIO_Init+0x206>
 8001f44:	2300      	movs	r3, #0
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	f002 0203 	and.w	r2, r2, #3
 8001f4c:	0092      	lsls	r2, r2, #2
 8001f4e:	4093      	lsls	r3, r2
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f56:	4937      	ldr	r1, [pc, #220]	; (8002034 <HAL_GPIO_Init+0x2f4>)
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	089b      	lsrs	r3, r3, #2
 8001f5c:	3302      	adds	r3, #2
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f64:	4b3a      	ldr	r3, [pc, #232]	; (8002050 <HAL_GPIO_Init+0x310>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	4013      	ands	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d003      	beq.n	8001f88 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f88:	4a31      	ldr	r2, [pc, #196]	; (8002050 <HAL_GPIO_Init+0x310>)
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f8e:	4b30      	ldr	r3, [pc, #192]	; (8002050 <HAL_GPIO_Init+0x310>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	43db      	mvns	r3, r3
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001fb2:	4a27      	ldr	r2, [pc, #156]	; (8002050 <HAL_GPIO_Init+0x310>)
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fb8:	4b25      	ldr	r3, [pc, #148]	; (8002050 <HAL_GPIO_Init+0x310>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001fdc:	4a1c      	ldr	r2, [pc, #112]	; (8002050 <HAL_GPIO_Init+0x310>)
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fe2:	4b1b      	ldr	r3, [pc, #108]	; (8002050 <HAL_GPIO_Init+0x310>)
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	43db      	mvns	r3, r3
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4313      	orrs	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002006:	4a12      	ldr	r2, [pc, #72]	; (8002050 <HAL_GPIO_Init+0x310>)
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	3301      	adds	r3, #1
 8002010:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	fa22 f303 	lsr.w	r3, r2, r3
 800201c:	2b00      	cmp	r3, #0
 800201e:	f47f ae97 	bne.w	8001d50 <HAL_GPIO_Init+0x10>
  }
}
 8002022:	bf00      	nop
 8002024:	371c      	adds	r7, #28
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	40021000 	.word	0x40021000
 8002034:	40010000 	.word	0x40010000
 8002038:	48000400 	.word	0x48000400
 800203c:	48000800 	.word	0x48000800
 8002040:	48000c00 	.word	0x48000c00
 8002044:	48001000 	.word	0x48001000
 8002048:	48001400 	.word	0x48001400
 800204c:	48001800 	.word	0x48001800
 8002050:	40010400 	.word	0x40010400

08002054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	807b      	strh	r3, [r7, #2]
 8002060:	4613      	mov	r3, r2
 8002062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002064:	787b      	ldrb	r3, [r7, #1]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800206a:	887a      	ldrh	r2, [r7, #2]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002070:	e002      	b.n	8002078 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002072:	887a      	ldrh	r2, [r7, #2]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	695b      	ldr	r3, [r3, #20]
 8002094:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002096:	887a      	ldrh	r2, [r7, #2]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4013      	ands	r3, r2
 800209c:	041a      	lsls	r2, r3, #16
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	43d9      	mvns	r1, r3
 80020a2:	887b      	ldrh	r3, [r7, #2]
 80020a4:	400b      	ands	r3, r1
 80020a6:	431a      	orrs	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	619a      	str	r2, [r3, #24]
}
 80020ac:	bf00      	nop
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020c2:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020c4:	695a      	ldr	r2, [r3, #20]
 80020c6:	88fb      	ldrh	r3, [r7, #6]
 80020c8:	4013      	ands	r3, r2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d006      	beq.n	80020dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020ce:	4a05      	ldr	r2, [pc, #20]	; (80020e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020d0:	88fb      	ldrh	r3, [r7, #6]
 80020d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020d4:	88fb      	ldrh	r3, [r7, #6]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe fa8d 	bl	80005f6 <HAL_GPIO_EXTI_Callback>
  }
}
 80020dc:	bf00      	nop
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40010400 	.word	0x40010400

080020e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	1d3b      	adds	r3, r7, #4
 80020f2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020f4:	1d3b      	adds	r3, r7, #4
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d102      	bne.n	8002102 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	f000 bf01 	b.w	8002f04 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002102:	1d3b      	adds	r3, r7, #4
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 8160 	beq.w	80023d2 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002112:	4bae      	ldr	r3, [pc, #696]	; (80023cc <HAL_RCC_OscConfig+0x2e4>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f003 030c 	and.w	r3, r3, #12
 800211a:	2b04      	cmp	r3, #4
 800211c:	d00c      	beq.n	8002138 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800211e:	4bab      	ldr	r3, [pc, #684]	; (80023cc <HAL_RCC_OscConfig+0x2e4>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f003 030c 	and.w	r3, r3, #12
 8002126:	2b08      	cmp	r3, #8
 8002128:	d159      	bne.n	80021de <HAL_RCC_OscConfig+0xf6>
 800212a:	4ba8      	ldr	r3, [pc, #672]	; (80023cc <HAL_RCC_OscConfig+0x2e4>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002136:	d152      	bne.n	80021de <HAL_RCC_OscConfig+0xf6>
 8002138:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800213c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002140:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002144:	fa93 f3a3 	rbit	r3, r3
 8002148:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800214c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002150:	fab3 f383 	clz	r3, r3
 8002154:	b2db      	uxtb	r3, r3
 8002156:	095b      	lsrs	r3, r3, #5
 8002158:	b2db      	uxtb	r3, r3
 800215a:	f043 0301 	orr.w	r3, r3, #1
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b01      	cmp	r3, #1
 8002162:	d102      	bne.n	800216a <HAL_RCC_OscConfig+0x82>
 8002164:	4b99      	ldr	r3, [pc, #612]	; (80023cc <HAL_RCC_OscConfig+0x2e4>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	e015      	b.n	8002196 <HAL_RCC_OscConfig+0xae>
 800216a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800216e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002172:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002176:	fa93 f3a3 	rbit	r3, r3
 800217a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800217e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002182:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002186:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800218a:	fa93 f3a3 	rbit	r3, r3
 800218e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002192:	4b8e      	ldr	r3, [pc, #568]	; (80023cc <HAL_RCC_OscConfig+0x2e4>)
 8002194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002196:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800219a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800219e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80021a2:	fa92 f2a2 	rbit	r2, r2
 80021a6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80021aa:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80021ae:	fab2 f282 	clz	r2, r2
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	f042 0220 	orr.w	r2, r2, #32
 80021b8:	b2d2      	uxtb	r2, r2
 80021ba:	f002 021f 	and.w	r2, r2, #31
 80021be:	2101      	movs	r1, #1
 80021c0:	fa01 f202 	lsl.w	r2, r1, r2
 80021c4:	4013      	ands	r3, r2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f000 8102 	beq.w	80023d0 <HAL_RCC_OscConfig+0x2e8>
 80021cc:	1d3b      	adds	r3, r7, #4
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f040 80fc 	bne.w	80023d0 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	f000 be93 	b.w	8002f04 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021de:	1d3b      	adds	r3, r7, #4
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e8:	d106      	bne.n	80021f8 <HAL_RCC_OscConfig+0x110>
 80021ea:	4b78      	ldr	r3, [pc, #480]	; (80023cc <HAL_RCC_OscConfig+0x2e4>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a77      	ldr	r2, [pc, #476]	; (80023cc <HAL_RCC_OscConfig+0x2e4>)
 80021f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	e030      	b.n	800225a <HAL_RCC_OscConfig+0x172>
 80021f8:	1d3b      	adds	r3, r7, #4
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10c      	bne.n	800221c <HAL_RCC_OscConfig+0x134>
 8002202:	4b72      	ldr	r3, [pc, #456]	; (80023cc <HAL_RCC_OscConfig+0x2e4>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a71      	ldr	r2, [pc, #452]	; (80023cc <HAL_RCC_OscConfig+0x2e4>)
 8002208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	4b6f      	ldr	r3, [pc, #444]	; (80023cc <HAL_RCC_OscConfig+0x2e4>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a6e      	ldr	r2, [pc, #440]	; (80023cc <HAL_RCC_OscConfig+0x2e4>)
 8002214:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	e01e      	b.n	800225a <HAL_RCC_OscConfig+0x172>
 800221c:	1d3b      	adds	r3, r7, #4
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002226:	d10c      	bne.n	8002242 <HAL_RCC_OscConfig+0x15a>
 8002228:	4b68      	ldr	r3, [pc, #416]	; (80023cc <HAL_RCC_OscConfig+0x2e4>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a67      	ldr	r2, [pc, #412]	; (80023cc <HAL_RCC_OscConfig+0x2e4>)
 800222e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002232:	6013      	str	r3, [r2, #0]
 8002234:	4b65      	ldr	r3, [pc, #404]	; (80023cc <HAL_RCC_OscConfig+0x2e4>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a64      	ldr	r2, [pc, #400]	; (80023cc <HAL_RCC_OscConfig+0x2e4>)
 800223a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800223e:	6013      	str	r3, [r2, #0]
 8002240:	e00b      	b.n	800225a <HAL_RCC_OscConfig+0x172>
 8002242:	4b62      	ldr	r3, [pc, #392]	; (80023cc <HAL_RCC_OscConfig+0x2e4>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a61      	ldr	r2, [pc, #388]	; (80023cc <HAL_RCC_OscConfig+0x2e4>)
 8002248:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	4b5f      	ldr	r3, [pc, #380]	; (80023cc <HAL_RCC_OscConfig+0x2e4>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a5e      	ldr	r2, [pc, #376]	; (80023cc <HAL_RCC_OscConfig+0x2e4>)
 8002254:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002258:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800225a:	1d3b      	adds	r3, r7, #4
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d059      	beq.n	8002318 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002264:	f7fe fb78 	bl	8000958 <HAL_GetTick>
 8002268:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226c:	e00a      	b.n	8002284 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800226e:	f7fe fb73 	bl	8000958 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b64      	cmp	r3, #100	; 0x64
 800227c:	d902      	bls.n	8002284 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	f000 be40 	b.w	8002f04 <HAL_RCC_OscConfig+0xe1c>
 8002284:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002288:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002290:	fa93 f3a3 	rbit	r3, r3
 8002294:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002298:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229c:	fab3 f383 	clz	r3, r3
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	095b      	lsrs	r3, r3, #5
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	f043 0301 	orr.w	r3, r3, #1
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d102      	bne.n	80022b6 <HAL_RCC_OscConfig+0x1ce>
 80022b0:	4b46      	ldr	r3, [pc, #280]	; (80023cc <HAL_RCC_OscConfig+0x2e4>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	e015      	b.n	80022e2 <HAL_RCC_OscConfig+0x1fa>
 80022b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022ba:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022be:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80022c2:	fa93 f3a3 	rbit	r3, r3
 80022c6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80022ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022ce:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80022d2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80022d6:	fa93 f3a3 	rbit	r3, r3
 80022da:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80022de:	4b3b      	ldr	r3, [pc, #236]	; (80023cc <HAL_RCC_OscConfig+0x2e4>)
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022e6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80022ea:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80022ee:	fa92 f2a2 	rbit	r2, r2
 80022f2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80022f6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80022fa:	fab2 f282 	clz	r2, r2
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	f042 0220 	orr.w	r2, r2, #32
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	f002 021f 	and.w	r2, r2, #31
 800230a:	2101      	movs	r1, #1
 800230c:	fa01 f202 	lsl.w	r2, r1, r2
 8002310:	4013      	ands	r3, r2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d0ab      	beq.n	800226e <HAL_RCC_OscConfig+0x186>
 8002316:	e05c      	b.n	80023d2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002318:	f7fe fb1e 	bl	8000958 <HAL_GetTick>
 800231c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002320:	e00a      	b.n	8002338 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002322:	f7fe fb19 	bl	8000958 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b64      	cmp	r3, #100	; 0x64
 8002330:	d902      	bls.n	8002338 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	f000 bde6 	b.w	8002f04 <HAL_RCC_OscConfig+0xe1c>
 8002338:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800233c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002340:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002344:	fa93 f3a3 	rbit	r3, r3
 8002348:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800234c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002350:	fab3 f383 	clz	r3, r3
 8002354:	b2db      	uxtb	r3, r3
 8002356:	095b      	lsrs	r3, r3, #5
 8002358:	b2db      	uxtb	r3, r3
 800235a:	f043 0301 	orr.w	r3, r3, #1
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b01      	cmp	r3, #1
 8002362:	d102      	bne.n	800236a <HAL_RCC_OscConfig+0x282>
 8002364:	4b19      	ldr	r3, [pc, #100]	; (80023cc <HAL_RCC_OscConfig+0x2e4>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	e015      	b.n	8002396 <HAL_RCC_OscConfig+0x2ae>
 800236a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800236e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002372:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002376:	fa93 f3a3 	rbit	r3, r3
 800237a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800237e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002382:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002386:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800238a:	fa93 f3a3 	rbit	r3, r3
 800238e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002392:	4b0e      	ldr	r3, [pc, #56]	; (80023cc <HAL_RCC_OscConfig+0x2e4>)
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800239a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800239e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80023a2:	fa92 f2a2 	rbit	r2, r2
 80023a6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80023aa:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80023ae:	fab2 f282 	clz	r2, r2
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	f042 0220 	orr.w	r2, r2, #32
 80023b8:	b2d2      	uxtb	r2, r2
 80023ba:	f002 021f 	and.w	r2, r2, #31
 80023be:	2101      	movs	r1, #1
 80023c0:	fa01 f202 	lsl.w	r2, r1, r2
 80023c4:	4013      	ands	r3, r2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1ab      	bne.n	8002322 <HAL_RCC_OscConfig+0x23a>
 80023ca:	e002      	b.n	80023d2 <HAL_RCC_OscConfig+0x2ea>
 80023cc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023d2:	1d3b      	adds	r3, r7, #4
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 8170 	beq.w	80026c2 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80023e2:	4bd0      	ldr	r3, [pc, #832]	; (8002724 <HAL_RCC_OscConfig+0x63c>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f003 030c 	and.w	r3, r3, #12
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00c      	beq.n	8002408 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80023ee:	4bcd      	ldr	r3, [pc, #820]	; (8002724 <HAL_RCC_OscConfig+0x63c>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f003 030c 	and.w	r3, r3, #12
 80023f6:	2b08      	cmp	r3, #8
 80023f8:	d16d      	bne.n	80024d6 <HAL_RCC_OscConfig+0x3ee>
 80023fa:	4bca      	ldr	r3, [pc, #808]	; (8002724 <HAL_RCC_OscConfig+0x63c>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002406:	d166      	bne.n	80024d6 <HAL_RCC_OscConfig+0x3ee>
 8002408:	2302      	movs	r3, #2
 800240a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002412:	fa93 f3a3 	rbit	r3, r3
 8002416:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800241a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800241e:	fab3 f383 	clz	r3, r3
 8002422:	b2db      	uxtb	r3, r3
 8002424:	095b      	lsrs	r3, r3, #5
 8002426:	b2db      	uxtb	r3, r3
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b01      	cmp	r3, #1
 8002430:	d102      	bne.n	8002438 <HAL_RCC_OscConfig+0x350>
 8002432:	4bbc      	ldr	r3, [pc, #752]	; (8002724 <HAL_RCC_OscConfig+0x63c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	e013      	b.n	8002460 <HAL_RCC_OscConfig+0x378>
 8002438:	2302      	movs	r3, #2
 800243a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002442:	fa93 f3a3 	rbit	r3, r3
 8002446:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800244a:	2302      	movs	r3, #2
 800244c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002450:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002454:	fa93 f3a3 	rbit	r3, r3
 8002458:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800245c:	4bb1      	ldr	r3, [pc, #708]	; (8002724 <HAL_RCC_OscConfig+0x63c>)
 800245e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002460:	2202      	movs	r2, #2
 8002462:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002466:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800246a:	fa92 f2a2 	rbit	r2, r2
 800246e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002472:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002476:	fab2 f282 	clz	r2, r2
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	f042 0220 	orr.w	r2, r2, #32
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	f002 021f 	and.w	r2, r2, #31
 8002486:	2101      	movs	r1, #1
 8002488:	fa01 f202 	lsl.w	r2, r1, r2
 800248c:	4013      	ands	r3, r2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d007      	beq.n	80024a2 <HAL_RCC_OscConfig+0x3ba>
 8002492:	1d3b      	adds	r3, r7, #4
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d002      	beq.n	80024a2 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	f000 bd31 	b.w	8002f04 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a2:	4ba0      	ldr	r3, [pc, #640]	; (8002724 <HAL_RCC_OscConfig+0x63c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024aa:	1d3b      	adds	r3, r7, #4
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	21f8      	movs	r1, #248	; 0xf8
 80024b2:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b6:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80024ba:	fa91 f1a1 	rbit	r1, r1
 80024be:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80024c2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80024c6:	fab1 f181 	clz	r1, r1
 80024ca:	b2c9      	uxtb	r1, r1
 80024cc:	408b      	lsls	r3, r1
 80024ce:	4995      	ldr	r1, [pc, #596]	; (8002724 <HAL_RCC_OscConfig+0x63c>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024d4:	e0f5      	b.n	80026c2 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024d6:	1d3b      	adds	r3, r7, #4
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 8085 	beq.w	80025ec <HAL_RCC_OscConfig+0x504>
 80024e2:	2301      	movs	r3, #1
 80024e4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80024ec:	fa93 f3a3 	rbit	r3, r3
 80024f0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80024f4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024f8:	fab3 f383 	clz	r3, r3
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002502:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	461a      	mov	r2, r3
 800250a:	2301      	movs	r3, #1
 800250c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250e:	f7fe fa23 	bl	8000958 <HAL_GetTick>
 8002512:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002516:	e00a      	b.n	800252e <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002518:	f7fe fa1e 	bl	8000958 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d902      	bls.n	800252e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	f000 bceb 	b.w	8002f04 <HAL_RCC_OscConfig+0xe1c>
 800252e:	2302      	movs	r3, #2
 8002530:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002534:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002538:	fa93 f3a3 	rbit	r3, r3
 800253c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002540:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002544:	fab3 f383 	clz	r3, r3
 8002548:	b2db      	uxtb	r3, r3
 800254a:	095b      	lsrs	r3, r3, #5
 800254c:	b2db      	uxtb	r3, r3
 800254e:	f043 0301 	orr.w	r3, r3, #1
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b01      	cmp	r3, #1
 8002556:	d102      	bne.n	800255e <HAL_RCC_OscConfig+0x476>
 8002558:	4b72      	ldr	r3, [pc, #456]	; (8002724 <HAL_RCC_OscConfig+0x63c>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	e013      	b.n	8002586 <HAL_RCC_OscConfig+0x49e>
 800255e:	2302      	movs	r3, #2
 8002560:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002564:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002568:	fa93 f3a3 	rbit	r3, r3
 800256c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002570:	2302      	movs	r3, #2
 8002572:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002576:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800257a:	fa93 f3a3 	rbit	r3, r3
 800257e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002582:	4b68      	ldr	r3, [pc, #416]	; (8002724 <HAL_RCC_OscConfig+0x63c>)
 8002584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002586:	2202      	movs	r2, #2
 8002588:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800258c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002590:	fa92 f2a2 	rbit	r2, r2
 8002594:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002598:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800259c:	fab2 f282 	clz	r2, r2
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	f042 0220 	orr.w	r2, r2, #32
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	f002 021f 	and.w	r2, r2, #31
 80025ac:	2101      	movs	r1, #1
 80025ae:	fa01 f202 	lsl.w	r2, r1, r2
 80025b2:	4013      	ands	r3, r2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0af      	beq.n	8002518 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b8:	4b5a      	ldr	r3, [pc, #360]	; (8002724 <HAL_RCC_OscConfig+0x63c>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025c0:	1d3b      	adds	r3, r7, #4
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	21f8      	movs	r1, #248	; 0xf8
 80025c8:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025cc:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80025d0:	fa91 f1a1 	rbit	r1, r1
 80025d4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80025d8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80025dc:	fab1 f181 	clz	r1, r1
 80025e0:	b2c9      	uxtb	r1, r1
 80025e2:	408b      	lsls	r3, r1
 80025e4:	494f      	ldr	r1, [pc, #316]	; (8002724 <HAL_RCC_OscConfig+0x63c>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	600b      	str	r3, [r1, #0]
 80025ea:	e06a      	b.n	80026c2 <HAL_RCC_OscConfig+0x5da>
 80025ec:	2301      	movs	r3, #1
 80025ee:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80025f6:	fa93 f3a3 	rbit	r3, r3
 80025fa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80025fe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002602:	fab3 f383 	clz	r3, r3
 8002606:	b2db      	uxtb	r3, r3
 8002608:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800260c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	461a      	mov	r2, r3
 8002614:	2300      	movs	r3, #0
 8002616:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002618:	f7fe f99e 	bl	8000958 <HAL_GetTick>
 800261c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002620:	e00a      	b.n	8002638 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002622:	f7fe f999 	bl	8000958 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d902      	bls.n	8002638 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	f000 bc66 	b.w	8002f04 <HAL_RCC_OscConfig+0xe1c>
 8002638:	2302      	movs	r3, #2
 800263a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002642:	fa93 f3a3 	rbit	r3, r3
 8002646:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800264a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800264e:	fab3 f383 	clz	r3, r3
 8002652:	b2db      	uxtb	r3, r3
 8002654:	095b      	lsrs	r3, r3, #5
 8002656:	b2db      	uxtb	r3, r3
 8002658:	f043 0301 	orr.w	r3, r3, #1
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b01      	cmp	r3, #1
 8002660:	d102      	bne.n	8002668 <HAL_RCC_OscConfig+0x580>
 8002662:	4b30      	ldr	r3, [pc, #192]	; (8002724 <HAL_RCC_OscConfig+0x63c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	e013      	b.n	8002690 <HAL_RCC_OscConfig+0x5a8>
 8002668:	2302      	movs	r3, #2
 800266a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002672:	fa93 f3a3 	rbit	r3, r3
 8002676:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800267a:	2302      	movs	r3, #2
 800267c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002680:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002684:	fa93 f3a3 	rbit	r3, r3
 8002688:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800268c:	4b25      	ldr	r3, [pc, #148]	; (8002724 <HAL_RCC_OscConfig+0x63c>)
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002690:	2202      	movs	r2, #2
 8002692:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002696:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800269a:	fa92 f2a2 	rbit	r2, r2
 800269e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80026a2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80026a6:	fab2 f282 	clz	r2, r2
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	f042 0220 	orr.w	r2, r2, #32
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	f002 021f 	and.w	r2, r2, #31
 80026b6:	2101      	movs	r1, #1
 80026b8:	fa01 f202 	lsl.w	r2, r1, r2
 80026bc:	4013      	ands	r3, r2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1af      	bne.n	8002622 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026c2:	1d3b      	adds	r3, r7, #4
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0308 	and.w	r3, r3, #8
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 80da 	beq.w	8002886 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026d2:	1d3b      	adds	r3, r7, #4
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d069      	beq.n	80027b0 <HAL_RCC_OscConfig+0x6c8>
 80026dc:	2301      	movs	r3, #1
 80026de:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026e6:	fa93 f3a3 	rbit	r3, r3
 80026ea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80026ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026f2:	fab3 f383 	clz	r3, r3
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	461a      	mov	r2, r3
 80026fa:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <HAL_RCC_OscConfig+0x640>)
 80026fc:	4413      	add	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	461a      	mov	r2, r3
 8002702:	2301      	movs	r3, #1
 8002704:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002706:	f7fe f927 	bl	8000958 <HAL_GetTick>
 800270a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800270e:	e00d      	b.n	800272c <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002710:	f7fe f922 	bl	8000958 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d905      	bls.n	800272c <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e3ef      	b.n	8002f04 <HAL_RCC_OscConfig+0xe1c>
 8002724:	40021000 	.word	0x40021000
 8002728:	10908120 	.word	0x10908120
 800272c:	2302      	movs	r3, #2
 800272e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002732:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002736:	fa93 f2a3 	rbit	r2, r3
 800273a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002744:	2202      	movs	r2, #2
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	fa93 f2a3 	rbit	r2, r3
 8002752:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800275c:	2202      	movs	r2, #2
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	fa93 f2a3 	rbit	r2, r3
 800276a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800276e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002770:	4ba4      	ldr	r3, [pc, #656]	; (8002a04 <HAL_RCC_OscConfig+0x91c>)
 8002772:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002774:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002778:	2102      	movs	r1, #2
 800277a:	6019      	str	r1, [r3, #0]
 800277c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	fa93 f1a3 	rbit	r1, r3
 8002786:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800278a:	6019      	str	r1, [r3, #0]
  return result;
 800278c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	fab3 f383 	clz	r3, r3
 8002796:	b2db      	uxtb	r3, r3
 8002798:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800279c:	b2db      	uxtb	r3, r3
 800279e:	f003 031f 	and.w	r3, r3, #31
 80027a2:	2101      	movs	r1, #1
 80027a4:	fa01 f303 	lsl.w	r3, r1, r3
 80027a8:	4013      	ands	r3, r2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0b0      	beq.n	8002710 <HAL_RCC_OscConfig+0x628>
 80027ae:	e06a      	b.n	8002886 <HAL_RCC_OscConfig+0x79e>
 80027b0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80027b4:	2201      	movs	r2, #1
 80027b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	fa93 f2a3 	rbit	r2, r3
 80027c2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80027c6:	601a      	str	r2, [r3, #0]
  return result;
 80027c8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80027cc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027ce:	fab3 f383 	clz	r3, r3
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	461a      	mov	r2, r3
 80027d6:	4b8c      	ldr	r3, [pc, #560]	; (8002a08 <HAL_RCC_OscConfig+0x920>)
 80027d8:	4413      	add	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	461a      	mov	r2, r3
 80027de:	2300      	movs	r3, #0
 80027e0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e2:	f7fe f8b9 	bl	8000958 <HAL_GetTick>
 80027e6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027ea:	e009      	b.n	8002800 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ec:	f7fe f8b4 	bl	8000958 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e381      	b.n	8002f04 <HAL_RCC_OscConfig+0xe1c>
 8002800:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002804:	2202      	movs	r2, #2
 8002806:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002808:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	fa93 f2a3 	rbit	r2, r3
 8002812:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800281c:	2202      	movs	r2, #2
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	fa93 f2a3 	rbit	r2, r3
 800282a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002834:	2202      	movs	r2, #2
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	fa93 f2a3 	rbit	r2, r3
 8002842:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002846:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002848:	4b6e      	ldr	r3, [pc, #440]	; (8002a04 <HAL_RCC_OscConfig+0x91c>)
 800284a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800284c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002850:	2102      	movs	r1, #2
 8002852:	6019      	str	r1, [r3, #0]
 8002854:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	fa93 f1a3 	rbit	r1, r3
 800285e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002862:	6019      	str	r1, [r3, #0]
  return result;
 8002864:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	fab3 f383 	clz	r3, r3
 800286e:	b2db      	uxtb	r3, r3
 8002870:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002874:	b2db      	uxtb	r3, r3
 8002876:	f003 031f 	and.w	r3, r3, #31
 800287a:	2101      	movs	r1, #1
 800287c:	fa01 f303 	lsl.w	r3, r1, r3
 8002880:	4013      	ands	r3, r2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1b2      	bne.n	80027ec <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002886:	1d3b      	adds	r3, r7, #4
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0304 	and.w	r3, r3, #4
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 8157 	beq.w	8002b44 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002896:	2300      	movs	r3, #0
 8002898:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800289c:	4b59      	ldr	r3, [pc, #356]	; (8002a04 <HAL_RCC_OscConfig+0x91c>)
 800289e:	69db      	ldr	r3, [r3, #28]
 80028a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d112      	bne.n	80028ce <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028a8:	4b56      	ldr	r3, [pc, #344]	; (8002a04 <HAL_RCC_OscConfig+0x91c>)
 80028aa:	69db      	ldr	r3, [r3, #28]
 80028ac:	4a55      	ldr	r2, [pc, #340]	; (8002a04 <HAL_RCC_OscConfig+0x91c>)
 80028ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028b2:	61d3      	str	r3, [r2, #28]
 80028b4:	4b53      	ldr	r3, [pc, #332]	; (8002a04 <HAL_RCC_OscConfig+0x91c>)
 80028b6:	69db      	ldr	r3, [r3, #28]
 80028b8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80028bc:	f107 030c 	add.w	r3, r7, #12
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	f107 030c 	add.w	r3, r7, #12
 80028c6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80028c8:	2301      	movs	r3, #1
 80028ca:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ce:	4b4f      	ldr	r3, [pc, #316]	; (8002a0c <HAL_RCC_OscConfig+0x924>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d11a      	bne.n	8002910 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028da:	4b4c      	ldr	r3, [pc, #304]	; (8002a0c <HAL_RCC_OscConfig+0x924>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a4b      	ldr	r2, [pc, #300]	; (8002a0c <HAL_RCC_OscConfig+0x924>)
 80028e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028e6:	f7fe f837 	bl	8000958 <HAL_GetTick>
 80028ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ee:	e009      	b.n	8002904 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f0:	f7fe f832 	bl	8000958 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b64      	cmp	r3, #100	; 0x64
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e2ff      	b.n	8002f04 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002904:	4b41      	ldr	r3, [pc, #260]	; (8002a0c <HAL_RCC_OscConfig+0x924>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290c:	2b00      	cmp	r3, #0
 800290e:	d0ef      	beq.n	80028f0 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002910:	1d3b      	adds	r3, r7, #4
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d106      	bne.n	8002928 <HAL_RCC_OscConfig+0x840>
 800291a:	4b3a      	ldr	r3, [pc, #232]	; (8002a04 <HAL_RCC_OscConfig+0x91c>)
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	4a39      	ldr	r2, [pc, #228]	; (8002a04 <HAL_RCC_OscConfig+0x91c>)
 8002920:	f043 0301 	orr.w	r3, r3, #1
 8002924:	6213      	str	r3, [r2, #32]
 8002926:	e02f      	b.n	8002988 <HAL_RCC_OscConfig+0x8a0>
 8002928:	1d3b      	adds	r3, r7, #4
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10c      	bne.n	800294c <HAL_RCC_OscConfig+0x864>
 8002932:	4b34      	ldr	r3, [pc, #208]	; (8002a04 <HAL_RCC_OscConfig+0x91c>)
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	4a33      	ldr	r2, [pc, #204]	; (8002a04 <HAL_RCC_OscConfig+0x91c>)
 8002938:	f023 0301 	bic.w	r3, r3, #1
 800293c:	6213      	str	r3, [r2, #32]
 800293e:	4b31      	ldr	r3, [pc, #196]	; (8002a04 <HAL_RCC_OscConfig+0x91c>)
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	4a30      	ldr	r2, [pc, #192]	; (8002a04 <HAL_RCC_OscConfig+0x91c>)
 8002944:	f023 0304 	bic.w	r3, r3, #4
 8002948:	6213      	str	r3, [r2, #32]
 800294a:	e01d      	b.n	8002988 <HAL_RCC_OscConfig+0x8a0>
 800294c:	1d3b      	adds	r3, r7, #4
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	2b05      	cmp	r3, #5
 8002954:	d10c      	bne.n	8002970 <HAL_RCC_OscConfig+0x888>
 8002956:	4b2b      	ldr	r3, [pc, #172]	; (8002a04 <HAL_RCC_OscConfig+0x91c>)
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	4a2a      	ldr	r2, [pc, #168]	; (8002a04 <HAL_RCC_OscConfig+0x91c>)
 800295c:	f043 0304 	orr.w	r3, r3, #4
 8002960:	6213      	str	r3, [r2, #32]
 8002962:	4b28      	ldr	r3, [pc, #160]	; (8002a04 <HAL_RCC_OscConfig+0x91c>)
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	4a27      	ldr	r2, [pc, #156]	; (8002a04 <HAL_RCC_OscConfig+0x91c>)
 8002968:	f043 0301 	orr.w	r3, r3, #1
 800296c:	6213      	str	r3, [r2, #32]
 800296e:	e00b      	b.n	8002988 <HAL_RCC_OscConfig+0x8a0>
 8002970:	4b24      	ldr	r3, [pc, #144]	; (8002a04 <HAL_RCC_OscConfig+0x91c>)
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	4a23      	ldr	r2, [pc, #140]	; (8002a04 <HAL_RCC_OscConfig+0x91c>)
 8002976:	f023 0301 	bic.w	r3, r3, #1
 800297a:	6213      	str	r3, [r2, #32]
 800297c:	4b21      	ldr	r3, [pc, #132]	; (8002a04 <HAL_RCC_OscConfig+0x91c>)
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	4a20      	ldr	r2, [pc, #128]	; (8002a04 <HAL_RCC_OscConfig+0x91c>)
 8002982:	f023 0304 	bic.w	r3, r3, #4
 8002986:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002988:	1d3b      	adds	r3, r7, #4
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d06a      	beq.n	8002a68 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002992:	f7fd ffe1 	bl	8000958 <HAL_GetTick>
 8002996:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800299a:	e00b      	b.n	80029b4 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800299c:	f7fd ffdc 	bl	8000958 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e2a7      	b.n	8002f04 <HAL_RCC_OscConfig+0xe1c>
 80029b4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80029b8:	2202      	movs	r2, #2
 80029ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029bc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	fa93 f2a3 	rbit	r2, r3
 80029c6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80029d0:	2202      	movs	r2, #2
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	fa93 f2a3 	rbit	r2, r3
 80029de:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80029e2:	601a      	str	r2, [r3, #0]
  return result;
 80029e4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80029e8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ea:	fab3 f383 	clz	r3, r3
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	095b      	lsrs	r3, r3, #5
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	f043 0302 	orr.w	r3, r3, #2
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d108      	bne.n	8002a10 <HAL_RCC_OscConfig+0x928>
 80029fe:	4b01      	ldr	r3, [pc, #4]	; (8002a04 <HAL_RCC_OscConfig+0x91c>)
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	e013      	b.n	8002a2c <HAL_RCC_OscConfig+0x944>
 8002a04:	40021000 	.word	0x40021000
 8002a08:	10908120 	.word	0x10908120
 8002a0c:	40007000 	.word	0x40007000
 8002a10:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002a14:	2202      	movs	r2, #2
 8002a16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a18:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	fa93 f2a3 	rbit	r2, r3
 8002a22:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	4bc0      	ldr	r3, [pc, #768]	; (8002d2c <HAL_RCC_OscConfig+0xc44>)
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002a30:	2102      	movs	r1, #2
 8002a32:	6011      	str	r1, [r2, #0]
 8002a34:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002a38:	6812      	ldr	r2, [r2, #0]
 8002a3a:	fa92 f1a2 	rbit	r1, r2
 8002a3e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002a42:	6011      	str	r1, [r2, #0]
  return result;
 8002a44:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002a48:	6812      	ldr	r2, [r2, #0]
 8002a4a:	fab2 f282 	clz	r2, r2
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a54:	b2d2      	uxtb	r2, r2
 8002a56:	f002 021f 	and.w	r2, r2, #31
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a60:	4013      	ands	r3, r2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d09a      	beq.n	800299c <HAL_RCC_OscConfig+0x8b4>
 8002a66:	e063      	b.n	8002b30 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a68:	f7fd ff76 	bl	8000958 <HAL_GetTick>
 8002a6c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a70:	e00b      	b.n	8002a8a <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a72:	f7fd ff71 	bl	8000958 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e23c      	b.n	8002f04 <HAL_RCC_OscConfig+0xe1c>
 8002a8a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002a8e:	2202      	movs	r2, #2
 8002a90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a92:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	fa93 f2a3 	rbit	r2, r3
 8002a9c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	fa93 f2a3 	rbit	r2, r3
 8002ab4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002ab8:	601a      	str	r2, [r3, #0]
  return result;
 8002aba:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002abe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ac0:	fab3 f383 	clz	r3, r3
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	095b      	lsrs	r3, r3, #5
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	f043 0302 	orr.w	r3, r3, #2
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d102      	bne.n	8002ada <HAL_RCC_OscConfig+0x9f2>
 8002ad4:	4b95      	ldr	r3, [pc, #596]	; (8002d2c <HAL_RCC_OscConfig+0xc44>)
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	e00d      	b.n	8002af6 <HAL_RCC_OscConfig+0xa0e>
 8002ada:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002ade:	2202      	movs	r2, #2
 8002ae0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	fa93 f2a3 	rbit	r2, r3
 8002aec:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	4b8e      	ldr	r3, [pc, #568]	; (8002d2c <HAL_RCC_OscConfig+0xc44>)
 8002af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002afa:	2102      	movs	r1, #2
 8002afc:	6011      	str	r1, [r2, #0]
 8002afe:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002b02:	6812      	ldr	r2, [r2, #0]
 8002b04:	fa92 f1a2 	rbit	r1, r2
 8002b08:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002b0c:	6011      	str	r1, [r2, #0]
  return result;
 8002b0e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002b12:	6812      	ldr	r2, [r2, #0]
 8002b14:	fab2 f282 	clz	r2, r2
 8002b18:	b2d2      	uxtb	r2, r2
 8002b1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b1e:	b2d2      	uxtb	r2, r2
 8002b20:	f002 021f 	and.w	r2, r2, #31
 8002b24:	2101      	movs	r1, #1
 8002b26:	fa01 f202 	lsl.w	r2, r1, r2
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1a0      	bne.n	8002a72 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b30:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d105      	bne.n	8002b44 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b38:	4b7c      	ldr	r3, [pc, #496]	; (8002d2c <HAL_RCC_OscConfig+0xc44>)
 8002b3a:	69db      	ldr	r3, [r3, #28]
 8002b3c:	4a7b      	ldr	r2, [pc, #492]	; (8002d2c <HAL_RCC_OscConfig+0xc44>)
 8002b3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b42:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b44:	1d3b      	adds	r3, r7, #4
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 81d9 	beq.w	8002f02 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b50:	4b76      	ldr	r3, [pc, #472]	; (8002d2c <HAL_RCC_OscConfig+0xc44>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f003 030c 	and.w	r3, r3, #12
 8002b58:	2b08      	cmp	r3, #8
 8002b5a:	f000 81a6 	beq.w	8002eaa <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b5e:	1d3b      	adds	r3, r7, #4
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	f040 811e 	bne.w	8002da6 <HAL_RCC_OscConfig+0xcbe>
 8002b6a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002b6e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b74:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	fa93 f2a3 	rbit	r2, r3
 8002b7e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002b82:	601a      	str	r2, [r3, #0]
  return result;
 8002b84:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002b88:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b8a:	fab3 f383 	clz	r3, r3
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b94:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba0:	f7fd feda 	bl	8000958 <HAL_GetTick>
 8002ba4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ba8:	e009      	b.n	8002bbe <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002baa:	f7fd fed5 	bl	8000958 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e1a2      	b.n	8002f04 <HAL_RCC_OscConfig+0xe1c>
 8002bbe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002bc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	fa93 f2a3 	rbit	r2, r3
 8002bd2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002bd6:	601a      	str	r2, [r3, #0]
  return result;
 8002bd8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002bdc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bde:	fab3 f383 	clz	r3, r3
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	095b      	lsrs	r3, r3, #5
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	f043 0301 	orr.w	r3, r3, #1
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d102      	bne.n	8002bf8 <HAL_RCC_OscConfig+0xb10>
 8002bf2:	4b4e      	ldr	r3, [pc, #312]	; (8002d2c <HAL_RCC_OscConfig+0xc44>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	e01b      	b.n	8002c30 <HAL_RCC_OscConfig+0xb48>
 8002bf8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002bfc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c02:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	fa93 f2a3 	rbit	r2, r3
 8002c0c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002c16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	fa93 f2a3 	rbit	r2, r3
 8002c26:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	4b3f      	ldr	r3, [pc, #252]	; (8002d2c <HAL_RCC_OscConfig+0xc44>)
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002c34:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c38:	6011      	str	r1, [r2, #0]
 8002c3a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002c3e:	6812      	ldr	r2, [r2, #0]
 8002c40:	fa92 f1a2 	rbit	r1, r2
 8002c44:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002c48:	6011      	str	r1, [r2, #0]
  return result;
 8002c4a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002c4e:	6812      	ldr	r2, [r2, #0]
 8002c50:	fab2 f282 	clz	r2, r2
 8002c54:	b2d2      	uxtb	r2, r2
 8002c56:	f042 0220 	orr.w	r2, r2, #32
 8002c5a:	b2d2      	uxtb	r2, r2
 8002c5c:	f002 021f 	and.w	r2, r2, #31
 8002c60:	2101      	movs	r1, #1
 8002c62:	fa01 f202 	lsl.w	r2, r1, r2
 8002c66:	4013      	ands	r3, r2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d19e      	bne.n	8002baa <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c6c:	4b2f      	ldr	r3, [pc, #188]	; (8002d2c <HAL_RCC_OscConfig+0xc44>)
 8002c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c70:	f023 020f 	bic.w	r2, r3, #15
 8002c74:	1d3b      	adds	r3, r7, #4
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	492c      	ldr	r1, [pc, #176]	; (8002d2c <HAL_RCC_OscConfig+0xc44>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002c80:	4b2a      	ldr	r3, [pc, #168]	; (8002d2c <HAL_RCC_OscConfig+0xc44>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002c88:	1d3b      	adds	r3, r7, #4
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6a19      	ldr	r1, [r3, #32]
 8002c8e:	1d3b      	adds	r3, r7, #4
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	430b      	orrs	r3, r1
 8002c96:	4925      	ldr	r1, [pc, #148]	; (8002d2c <HAL_RCC_OscConfig+0xc44>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	604b      	str	r3, [r1, #4]
 8002c9c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002ca0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ca4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	fa93 f2a3 	rbit	r2, r3
 8002cb0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002cb4:	601a      	str	r2, [r3, #0]
  return result;
 8002cb6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002cba:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cbc:	fab3 f383 	clz	r3, r3
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cc6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	461a      	mov	r2, r3
 8002cce:	2301      	movs	r3, #1
 8002cd0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd2:	f7fd fe41 	bl	8000958 <HAL_GetTick>
 8002cd6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cda:	e009      	b.n	8002cf0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cdc:	f7fd fe3c 	bl	8000958 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e109      	b.n	8002f04 <HAL_RCC_OscConfig+0xe1c>
 8002cf0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002cf4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cf8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	fa93 f2a3 	rbit	r2, r3
 8002d04:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002d08:	601a      	str	r2, [r3, #0]
  return result;
 8002d0a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002d0e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d10:	fab3 f383 	clz	r3, r3
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	095b      	lsrs	r3, r3, #5
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	f043 0301 	orr.w	r3, r3, #1
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d105      	bne.n	8002d30 <HAL_RCC_OscConfig+0xc48>
 8002d24:	4b01      	ldr	r3, [pc, #4]	; (8002d2c <HAL_RCC_OscConfig+0xc44>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	e01e      	b.n	8002d68 <HAL_RCC_OscConfig+0xc80>
 8002d2a:	bf00      	nop
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	fa93 f2a3 	rbit	r2, r3
 8002d44:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002d4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	fa93 f2a3 	rbit	r2, r3
 8002d5e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	4b6a      	ldr	r3, [pc, #424]	; (8002f10 <HAL_RCC_OscConfig+0xe28>)
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002d6c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d70:	6011      	str	r1, [r2, #0]
 8002d72:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002d76:	6812      	ldr	r2, [r2, #0]
 8002d78:	fa92 f1a2 	rbit	r1, r2
 8002d7c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002d80:	6011      	str	r1, [r2, #0]
  return result;
 8002d82:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002d86:	6812      	ldr	r2, [r2, #0]
 8002d88:	fab2 f282 	clz	r2, r2
 8002d8c:	b2d2      	uxtb	r2, r2
 8002d8e:	f042 0220 	orr.w	r2, r2, #32
 8002d92:	b2d2      	uxtb	r2, r2
 8002d94:	f002 021f 	and.w	r2, r2, #31
 8002d98:	2101      	movs	r1, #1
 8002d9a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d9e:	4013      	ands	r3, r2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d09b      	beq.n	8002cdc <HAL_RCC_OscConfig+0xbf4>
 8002da4:	e0ad      	b.n	8002f02 <HAL_RCC_OscConfig+0xe1a>
 8002da6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002daa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002dae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	fa93 f2a3 	rbit	r2, r3
 8002dba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002dbe:	601a      	str	r2, [r3, #0]
  return result;
 8002dc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002dc4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc6:	fab3 f383 	clz	r3, r3
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002dd0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	2300      	movs	r3, #0
 8002dda:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ddc:	f7fd fdbc 	bl	8000958 <HAL_GetTick>
 8002de0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002de4:	e009      	b.n	8002dfa <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002de6:	f7fd fdb7 	bl	8000958 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e084      	b.n	8002f04 <HAL_RCC_OscConfig+0xe1c>
 8002dfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dfe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	fa93 f2a3 	rbit	r2, r3
 8002e0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e12:	601a      	str	r2, [r3, #0]
  return result;
 8002e14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e18:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e1a:	fab3 f383 	clz	r3, r3
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	095b      	lsrs	r3, r3, #5
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	f043 0301 	orr.w	r3, r3, #1
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d102      	bne.n	8002e34 <HAL_RCC_OscConfig+0xd4c>
 8002e2e:	4b38      	ldr	r3, [pc, #224]	; (8002f10 <HAL_RCC_OscConfig+0xe28>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	e01b      	b.n	8002e6c <HAL_RCC_OscConfig+0xd84>
 8002e34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	fa93 f2a3 	rbit	r2, r3
 8002e48:	f107 0320 	add.w	r3, r7, #32
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	f107 031c 	add.w	r3, r7, #28
 8002e52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	f107 031c 	add.w	r3, r7, #28
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	fa93 f2a3 	rbit	r2, r3
 8002e62:	f107 0318 	add.w	r3, r7, #24
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	4b29      	ldr	r3, [pc, #164]	; (8002f10 <HAL_RCC_OscConfig+0xe28>)
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	f107 0214 	add.w	r2, r7, #20
 8002e70:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e74:	6011      	str	r1, [r2, #0]
 8002e76:	f107 0214 	add.w	r2, r7, #20
 8002e7a:	6812      	ldr	r2, [r2, #0]
 8002e7c:	fa92 f1a2 	rbit	r1, r2
 8002e80:	f107 0210 	add.w	r2, r7, #16
 8002e84:	6011      	str	r1, [r2, #0]
  return result;
 8002e86:	f107 0210 	add.w	r2, r7, #16
 8002e8a:	6812      	ldr	r2, [r2, #0]
 8002e8c:	fab2 f282 	clz	r2, r2
 8002e90:	b2d2      	uxtb	r2, r2
 8002e92:	f042 0220 	orr.w	r2, r2, #32
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	f002 021f 	and.w	r2, r2, #31
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d19e      	bne.n	8002de6 <HAL_RCC_OscConfig+0xcfe>
 8002ea8:	e02b      	b.n	8002f02 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eaa:	1d3b      	adds	r3, r7, #4
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d101      	bne.n	8002eb8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e025      	b.n	8002f04 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002eb8:	4b15      	ldr	r3, [pc, #84]	; (8002f10 <HAL_RCC_OscConfig+0xe28>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002ec0:	4b13      	ldr	r3, [pc, #76]	; (8002f10 <HAL_RCC_OscConfig+0xe28>)
 8002ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ec8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002ecc:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002ed0:	1d3b      	adds	r3, r7, #4
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d111      	bne.n	8002efe <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002eda:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002ede:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ee2:	1d3b      	adds	r3, r7, #4
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d108      	bne.n	8002efe <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002eec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ef0:	f003 020f 	and.w	r2, r3, #15
 8002ef4:	1d3b      	adds	r3, r7, #4
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d001      	beq.n	8002f02 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e000      	b.n	8002f04 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	40021000 	.word	0x40021000

08002f14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b09e      	sub	sp, #120	; 0x78
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e162      	b.n	80031f2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f2c:	4b90      	ldr	r3, [pc, #576]	; (8003170 <HAL_RCC_ClockConfig+0x25c>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d910      	bls.n	8002f5c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f3a:	4b8d      	ldr	r3, [pc, #564]	; (8003170 <HAL_RCC_ClockConfig+0x25c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f023 0207 	bic.w	r2, r3, #7
 8002f42:	498b      	ldr	r1, [pc, #556]	; (8003170 <HAL_RCC_ClockConfig+0x25c>)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f4a:	4b89      	ldr	r3, [pc, #548]	; (8003170 <HAL_RCC_ClockConfig+0x25c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	683a      	ldr	r2, [r7, #0]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d001      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e14a      	b.n	80031f2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d008      	beq.n	8002f7a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f68:	4b82      	ldr	r3, [pc, #520]	; (8003174 <HAL_RCC_ClockConfig+0x260>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	497f      	ldr	r1, [pc, #508]	; (8003174 <HAL_RCC_ClockConfig+0x260>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f000 80dc 	beq.w	8003140 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d13c      	bne.n	800300a <HAL_RCC_ClockConfig+0xf6>
 8002f90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f94:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f98:	fa93 f3a3 	rbit	r3, r3
 8002f9c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa0:	fab3 f383 	clz	r3, r3
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	095b      	lsrs	r3, r3, #5
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	f043 0301 	orr.w	r3, r3, #1
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d102      	bne.n	8002fba <HAL_RCC_ClockConfig+0xa6>
 8002fb4:	4b6f      	ldr	r3, [pc, #444]	; (8003174 <HAL_RCC_ClockConfig+0x260>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	e00f      	b.n	8002fda <HAL_RCC_ClockConfig+0xc6>
 8002fba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fbe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fc2:	fa93 f3a3 	rbit	r3, r3
 8002fc6:	667b      	str	r3, [r7, #100]	; 0x64
 8002fc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fcc:	663b      	str	r3, [r7, #96]	; 0x60
 8002fce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fd0:	fa93 f3a3 	rbit	r3, r3
 8002fd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fd6:	4b67      	ldr	r3, [pc, #412]	; (8003174 <HAL_RCC_ClockConfig+0x260>)
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002fde:	65ba      	str	r2, [r7, #88]	; 0x58
 8002fe0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fe2:	fa92 f2a2 	rbit	r2, r2
 8002fe6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002fe8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002fea:	fab2 f282 	clz	r2, r2
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	f042 0220 	orr.w	r2, r2, #32
 8002ff4:	b2d2      	uxtb	r2, r2
 8002ff6:	f002 021f 	and.w	r2, r2, #31
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	fa01 f202 	lsl.w	r2, r1, r2
 8003000:	4013      	ands	r3, r2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d17b      	bne.n	80030fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e0f3      	b.n	80031f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b02      	cmp	r3, #2
 8003010:	d13c      	bne.n	800308c <HAL_RCC_ClockConfig+0x178>
 8003012:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003016:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800301a:	fa93 f3a3 	rbit	r3, r3
 800301e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003022:	fab3 f383 	clz	r3, r3
 8003026:	b2db      	uxtb	r3, r3
 8003028:	095b      	lsrs	r3, r3, #5
 800302a:	b2db      	uxtb	r3, r3
 800302c:	f043 0301 	orr.w	r3, r3, #1
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b01      	cmp	r3, #1
 8003034:	d102      	bne.n	800303c <HAL_RCC_ClockConfig+0x128>
 8003036:	4b4f      	ldr	r3, [pc, #316]	; (8003174 <HAL_RCC_ClockConfig+0x260>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	e00f      	b.n	800305c <HAL_RCC_ClockConfig+0x148>
 800303c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003040:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003042:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003044:	fa93 f3a3 	rbit	r3, r3
 8003048:	647b      	str	r3, [r7, #68]	; 0x44
 800304a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800304e:	643b      	str	r3, [r7, #64]	; 0x40
 8003050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003052:	fa93 f3a3 	rbit	r3, r3
 8003056:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003058:	4b46      	ldr	r3, [pc, #280]	; (8003174 <HAL_RCC_ClockConfig+0x260>)
 800305a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003060:	63ba      	str	r2, [r7, #56]	; 0x38
 8003062:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003064:	fa92 f2a2 	rbit	r2, r2
 8003068:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800306a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800306c:	fab2 f282 	clz	r2, r2
 8003070:	b2d2      	uxtb	r2, r2
 8003072:	f042 0220 	orr.w	r2, r2, #32
 8003076:	b2d2      	uxtb	r2, r2
 8003078:	f002 021f 	and.w	r2, r2, #31
 800307c:	2101      	movs	r1, #1
 800307e:	fa01 f202 	lsl.w	r2, r1, r2
 8003082:	4013      	ands	r3, r2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d13a      	bne.n	80030fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e0b2      	b.n	80031f2 <HAL_RCC_ClockConfig+0x2de>
 800308c:	2302      	movs	r3, #2
 800308e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003092:	fa93 f3a3 	rbit	r3, r3
 8003096:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800309a:	fab3 f383 	clz	r3, r3
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	095b      	lsrs	r3, r3, #5
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	f043 0301 	orr.w	r3, r3, #1
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d102      	bne.n	80030b4 <HAL_RCC_ClockConfig+0x1a0>
 80030ae:	4b31      	ldr	r3, [pc, #196]	; (8003174 <HAL_RCC_ClockConfig+0x260>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	e00d      	b.n	80030d0 <HAL_RCC_ClockConfig+0x1bc>
 80030b4:	2302      	movs	r3, #2
 80030b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ba:	fa93 f3a3 	rbit	r3, r3
 80030be:	627b      	str	r3, [r7, #36]	; 0x24
 80030c0:	2302      	movs	r3, #2
 80030c2:	623b      	str	r3, [r7, #32]
 80030c4:	6a3b      	ldr	r3, [r7, #32]
 80030c6:	fa93 f3a3 	rbit	r3, r3
 80030ca:	61fb      	str	r3, [r7, #28]
 80030cc:	4b29      	ldr	r3, [pc, #164]	; (8003174 <HAL_RCC_ClockConfig+0x260>)
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	2202      	movs	r2, #2
 80030d2:	61ba      	str	r2, [r7, #24]
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	fa92 f2a2 	rbit	r2, r2
 80030da:	617a      	str	r2, [r7, #20]
  return result;
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	fab2 f282 	clz	r2, r2
 80030e2:	b2d2      	uxtb	r2, r2
 80030e4:	f042 0220 	orr.w	r2, r2, #32
 80030e8:	b2d2      	uxtb	r2, r2
 80030ea:	f002 021f 	and.w	r2, r2, #31
 80030ee:	2101      	movs	r1, #1
 80030f0:	fa01 f202 	lsl.w	r2, r1, r2
 80030f4:	4013      	ands	r3, r2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e079      	b.n	80031f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030fe:	4b1d      	ldr	r3, [pc, #116]	; (8003174 <HAL_RCC_ClockConfig+0x260>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f023 0203 	bic.w	r2, r3, #3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	491a      	ldr	r1, [pc, #104]	; (8003174 <HAL_RCC_ClockConfig+0x260>)
 800310c:	4313      	orrs	r3, r2
 800310e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003110:	f7fd fc22 	bl	8000958 <HAL_GetTick>
 8003114:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003116:	e00a      	b.n	800312e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003118:	f7fd fc1e 	bl	8000958 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	f241 3288 	movw	r2, #5000	; 0x1388
 8003126:	4293      	cmp	r3, r2
 8003128:	d901      	bls.n	800312e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e061      	b.n	80031f2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800312e:	4b11      	ldr	r3, [pc, #68]	; (8003174 <HAL_RCC_ClockConfig+0x260>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f003 020c 	and.w	r2, r3, #12
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	429a      	cmp	r2, r3
 800313e:	d1eb      	bne.n	8003118 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003140:	4b0b      	ldr	r3, [pc, #44]	; (8003170 <HAL_RCC_ClockConfig+0x25c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0307 	and.w	r3, r3, #7
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	429a      	cmp	r2, r3
 800314c:	d214      	bcs.n	8003178 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800314e:	4b08      	ldr	r3, [pc, #32]	; (8003170 <HAL_RCC_ClockConfig+0x25c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f023 0207 	bic.w	r2, r3, #7
 8003156:	4906      	ldr	r1, [pc, #24]	; (8003170 <HAL_RCC_ClockConfig+0x25c>)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	4313      	orrs	r3, r2
 800315c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800315e:	4b04      	ldr	r3, [pc, #16]	; (8003170 <HAL_RCC_ClockConfig+0x25c>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0307 	and.w	r3, r3, #7
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	429a      	cmp	r2, r3
 800316a:	d005      	beq.n	8003178 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e040      	b.n	80031f2 <HAL_RCC_ClockConfig+0x2de>
 8003170:	40022000 	.word	0x40022000
 8003174:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0304 	and.w	r3, r3, #4
 8003180:	2b00      	cmp	r3, #0
 8003182:	d008      	beq.n	8003196 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003184:	4b1d      	ldr	r3, [pc, #116]	; (80031fc <HAL_RCC_ClockConfig+0x2e8>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	491a      	ldr	r1, [pc, #104]	; (80031fc <HAL_RCC_ClockConfig+0x2e8>)
 8003192:	4313      	orrs	r3, r2
 8003194:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0308 	and.w	r3, r3, #8
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d009      	beq.n	80031b6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031a2:	4b16      	ldr	r3, [pc, #88]	; (80031fc <HAL_RCC_ClockConfig+0x2e8>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	4912      	ldr	r1, [pc, #72]	; (80031fc <HAL_RCC_ClockConfig+0x2e8>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80031b6:	f000 f829 	bl	800320c <HAL_RCC_GetSysClockFreq>
 80031ba:	4601      	mov	r1, r0
 80031bc:	4b0f      	ldr	r3, [pc, #60]	; (80031fc <HAL_RCC_ClockConfig+0x2e8>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031c4:	22f0      	movs	r2, #240	; 0xf0
 80031c6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	fa92 f2a2 	rbit	r2, r2
 80031ce:	60fa      	str	r2, [r7, #12]
  return result;
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	fab2 f282 	clz	r2, r2
 80031d6:	b2d2      	uxtb	r2, r2
 80031d8:	40d3      	lsrs	r3, r2
 80031da:	4a09      	ldr	r2, [pc, #36]	; (8003200 <HAL_RCC_ClockConfig+0x2ec>)
 80031dc:	5cd3      	ldrb	r3, [r2, r3]
 80031de:	fa21 f303 	lsr.w	r3, r1, r3
 80031e2:	4a08      	ldr	r2, [pc, #32]	; (8003204 <HAL_RCC_ClockConfig+0x2f0>)
 80031e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80031e6:	4b08      	ldr	r3, [pc, #32]	; (8003208 <HAL_RCC_ClockConfig+0x2f4>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7fd fb70 	bl	80008d0 <HAL_InitTick>
  
  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3778      	adds	r7, #120	; 0x78
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	40021000 	.word	0x40021000
 8003200:	08004888 	.word	0x08004888
 8003204:	20000000 	.word	0x20000000
 8003208:	20000004 	.word	0x20000004

0800320c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800320c:	b480      	push	{r7}
 800320e:	b08b      	sub	sp, #44	; 0x2c
 8003210:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003212:	2300      	movs	r3, #0
 8003214:	61fb      	str	r3, [r7, #28]
 8003216:	2300      	movs	r3, #0
 8003218:	61bb      	str	r3, [r7, #24]
 800321a:	2300      	movs	r3, #0
 800321c:	627b      	str	r3, [r7, #36]	; 0x24
 800321e:	2300      	movs	r3, #0
 8003220:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003222:	2300      	movs	r3, #0
 8003224:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003226:	4b2a      	ldr	r3, [pc, #168]	; (80032d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	f003 030c 	and.w	r3, r3, #12
 8003232:	2b04      	cmp	r3, #4
 8003234:	d002      	beq.n	800323c <HAL_RCC_GetSysClockFreq+0x30>
 8003236:	2b08      	cmp	r3, #8
 8003238:	d003      	beq.n	8003242 <HAL_RCC_GetSysClockFreq+0x36>
 800323a:	e03f      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800323c:	4b25      	ldr	r3, [pc, #148]	; (80032d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800323e:	623b      	str	r3, [r7, #32]
      break;
 8003240:	e03f      	b.n	80032c2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003248:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800324c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	fa92 f2a2 	rbit	r2, r2
 8003254:	607a      	str	r2, [r7, #4]
  return result;
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	fab2 f282 	clz	r2, r2
 800325c:	b2d2      	uxtb	r2, r2
 800325e:	40d3      	lsrs	r3, r2
 8003260:	4a1d      	ldr	r2, [pc, #116]	; (80032d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003262:	5cd3      	ldrb	r3, [r2, r3]
 8003264:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003266:	4b1a      	ldr	r3, [pc, #104]	; (80032d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326a:	f003 030f 	and.w	r3, r3, #15
 800326e:	220f      	movs	r2, #15
 8003270:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	fa92 f2a2 	rbit	r2, r2
 8003278:	60fa      	str	r2, [r7, #12]
  return result;
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	fab2 f282 	clz	r2, r2
 8003280:	b2d2      	uxtb	r2, r2
 8003282:	40d3      	lsrs	r3, r2
 8003284:	4a15      	ldr	r2, [pc, #84]	; (80032dc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003286:	5cd3      	ldrb	r3, [r2, r3]
 8003288:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d008      	beq.n	80032a6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003294:	4a0f      	ldr	r2, [pc, #60]	; (80032d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	fbb2 f2f3 	udiv	r2, r2, r3
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	fb02 f303 	mul.w	r3, r2, r3
 80032a2:	627b      	str	r3, [r7, #36]	; 0x24
 80032a4:	e007      	b.n	80032b6 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80032a6:	4a0b      	ldr	r2, [pc, #44]	; (80032d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	fb02 f303 	mul.w	r3, r2, r3
 80032b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80032b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b8:	623b      	str	r3, [r7, #32]
      break;
 80032ba:	e002      	b.n	80032c2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032bc:	4b05      	ldr	r3, [pc, #20]	; (80032d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80032be:	623b      	str	r3, [r7, #32]
      break;
 80032c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032c2:	6a3b      	ldr	r3, [r7, #32]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	372c      	adds	r7, #44	; 0x2c
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	40021000 	.word	0x40021000
 80032d4:	007a1200 	.word	0x007a1200
 80032d8:	080048a0 	.word	0x080048a0
 80032dc:	080048b0 	.word	0x080048b0

080032e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032e4:	4b03      	ldr	r3, [pc, #12]	; (80032f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80032e6:	681b      	ldr	r3, [r3, #0]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	20000000 	.word	0x20000000

080032f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80032fe:	f7ff ffef 	bl	80032e0 <HAL_RCC_GetHCLKFreq>
 8003302:	4601      	mov	r1, r0
 8003304:	4b0b      	ldr	r3, [pc, #44]	; (8003334 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800330c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003310:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	fa92 f2a2 	rbit	r2, r2
 8003318:	603a      	str	r2, [r7, #0]
  return result;
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	fab2 f282 	clz	r2, r2
 8003320:	b2d2      	uxtb	r2, r2
 8003322:	40d3      	lsrs	r3, r2
 8003324:	4a04      	ldr	r2, [pc, #16]	; (8003338 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003326:	5cd3      	ldrb	r3, [r2, r3]
 8003328:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800332c:	4618      	mov	r0, r3
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40021000 	.word	0x40021000
 8003338:	08004898 	.word	0x08004898

0800333c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003342:	f7ff ffcd 	bl	80032e0 <HAL_RCC_GetHCLKFreq>
 8003346:	4601      	mov	r1, r0
 8003348:	4b0b      	ldr	r3, [pc, #44]	; (8003378 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003350:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003354:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	fa92 f2a2 	rbit	r2, r2
 800335c:	603a      	str	r2, [r7, #0]
  return result;
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	fab2 f282 	clz	r2, r2
 8003364:	b2d2      	uxtb	r2, r2
 8003366:	40d3      	lsrs	r3, r2
 8003368:	4a04      	ldr	r2, [pc, #16]	; (800337c <HAL_RCC_GetPCLK2Freq+0x40>)
 800336a:	5cd3      	ldrb	r3, [r2, r3]
 800336c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003370:	4618      	mov	r0, r3
 8003372:	3708      	adds	r7, #8
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40021000 	.word	0x40021000
 800337c:	08004898 	.word	0x08004898

08003380 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b092      	sub	sp, #72	; 0x48
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003388:	2300      	movs	r3, #0
 800338a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800338c:	2300      	movs	r3, #0
 800338e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003390:	2300      	movs	r3, #0
 8003392:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 80d4 	beq.w	800354c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033a4:	4b4e      	ldr	r3, [pc, #312]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033a6:	69db      	ldr	r3, [r3, #28]
 80033a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10e      	bne.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033b0:	4b4b      	ldr	r3, [pc, #300]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	4a4a      	ldr	r2, [pc, #296]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ba:	61d3      	str	r3, [r2, #28]
 80033bc:	4b48      	ldr	r3, [pc, #288]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033be:	69db      	ldr	r3, [r3, #28]
 80033c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c4:	60bb      	str	r3, [r7, #8]
 80033c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033c8:	2301      	movs	r3, #1
 80033ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ce:	4b45      	ldr	r3, [pc, #276]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d118      	bne.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033da:	4b42      	ldr	r3, [pc, #264]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a41      	ldr	r2, [pc, #260]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033e6:	f7fd fab7 	bl	8000958 <HAL_GetTick>
 80033ea:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ec:	e008      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ee:	f7fd fab3 	bl	8000958 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b64      	cmp	r3, #100	; 0x64
 80033fa:	d901      	bls.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e1d6      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003400:	4b38      	ldr	r3, [pc, #224]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003408:	2b00      	cmp	r3, #0
 800340a:	d0f0      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800340c:	4b34      	ldr	r3, [pc, #208]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003414:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 8084 	beq.w	8003526 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003426:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003428:	429a      	cmp	r2, r3
 800342a:	d07c      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800342c:	4b2c      	ldr	r3, [pc, #176]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003434:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003436:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800343a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343e:	fa93 f3a3 	rbit	r3, r3
 8003442:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003446:	fab3 f383 	clz	r3, r3
 800344a:	b2db      	uxtb	r3, r3
 800344c:	461a      	mov	r2, r3
 800344e:	4b26      	ldr	r3, [pc, #152]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003450:	4413      	add	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	461a      	mov	r2, r3
 8003456:	2301      	movs	r3, #1
 8003458:	6013      	str	r3, [r2, #0]
 800345a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800345e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003462:	fa93 f3a3 	rbit	r3, r3
 8003466:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800346a:	fab3 f383 	clz	r3, r3
 800346e:	b2db      	uxtb	r3, r3
 8003470:	461a      	mov	r2, r3
 8003472:	4b1d      	ldr	r3, [pc, #116]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003474:	4413      	add	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	461a      	mov	r2, r3
 800347a:	2300      	movs	r3, #0
 800347c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800347e:	4a18      	ldr	r2, [pc, #96]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003482:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	d04b      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348e:	f7fd fa63 	bl	8000958 <HAL_GetTick>
 8003492:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003494:	e00a      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003496:	f7fd fa5f 	bl	8000958 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d901      	bls.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e180      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80034ac:	2302      	movs	r3, #2
 80034ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b2:	fa93 f3a3 	rbit	r3, r3
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
 80034b8:	2302      	movs	r3, #2
 80034ba:	623b      	str	r3, [r7, #32]
 80034bc:	6a3b      	ldr	r3, [r7, #32]
 80034be:	fa93 f3a3 	rbit	r3, r3
 80034c2:	61fb      	str	r3, [r7, #28]
  return result;
 80034c4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c6:	fab3 f383 	clz	r3, r3
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	095b      	lsrs	r3, r3, #5
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	f043 0302 	orr.w	r3, r3, #2
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d108      	bne.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80034da:	4b01      	ldr	r3, [pc, #4]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	e00d      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80034e0:	40021000 	.word	0x40021000
 80034e4:	40007000 	.word	0x40007000
 80034e8:	10908100 	.word	0x10908100
 80034ec:	2302      	movs	r3, #2
 80034ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	fa93 f3a3 	rbit	r3, r3
 80034f6:	617b      	str	r3, [r7, #20]
 80034f8:	4ba0      	ldr	r3, [pc, #640]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	2202      	movs	r2, #2
 80034fe:	613a      	str	r2, [r7, #16]
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	fa92 f2a2 	rbit	r2, r2
 8003506:	60fa      	str	r2, [r7, #12]
  return result;
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	fab2 f282 	clz	r2, r2
 800350e:	b2d2      	uxtb	r2, r2
 8003510:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003514:	b2d2      	uxtb	r2, r2
 8003516:	f002 021f 	and.w	r2, r2, #31
 800351a:	2101      	movs	r1, #1
 800351c:	fa01 f202 	lsl.w	r2, r1, r2
 8003520:	4013      	ands	r3, r2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0b7      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003526:	4b95      	ldr	r3, [pc, #596]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	4992      	ldr	r1, [pc, #584]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003534:	4313      	orrs	r3, r2
 8003536:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003538:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800353c:	2b01      	cmp	r3, #1
 800353e:	d105      	bne.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003540:	4b8e      	ldr	r3, [pc, #568]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003542:	69db      	ldr	r3, [r3, #28]
 8003544:	4a8d      	ldr	r2, [pc, #564]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003546:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800354a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b00      	cmp	r3, #0
 8003556:	d008      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003558:	4b88      	ldr	r3, [pc, #544]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800355a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355c:	f023 0203 	bic.w	r2, r3, #3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	4985      	ldr	r1, [pc, #532]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003566:	4313      	orrs	r3, r2
 8003568:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d008      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003576:	4b81      	ldr	r3, [pc, #516]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	497e      	ldr	r1, [pc, #504]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003584:	4313      	orrs	r3, r2
 8003586:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b00      	cmp	r3, #0
 8003592:	d008      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003594:	4b79      	ldr	r3, [pc, #484]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003598:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	4976      	ldr	r1, [pc, #472]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0320 	and.w	r3, r3, #32
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d008      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035b2:	4b72      	ldr	r3, [pc, #456]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b6:	f023 0210 	bic.w	r2, r3, #16
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	496f      	ldr	r1, [pc, #444]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d008      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80035d0:	4b6a      	ldr	r3, [pc, #424]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035dc:	4967      	ldr	r1, [pc, #412]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d008      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035ee:	4b63      	ldr	r3, [pc, #396]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f2:	f023 0220 	bic.w	r2, r3, #32
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	4960      	ldr	r1, [pc, #384]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d008      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800360c:	4b5b      	ldr	r3, [pc, #364]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800360e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003610:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	4958      	ldr	r1, [pc, #352]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800361a:	4313      	orrs	r3, r2
 800361c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0308 	and.w	r3, r3, #8
 8003626:	2b00      	cmp	r3, #0
 8003628:	d008      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800362a:	4b54      	ldr	r3, [pc, #336]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800362c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	4951      	ldr	r1, [pc, #324]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003638:	4313      	orrs	r3, r2
 800363a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0310 	and.w	r3, r3, #16
 8003644:	2b00      	cmp	r3, #0
 8003646:	d008      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003648:	4b4c      	ldr	r3, [pc, #304]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800364a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	4949      	ldr	r1, [pc, #292]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003656:	4313      	orrs	r3, r2
 8003658:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003662:	2b00      	cmp	r3, #0
 8003664:	d008      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003666:	4b45      	ldr	r3, [pc, #276]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003672:	4942      	ldr	r1, [pc, #264]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003674:	4313      	orrs	r3, r2
 8003676:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003680:	2b00      	cmp	r3, #0
 8003682:	d008      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003684:	4b3d      	ldr	r3, [pc, #244]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003688:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003690:	493a      	ldr	r1, [pc, #232]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003692:	4313      	orrs	r3, r2
 8003694:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d008      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80036a2:	4b36      	ldr	r3, [pc, #216]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ae:	4933      	ldr	r1, [pc, #204]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d008      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80036c0:	4b2e      	ldr	r3, [pc, #184]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036cc:	492b      	ldr	r1, [pc, #172]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d008      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80036de:	4b27      	ldr	r3, [pc, #156]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	4924      	ldr	r1, [pc, #144]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d008      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80036fc:	4b1f      	ldr	r3, [pc, #124]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003700:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003708:	491c      	ldr	r1, [pc, #112]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800370a:	4313      	orrs	r3, r2
 800370c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d008      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800371a:	4b18      	ldr	r3, [pc, #96]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800371c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003726:	4915      	ldr	r1, [pc, #84]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003728:	4313      	orrs	r3, r2
 800372a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d008      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003738:	4b10      	ldr	r3, [pc, #64]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800373a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003744:	490d      	ldr	r1, [pc, #52]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003746:	4313      	orrs	r3, r2
 8003748:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d008      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003756:	4b09      	ldr	r3, [pc, #36]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003762:	4906      	ldr	r1, [pc, #24]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003764:	4313      	orrs	r3, r2
 8003766:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00c      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003774:	4b01      	ldr	r3, [pc, #4]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003778:	e002      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800377a:	bf00      	nop
 800377c:	40021000 	.word	0x40021000
 8003780:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003788:	490b      	ldr	r1, [pc, #44]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800378a:	4313      	orrs	r3, r2
 800378c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d008      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800379a:	4b07      	ldr	r3, [pc, #28]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800379c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037a6:	4904      	ldr	r1, [pc, #16]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3748      	adds	r7, #72	; 0x48
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	40021000 	.word	0x40021000

080037bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e040      	b.n	8003850 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d106      	bne.n	80037e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f7fc fff4 	bl	80007cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2224      	movs	r2, #36	; 0x24
 80037e8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0201 	bic.w	r2, r2, #1
 80037f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f8c0 	bl	8003980 <UART_SetConfig>
 8003800:	4603      	mov	r3, r0
 8003802:	2b01      	cmp	r3, #1
 8003804:	d101      	bne.n	800380a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e022      	b.n	8003850 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380e:	2b00      	cmp	r3, #0
 8003810:	d002      	beq.n	8003818 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 fa88 	bl	8003d28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003826:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689a      	ldr	r2, [r3, #8]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003836:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 0201 	orr.w	r2, r2, #1
 8003846:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 fb0f 	bl	8003e6c <UART_CheckIdleState>
 800384e:	4603      	mov	r3, r0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b08a      	sub	sp, #40	; 0x28
 800385c:	af02      	add	r7, sp, #8
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	603b      	str	r3, [r7, #0]
 8003864:	4613      	mov	r3, r2
 8003866:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800386c:	2b20      	cmp	r3, #32
 800386e:	f040 8082 	bne.w	8003976 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d002      	beq.n	800387e <HAL_UART_Transmit+0x26>
 8003878:	88fb      	ldrh	r3, [r7, #6]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e07a      	b.n	8003978 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003888:	2b01      	cmp	r3, #1
 800388a:	d101      	bne.n	8003890 <HAL_UART_Transmit+0x38>
 800388c:	2302      	movs	r3, #2
 800388e:	e073      	b.n	8003978 <HAL_UART_Transmit+0x120>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2221      	movs	r2, #33	; 0x21
 80038a4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038a6:	f7fd f857 	bl	8000958 <HAL_GetTick>
 80038aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	88fa      	ldrh	r2, [r7, #6]
 80038b0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	88fa      	ldrh	r2, [r7, #6]
 80038b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038c4:	d108      	bne.n	80038d8 <HAL_UART_Transmit+0x80>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d104      	bne.n	80038d8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80038ce:	2300      	movs	r3, #0
 80038d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	61bb      	str	r3, [r7, #24]
 80038d6:	e003      	b.n	80038e0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038dc:	2300      	movs	r3, #0
 80038de:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80038e8:	e02d      	b.n	8003946 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	2200      	movs	r2, #0
 80038f2:	2180      	movs	r1, #128	; 0x80
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f000 fb02 	bl	8003efe <UART_WaitOnFlagUntilTimeout>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e039      	b.n	8003978 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10b      	bne.n	8003922 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	881a      	ldrh	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003916:	b292      	uxth	r2, r2
 8003918:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	3302      	adds	r3, #2
 800391e:	61bb      	str	r3, [r7, #24]
 8003920:	e008      	b.n	8003934 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	781a      	ldrb	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	b292      	uxth	r2, r2
 800392c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	3301      	adds	r3, #1
 8003932:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800393a:	b29b      	uxth	r3, r3
 800393c:	3b01      	subs	r3, #1
 800393e:	b29a      	uxth	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800394c:	b29b      	uxth	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1cb      	bne.n	80038ea <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	9300      	str	r3, [sp, #0]
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	2200      	movs	r2, #0
 800395a:	2140      	movs	r1, #64	; 0x40
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f000 face 	bl	8003efe <UART_WaitOnFlagUntilTimeout>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e005      	b.n	8003978 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2220      	movs	r2, #32
 8003970:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003972:	2300      	movs	r3, #0
 8003974:	e000      	b.n	8003978 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003976:	2302      	movs	r3, #2
  }
}
 8003978:	4618      	mov	r0, r3
 800397a:	3720      	adds	r7, #32
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b088      	sub	sp, #32
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003988:	2300      	movs	r3, #0
 800398a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	431a      	orrs	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	431a      	orrs	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	4baa      	ldr	r3, [pc, #680]	; (8003c54 <UART_SetConfig+0x2d4>)
 80039ac:	4013      	ands	r3, r2
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	6812      	ldr	r2, [r2, #0]
 80039b2:	6979      	ldr	r1, [r7, #20]
 80039b4:	430b      	orrs	r3, r1
 80039b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68da      	ldr	r2, [r3, #12]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	4313      	orrs	r3, r2
 80039dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a98      	ldr	r2, [pc, #608]	; (8003c58 <UART_SetConfig+0x2d8>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d121      	bne.n	8003a40 <UART_SetConfig+0xc0>
 80039fc:	4b97      	ldr	r3, [pc, #604]	; (8003c5c <UART_SetConfig+0x2dc>)
 80039fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a00:	f003 0303 	and.w	r3, r3, #3
 8003a04:	2b03      	cmp	r3, #3
 8003a06:	d817      	bhi.n	8003a38 <UART_SetConfig+0xb8>
 8003a08:	a201      	add	r2, pc, #4	; (adr r2, 8003a10 <UART_SetConfig+0x90>)
 8003a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a0e:	bf00      	nop
 8003a10:	08003a21 	.word	0x08003a21
 8003a14:	08003a2d 	.word	0x08003a2d
 8003a18:	08003a33 	.word	0x08003a33
 8003a1c:	08003a27 	.word	0x08003a27
 8003a20:	2301      	movs	r3, #1
 8003a22:	77fb      	strb	r3, [r7, #31]
 8003a24:	e0b2      	b.n	8003b8c <UART_SetConfig+0x20c>
 8003a26:	2302      	movs	r3, #2
 8003a28:	77fb      	strb	r3, [r7, #31]
 8003a2a:	e0af      	b.n	8003b8c <UART_SetConfig+0x20c>
 8003a2c:	2304      	movs	r3, #4
 8003a2e:	77fb      	strb	r3, [r7, #31]
 8003a30:	e0ac      	b.n	8003b8c <UART_SetConfig+0x20c>
 8003a32:	2308      	movs	r3, #8
 8003a34:	77fb      	strb	r3, [r7, #31]
 8003a36:	e0a9      	b.n	8003b8c <UART_SetConfig+0x20c>
 8003a38:	2310      	movs	r3, #16
 8003a3a:	77fb      	strb	r3, [r7, #31]
 8003a3c:	bf00      	nop
 8003a3e:	e0a5      	b.n	8003b8c <UART_SetConfig+0x20c>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a86      	ldr	r2, [pc, #536]	; (8003c60 <UART_SetConfig+0x2e0>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d123      	bne.n	8003a92 <UART_SetConfig+0x112>
 8003a4a:	4b84      	ldr	r3, [pc, #528]	; (8003c5c <UART_SetConfig+0x2dc>)
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a56:	d012      	beq.n	8003a7e <UART_SetConfig+0xfe>
 8003a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a5c:	d802      	bhi.n	8003a64 <UART_SetConfig+0xe4>
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d007      	beq.n	8003a72 <UART_SetConfig+0xf2>
 8003a62:	e012      	b.n	8003a8a <UART_SetConfig+0x10a>
 8003a64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a68:	d00c      	beq.n	8003a84 <UART_SetConfig+0x104>
 8003a6a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a6e:	d003      	beq.n	8003a78 <UART_SetConfig+0xf8>
 8003a70:	e00b      	b.n	8003a8a <UART_SetConfig+0x10a>
 8003a72:	2300      	movs	r3, #0
 8003a74:	77fb      	strb	r3, [r7, #31]
 8003a76:	e089      	b.n	8003b8c <UART_SetConfig+0x20c>
 8003a78:	2302      	movs	r3, #2
 8003a7a:	77fb      	strb	r3, [r7, #31]
 8003a7c:	e086      	b.n	8003b8c <UART_SetConfig+0x20c>
 8003a7e:	2304      	movs	r3, #4
 8003a80:	77fb      	strb	r3, [r7, #31]
 8003a82:	e083      	b.n	8003b8c <UART_SetConfig+0x20c>
 8003a84:	2308      	movs	r3, #8
 8003a86:	77fb      	strb	r3, [r7, #31]
 8003a88:	e080      	b.n	8003b8c <UART_SetConfig+0x20c>
 8003a8a:	2310      	movs	r3, #16
 8003a8c:	77fb      	strb	r3, [r7, #31]
 8003a8e:	bf00      	nop
 8003a90:	e07c      	b.n	8003b8c <UART_SetConfig+0x20c>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a73      	ldr	r2, [pc, #460]	; (8003c64 <UART_SetConfig+0x2e4>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d123      	bne.n	8003ae4 <UART_SetConfig+0x164>
 8003a9c:	4b6f      	ldr	r3, [pc, #444]	; (8003c5c <UART_SetConfig+0x2dc>)
 8003a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003aa4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003aa8:	d012      	beq.n	8003ad0 <UART_SetConfig+0x150>
 8003aaa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003aae:	d802      	bhi.n	8003ab6 <UART_SetConfig+0x136>
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d007      	beq.n	8003ac4 <UART_SetConfig+0x144>
 8003ab4:	e012      	b.n	8003adc <UART_SetConfig+0x15c>
 8003ab6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003aba:	d00c      	beq.n	8003ad6 <UART_SetConfig+0x156>
 8003abc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003ac0:	d003      	beq.n	8003aca <UART_SetConfig+0x14a>
 8003ac2:	e00b      	b.n	8003adc <UART_SetConfig+0x15c>
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	77fb      	strb	r3, [r7, #31]
 8003ac8:	e060      	b.n	8003b8c <UART_SetConfig+0x20c>
 8003aca:	2302      	movs	r3, #2
 8003acc:	77fb      	strb	r3, [r7, #31]
 8003ace:	e05d      	b.n	8003b8c <UART_SetConfig+0x20c>
 8003ad0:	2304      	movs	r3, #4
 8003ad2:	77fb      	strb	r3, [r7, #31]
 8003ad4:	e05a      	b.n	8003b8c <UART_SetConfig+0x20c>
 8003ad6:	2308      	movs	r3, #8
 8003ad8:	77fb      	strb	r3, [r7, #31]
 8003ada:	e057      	b.n	8003b8c <UART_SetConfig+0x20c>
 8003adc:	2310      	movs	r3, #16
 8003ade:	77fb      	strb	r3, [r7, #31]
 8003ae0:	bf00      	nop
 8003ae2:	e053      	b.n	8003b8c <UART_SetConfig+0x20c>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a5f      	ldr	r2, [pc, #380]	; (8003c68 <UART_SetConfig+0x2e8>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d123      	bne.n	8003b36 <UART_SetConfig+0x1b6>
 8003aee:	4b5b      	ldr	r3, [pc, #364]	; (8003c5c <UART_SetConfig+0x2dc>)
 8003af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003af6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003afa:	d012      	beq.n	8003b22 <UART_SetConfig+0x1a2>
 8003afc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b00:	d802      	bhi.n	8003b08 <UART_SetConfig+0x188>
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d007      	beq.n	8003b16 <UART_SetConfig+0x196>
 8003b06:	e012      	b.n	8003b2e <UART_SetConfig+0x1ae>
 8003b08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b0c:	d00c      	beq.n	8003b28 <UART_SetConfig+0x1a8>
 8003b0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b12:	d003      	beq.n	8003b1c <UART_SetConfig+0x19c>
 8003b14:	e00b      	b.n	8003b2e <UART_SetConfig+0x1ae>
 8003b16:	2300      	movs	r3, #0
 8003b18:	77fb      	strb	r3, [r7, #31]
 8003b1a:	e037      	b.n	8003b8c <UART_SetConfig+0x20c>
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	77fb      	strb	r3, [r7, #31]
 8003b20:	e034      	b.n	8003b8c <UART_SetConfig+0x20c>
 8003b22:	2304      	movs	r3, #4
 8003b24:	77fb      	strb	r3, [r7, #31]
 8003b26:	e031      	b.n	8003b8c <UART_SetConfig+0x20c>
 8003b28:	2308      	movs	r3, #8
 8003b2a:	77fb      	strb	r3, [r7, #31]
 8003b2c:	e02e      	b.n	8003b8c <UART_SetConfig+0x20c>
 8003b2e:	2310      	movs	r3, #16
 8003b30:	77fb      	strb	r3, [r7, #31]
 8003b32:	bf00      	nop
 8003b34:	e02a      	b.n	8003b8c <UART_SetConfig+0x20c>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a4c      	ldr	r2, [pc, #304]	; (8003c6c <UART_SetConfig+0x2ec>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d123      	bne.n	8003b88 <UART_SetConfig+0x208>
 8003b40:	4b46      	ldr	r3, [pc, #280]	; (8003c5c <UART_SetConfig+0x2dc>)
 8003b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b44:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003b48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b4c:	d012      	beq.n	8003b74 <UART_SetConfig+0x1f4>
 8003b4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b52:	d802      	bhi.n	8003b5a <UART_SetConfig+0x1da>
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d007      	beq.n	8003b68 <UART_SetConfig+0x1e8>
 8003b58:	e012      	b.n	8003b80 <UART_SetConfig+0x200>
 8003b5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b5e:	d00c      	beq.n	8003b7a <UART_SetConfig+0x1fa>
 8003b60:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b64:	d003      	beq.n	8003b6e <UART_SetConfig+0x1ee>
 8003b66:	e00b      	b.n	8003b80 <UART_SetConfig+0x200>
 8003b68:	2300      	movs	r3, #0
 8003b6a:	77fb      	strb	r3, [r7, #31]
 8003b6c:	e00e      	b.n	8003b8c <UART_SetConfig+0x20c>
 8003b6e:	2302      	movs	r3, #2
 8003b70:	77fb      	strb	r3, [r7, #31]
 8003b72:	e00b      	b.n	8003b8c <UART_SetConfig+0x20c>
 8003b74:	2304      	movs	r3, #4
 8003b76:	77fb      	strb	r3, [r7, #31]
 8003b78:	e008      	b.n	8003b8c <UART_SetConfig+0x20c>
 8003b7a:	2308      	movs	r3, #8
 8003b7c:	77fb      	strb	r3, [r7, #31]
 8003b7e:	e005      	b.n	8003b8c <UART_SetConfig+0x20c>
 8003b80:	2310      	movs	r3, #16
 8003b82:	77fb      	strb	r3, [r7, #31]
 8003b84:	bf00      	nop
 8003b86:	e001      	b.n	8003b8c <UART_SetConfig+0x20c>
 8003b88:	2310      	movs	r3, #16
 8003b8a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	69db      	ldr	r3, [r3, #28]
 8003b90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b94:	d16e      	bne.n	8003c74 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003b96:	7ffb      	ldrb	r3, [r7, #31]
 8003b98:	2b08      	cmp	r3, #8
 8003b9a:	d828      	bhi.n	8003bee <UART_SetConfig+0x26e>
 8003b9c:	a201      	add	r2, pc, #4	; (adr r2, 8003ba4 <UART_SetConfig+0x224>)
 8003b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba2:	bf00      	nop
 8003ba4:	08003bc9 	.word	0x08003bc9
 8003ba8:	08003bd1 	.word	0x08003bd1
 8003bac:	08003bd9 	.word	0x08003bd9
 8003bb0:	08003bef 	.word	0x08003bef
 8003bb4:	08003bdf 	.word	0x08003bdf
 8003bb8:	08003bef 	.word	0x08003bef
 8003bbc:	08003bef 	.word	0x08003bef
 8003bc0:	08003bef 	.word	0x08003bef
 8003bc4:	08003be7 	.word	0x08003be7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bc8:	f7ff fb96 	bl	80032f8 <HAL_RCC_GetPCLK1Freq>
 8003bcc:	61b8      	str	r0, [r7, #24]
        break;
 8003bce:	e013      	b.n	8003bf8 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bd0:	f7ff fbb4 	bl	800333c <HAL_RCC_GetPCLK2Freq>
 8003bd4:	61b8      	str	r0, [r7, #24]
        break;
 8003bd6:	e00f      	b.n	8003bf8 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bd8:	4b25      	ldr	r3, [pc, #148]	; (8003c70 <UART_SetConfig+0x2f0>)
 8003bda:	61bb      	str	r3, [r7, #24]
        break;
 8003bdc:	e00c      	b.n	8003bf8 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bde:	f7ff fb15 	bl	800320c <HAL_RCC_GetSysClockFreq>
 8003be2:	61b8      	str	r0, [r7, #24]
        break;
 8003be4:	e008      	b.n	8003bf8 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003be6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bea:	61bb      	str	r3, [r7, #24]
        break;
 8003bec:	e004      	b.n	8003bf8 <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	77bb      	strb	r3, [r7, #30]
        break;
 8003bf6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f000 8086 	beq.w	8003d0c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	005a      	lsls	r2, r3, #1
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	085b      	lsrs	r3, r3, #1
 8003c0a:	441a      	add	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	2b0f      	cmp	r3, #15
 8003c1c:	d916      	bls.n	8003c4c <UART_SetConfig+0x2cc>
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c24:	d212      	bcs.n	8003c4c <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	f023 030f 	bic.w	r3, r3, #15
 8003c2e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	085b      	lsrs	r3, r3, #1
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	f003 0307 	and.w	r3, r3, #7
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	89fb      	ldrh	r3, [r7, #14]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	89fa      	ldrh	r2, [r7, #14]
 8003c48:	60da      	str	r2, [r3, #12]
 8003c4a:	e05f      	b.n	8003d0c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	77bb      	strb	r3, [r7, #30]
 8003c50:	e05c      	b.n	8003d0c <UART_SetConfig+0x38c>
 8003c52:	bf00      	nop
 8003c54:	efff69f3 	.word	0xefff69f3
 8003c58:	40013800 	.word	0x40013800
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	40004400 	.word	0x40004400
 8003c64:	40004800 	.word	0x40004800
 8003c68:	40004c00 	.word	0x40004c00
 8003c6c:	40005000 	.word	0x40005000
 8003c70:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c74:	7ffb      	ldrb	r3, [r7, #31]
 8003c76:	2b08      	cmp	r3, #8
 8003c78:	d827      	bhi.n	8003cca <UART_SetConfig+0x34a>
 8003c7a:	a201      	add	r2, pc, #4	; (adr r2, 8003c80 <UART_SetConfig+0x300>)
 8003c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c80:	08003ca5 	.word	0x08003ca5
 8003c84:	08003cad 	.word	0x08003cad
 8003c88:	08003cb5 	.word	0x08003cb5
 8003c8c:	08003ccb 	.word	0x08003ccb
 8003c90:	08003cbb 	.word	0x08003cbb
 8003c94:	08003ccb 	.word	0x08003ccb
 8003c98:	08003ccb 	.word	0x08003ccb
 8003c9c:	08003ccb 	.word	0x08003ccb
 8003ca0:	08003cc3 	.word	0x08003cc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ca4:	f7ff fb28 	bl	80032f8 <HAL_RCC_GetPCLK1Freq>
 8003ca8:	61b8      	str	r0, [r7, #24]
        break;
 8003caa:	e013      	b.n	8003cd4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cac:	f7ff fb46 	bl	800333c <HAL_RCC_GetPCLK2Freq>
 8003cb0:	61b8      	str	r0, [r7, #24]
        break;
 8003cb2:	e00f      	b.n	8003cd4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cb4:	4b1b      	ldr	r3, [pc, #108]	; (8003d24 <UART_SetConfig+0x3a4>)
 8003cb6:	61bb      	str	r3, [r7, #24]
        break;
 8003cb8:	e00c      	b.n	8003cd4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cba:	f7ff faa7 	bl	800320c <HAL_RCC_GetSysClockFreq>
 8003cbe:	61b8      	str	r0, [r7, #24]
        break;
 8003cc0:	e008      	b.n	8003cd4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cc6:	61bb      	str	r3, [r7, #24]
        break;
 8003cc8:	e004      	b.n	8003cd4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	77bb      	strb	r3, [r7, #30]
        break;
 8003cd2:	bf00      	nop
    }

    if (pclk != 0U)
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d018      	beq.n	8003d0c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	085a      	lsrs	r2, r3, #1
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	441a      	add	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	2b0f      	cmp	r3, #15
 8003cf4:	d908      	bls.n	8003d08 <UART_SetConfig+0x388>
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cfc:	d204      	bcs.n	8003d08 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	60da      	str	r2, [r3, #12]
 8003d06:	e001      	b.n	8003d0c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003d18:	7fbb      	ldrb	r3, [r7, #30]
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3720      	adds	r7, #32
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	007a1200 	.word	0x007a1200

08003d28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00a      	beq.n	8003d52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00a      	beq.n	8003d74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d78:	f003 0304 	and.w	r3, r3, #4
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00a      	beq.n	8003d96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9a:	f003 0308 	and.w	r3, r3, #8
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00a      	beq.n	8003db8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	430a      	orrs	r2, r1
 8003db6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbc:	f003 0310 	and.w	r3, r3, #16
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00a      	beq.n	8003dda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	f003 0320 	and.w	r3, r3, #32
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00a      	beq.n	8003dfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d01a      	beq.n	8003e3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e26:	d10a      	bne.n	8003e3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00a      	beq.n	8003e60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	605a      	str	r2, [r3, #4]
  }
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af02      	add	r7, sp, #8
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e7c:	f7fc fd6c 	bl	8000958 <HAL_GetTick>
 8003e80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0308 	and.w	r3, r3, #8
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d10e      	bne.n	8003eae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f82d 	bl	8003efe <UART_WaitOnFlagUntilTimeout>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e023      	b.n	8003ef6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b04      	cmp	r3, #4
 8003eba:	d10e      	bne.n	8003eda <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ebc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f817 	bl	8003efe <UART_WaitOnFlagUntilTimeout>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e00d      	b.n	8003ef6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2220      	movs	r2, #32
 8003ede:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b084      	sub	sp, #16
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	60f8      	str	r0, [r7, #12]
 8003f06:	60b9      	str	r1, [r7, #8]
 8003f08:	603b      	str	r3, [r7, #0]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f0e:	e05e      	b.n	8003fce <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f16:	d05a      	beq.n	8003fce <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f18:	f7fc fd1e 	bl	8000958 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	69ba      	ldr	r2, [r7, #24]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d302      	bcc.n	8003f2e <UART_WaitOnFlagUntilTimeout+0x30>
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d11b      	bne.n	8003f66 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f3c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689a      	ldr	r2, [r3, #8]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 0201 	bic.w	r2, r2, #1
 8003f4c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2220      	movs	r2, #32
 8003f52:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2220      	movs	r2, #32
 8003f58:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e043      	b.n	8003fee <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0304 	and.w	r3, r3, #4
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d02c      	beq.n	8003fce <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	69db      	ldr	r3, [r3, #28]
 8003f7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f82:	d124      	bne.n	8003fce <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f8c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f9c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 0201 	bic.w	r2, r2, #1
 8003fac:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e00f      	b.n	8003fee <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	69da      	ldr	r2, [r3, #28]
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	bf0c      	ite	eq
 8003fde:	2301      	moveq	r3, #1
 8003fe0:	2300      	movne	r3, #0
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	79fb      	ldrb	r3, [r7, #7]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d091      	beq.n	8003f10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
	...

08003ff8 <__errno>:
 8003ff8:	4b01      	ldr	r3, [pc, #4]	; (8004000 <__errno+0x8>)
 8003ffa:	6818      	ldr	r0, [r3, #0]
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	2000000c 	.word	0x2000000c

08004004 <__libc_init_array>:
 8004004:	b570      	push	{r4, r5, r6, lr}
 8004006:	4e0d      	ldr	r6, [pc, #52]	; (800403c <__libc_init_array+0x38>)
 8004008:	4c0d      	ldr	r4, [pc, #52]	; (8004040 <__libc_init_array+0x3c>)
 800400a:	1ba4      	subs	r4, r4, r6
 800400c:	10a4      	asrs	r4, r4, #2
 800400e:	2500      	movs	r5, #0
 8004010:	42a5      	cmp	r5, r4
 8004012:	d109      	bne.n	8004028 <__libc_init_array+0x24>
 8004014:	4e0b      	ldr	r6, [pc, #44]	; (8004044 <__libc_init_array+0x40>)
 8004016:	4c0c      	ldr	r4, [pc, #48]	; (8004048 <__libc_init_array+0x44>)
 8004018:	f000 fc26 	bl	8004868 <_init>
 800401c:	1ba4      	subs	r4, r4, r6
 800401e:	10a4      	asrs	r4, r4, #2
 8004020:	2500      	movs	r5, #0
 8004022:	42a5      	cmp	r5, r4
 8004024:	d105      	bne.n	8004032 <__libc_init_array+0x2e>
 8004026:	bd70      	pop	{r4, r5, r6, pc}
 8004028:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800402c:	4798      	blx	r3
 800402e:	3501      	adds	r5, #1
 8004030:	e7ee      	b.n	8004010 <__libc_init_array+0xc>
 8004032:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004036:	4798      	blx	r3
 8004038:	3501      	adds	r5, #1
 800403a:	e7f2      	b.n	8004022 <__libc_init_array+0x1e>
 800403c:	080048f4 	.word	0x080048f4
 8004040:	080048f4 	.word	0x080048f4
 8004044:	080048f4 	.word	0x080048f4
 8004048:	080048f8 	.word	0x080048f8

0800404c <memset>:
 800404c:	4402      	add	r2, r0
 800404e:	4603      	mov	r3, r0
 8004050:	4293      	cmp	r3, r2
 8004052:	d100      	bne.n	8004056 <memset+0xa>
 8004054:	4770      	bx	lr
 8004056:	f803 1b01 	strb.w	r1, [r3], #1
 800405a:	e7f9      	b.n	8004050 <memset+0x4>

0800405c <siprintf>:
 800405c:	b40e      	push	{r1, r2, r3}
 800405e:	b500      	push	{lr}
 8004060:	b09c      	sub	sp, #112	; 0x70
 8004062:	ab1d      	add	r3, sp, #116	; 0x74
 8004064:	9002      	str	r0, [sp, #8]
 8004066:	9006      	str	r0, [sp, #24]
 8004068:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800406c:	4809      	ldr	r0, [pc, #36]	; (8004094 <siprintf+0x38>)
 800406e:	9107      	str	r1, [sp, #28]
 8004070:	9104      	str	r1, [sp, #16]
 8004072:	4909      	ldr	r1, [pc, #36]	; (8004098 <siprintf+0x3c>)
 8004074:	f853 2b04 	ldr.w	r2, [r3], #4
 8004078:	9105      	str	r1, [sp, #20]
 800407a:	6800      	ldr	r0, [r0, #0]
 800407c:	9301      	str	r3, [sp, #4]
 800407e:	a902      	add	r1, sp, #8
 8004080:	f000 f866 	bl	8004150 <_svfiprintf_r>
 8004084:	9b02      	ldr	r3, [sp, #8]
 8004086:	2200      	movs	r2, #0
 8004088:	701a      	strb	r2, [r3, #0]
 800408a:	b01c      	add	sp, #112	; 0x70
 800408c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004090:	b003      	add	sp, #12
 8004092:	4770      	bx	lr
 8004094:	2000000c 	.word	0x2000000c
 8004098:	ffff0208 	.word	0xffff0208

0800409c <__ssputs_r>:
 800409c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040a0:	688e      	ldr	r6, [r1, #8]
 80040a2:	429e      	cmp	r6, r3
 80040a4:	4682      	mov	sl, r0
 80040a6:	460c      	mov	r4, r1
 80040a8:	4690      	mov	r8, r2
 80040aa:	4699      	mov	r9, r3
 80040ac:	d837      	bhi.n	800411e <__ssputs_r+0x82>
 80040ae:	898a      	ldrh	r2, [r1, #12]
 80040b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80040b4:	d031      	beq.n	800411a <__ssputs_r+0x7e>
 80040b6:	6825      	ldr	r5, [r4, #0]
 80040b8:	6909      	ldr	r1, [r1, #16]
 80040ba:	1a6f      	subs	r7, r5, r1
 80040bc:	6965      	ldr	r5, [r4, #20]
 80040be:	2302      	movs	r3, #2
 80040c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80040c4:	fb95 f5f3 	sdiv	r5, r5, r3
 80040c8:	f109 0301 	add.w	r3, r9, #1
 80040cc:	443b      	add	r3, r7
 80040ce:	429d      	cmp	r5, r3
 80040d0:	bf38      	it	cc
 80040d2:	461d      	movcc	r5, r3
 80040d4:	0553      	lsls	r3, r2, #21
 80040d6:	d530      	bpl.n	800413a <__ssputs_r+0x9e>
 80040d8:	4629      	mov	r1, r5
 80040da:	f000 fb2b 	bl	8004734 <_malloc_r>
 80040de:	4606      	mov	r6, r0
 80040e0:	b950      	cbnz	r0, 80040f8 <__ssputs_r+0x5c>
 80040e2:	230c      	movs	r3, #12
 80040e4:	f8ca 3000 	str.w	r3, [sl]
 80040e8:	89a3      	ldrh	r3, [r4, #12]
 80040ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040ee:	81a3      	strh	r3, [r4, #12]
 80040f0:	f04f 30ff 	mov.w	r0, #4294967295
 80040f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040f8:	463a      	mov	r2, r7
 80040fa:	6921      	ldr	r1, [r4, #16]
 80040fc:	f000 faa8 	bl	8004650 <memcpy>
 8004100:	89a3      	ldrh	r3, [r4, #12]
 8004102:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004106:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800410a:	81a3      	strh	r3, [r4, #12]
 800410c:	6126      	str	r6, [r4, #16]
 800410e:	6165      	str	r5, [r4, #20]
 8004110:	443e      	add	r6, r7
 8004112:	1bed      	subs	r5, r5, r7
 8004114:	6026      	str	r6, [r4, #0]
 8004116:	60a5      	str	r5, [r4, #8]
 8004118:	464e      	mov	r6, r9
 800411a:	454e      	cmp	r6, r9
 800411c:	d900      	bls.n	8004120 <__ssputs_r+0x84>
 800411e:	464e      	mov	r6, r9
 8004120:	4632      	mov	r2, r6
 8004122:	4641      	mov	r1, r8
 8004124:	6820      	ldr	r0, [r4, #0]
 8004126:	f000 fa9e 	bl	8004666 <memmove>
 800412a:	68a3      	ldr	r3, [r4, #8]
 800412c:	1b9b      	subs	r3, r3, r6
 800412e:	60a3      	str	r3, [r4, #8]
 8004130:	6823      	ldr	r3, [r4, #0]
 8004132:	441e      	add	r6, r3
 8004134:	6026      	str	r6, [r4, #0]
 8004136:	2000      	movs	r0, #0
 8004138:	e7dc      	b.n	80040f4 <__ssputs_r+0x58>
 800413a:	462a      	mov	r2, r5
 800413c:	f000 fb54 	bl	80047e8 <_realloc_r>
 8004140:	4606      	mov	r6, r0
 8004142:	2800      	cmp	r0, #0
 8004144:	d1e2      	bne.n	800410c <__ssputs_r+0x70>
 8004146:	6921      	ldr	r1, [r4, #16]
 8004148:	4650      	mov	r0, sl
 800414a:	f000 faa5 	bl	8004698 <_free_r>
 800414e:	e7c8      	b.n	80040e2 <__ssputs_r+0x46>

08004150 <_svfiprintf_r>:
 8004150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004154:	461d      	mov	r5, r3
 8004156:	898b      	ldrh	r3, [r1, #12]
 8004158:	061f      	lsls	r7, r3, #24
 800415a:	b09d      	sub	sp, #116	; 0x74
 800415c:	4680      	mov	r8, r0
 800415e:	460c      	mov	r4, r1
 8004160:	4616      	mov	r6, r2
 8004162:	d50f      	bpl.n	8004184 <_svfiprintf_r+0x34>
 8004164:	690b      	ldr	r3, [r1, #16]
 8004166:	b96b      	cbnz	r3, 8004184 <_svfiprintf_r+0x34>
 8004168:	2140      	movs	r1, #64	; 0x40
 800416a:	f000 fae3 	bl	8004734 <_malloc_r>
 800416e:	6020      	str	r0, [r4, #0]
 8004170:	6120      	str	r0, [r4, #16]
 8004172:	b928      	cbnz	r0, 8004180 <_svfiprintf_r+0x30>
 8004174:	230c      	movs	r3, #12
 8004176:	f8c8 3000 	str.w	r3, [r8]
 800417a:	f04f 30ff 	mov.w	r0, #4294967295
 800417e:	e0c8      	b.n	8004312 <_svfiprintf_r+0x1c2>
 8004180:	2340      	movs	r3, #64	; 0x40
 8004182:	6163      	str	r3, [r4, #20]
 8004184:	2300      	movs	r3, #0
 8004186:	9309      	str	r3, [sp, #36]	; 0x24
 8004188:	2320      	movs	r3, #32
 800418a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800418e:	2330      	movs	r3, #48	; 0x30
 8004190:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004194:	9503      	str	r5, [sp, #12]
 8004196:	f04f 0b01 	mov.w	fp, #1
 800419a:	4637      	mov	r7, r6
 800419c:	463d      	mov	r5, r7
 800419e:	f815 3b01 	ldrb.w	r3, [r5], #1
 80041a2:	b10b      	cbz	r3, 80041a8 <_svfiprintf_r+0x58>
 80041a4:	2b25      	cmp	r3, #37	; 0x25
 80041a6:	d13e      	bne.n	8004226 <_svfiprintf_r+0xd6>
 80041a8:	ebb7 0a06 	subs.w	sl, r7, r6
 80041ac:	d00b      	beq.n	80041c6 <_svfiprintf_r+0x76>
 80041ae:	4653      	mov	r3, sl
 80041b0:	4632      	mov	r2, r6
 80041b2:	4621      	mov	r1, r4
 80041b4:	4640      	mov	r0, r8
 80041b6:	f7ff ff71 	bl	800409c <__ssputs_r>
 80041ba:	3001      	adds	r0, #1
 80041bc:	f000 80a4 	beq.w	8004308 <_svfiprintf_r+0x1b8>
 80041c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041c2:	4453      	add	r3, sl
 80041c4:	9309      	str	r3, [sp, #36]	; 0x24
 80041c6:	783b      	ldrb	r3, [r7, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 809d 	beq.w	8004308 <_svfiprintf_r+0x1b8>
 80041ce:	2300      	movs	r3, #0
 80041d0:	f04f 32ff 	mov.w	r2, #4294967295
 80041d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041d8:	9304      	str	r3, [sp, #16]
 80041da:	9307      	str	r3, [sp, #28]
 80041dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80041e0:	931a      	str	r3, [sp, #104]	; 0x68
 80041e2:	462f      	mov	r7, r5
 80041e4:	2205      	movs	r2, #5
 80041e6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80041ea:	4850      	ldr	r0, [pc, #320]	; (800432c <_svfiprintf_r+0x1dc>)
 80041ec:	f7fc f800 	bl	80001f0 <memchr>
 80041f0:	9b04      	ldr	r3, [sp, #16]
 80041f2:	b9d0      	cbnz	r0, 800422a <_svfiprintf_r+0xda>
 80041f4:	06d9      	lsls	r1, r3, #27
 80041f6:	bf44      	itt	mi
 80041f8:	2220      	movmi	r2, #32
 80041fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80041fe:	071a      	lsls	r2, r3, #28
 8004200:	bf44      	itt	mi
 8004202:	222b      	movmi	r2, #43	; 0x2b
 8004204:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004208:	782a      	ldrb	r2, [r5, #0]
 800420a:	2a2a      	cmp	r2, #42	; 0x2a
 800420c:	d015      	beq.n	800423a <_svfiprintf_r+0xea>
 800420e:	9a07      	ldr	r2, [sp, #28]
 8004210:	462f      	mov	r7, r5
 8004212:	2000      	movs	r0, #0
 8004214:	250a      	movs	r5, #10
 8004216:	4639      	mov	r1, r7
 8004218:	f811 3b01 	ldrb.w	r3, [r1], #1
 800421c:	3b30      	subs	r3, #48	; 0x30
 800421e:	2b09      	cmp	r3, #9
 8004220:	d94d      	bls.n	80042be <_svfiprintf_r+0x16e>
 8004222:	b1b8      	cbz	r0, 8004254 <_svfiprintf_r+0x104>
 8004224:	e00f      	b.n	8004246 <_svfiprintf_r+0xf6>
 8004226:	462f      	mov	r7, r5
 8004228:	e7b8      	b.n	800419c <_svfiprintf_r+0x4c>
 800422a:	4a40      	ldr	r2, [pc, #256]	; (800432c <_svfiprintf_r+0x1dc>)
 800422c:	1a80      	subs	r0, r0, r2
 800422e:	fa0b f000 	lsl.w	r0, fp, r0
 8004232:	4318      	orrs	r0, r3
 8004234:	9004      	str	r0, [sp, #16]
 8004236:	463d      	mov	r5, r7
 8004238:	e7d3      	b.n	80041e2 <_svfiprintf_r+0x92>
 800423a:	9a03      	ldr	r2, [sp, #12]
 800423c:	1d11      	adds	r1, r2, #4
 800423e:	6812      	ldr	r2, [r2, #0]
 8004240:	9103      	str	r1, [sp, #12]
 8004242:	2a00      	cmp	r2, #0
 8004244:	db01      	blt.n	800424a <_svfiprintf_r+0xfa>
 8004246:	9207      	str	r2, [sp, #28]
 8004248:	e004      	b.n	8004254 <_svfiprintf_r+0x104>
 800424a:	4252      	negs	r2, r2
 800424c:	f043 0302 	orr.w	r3, r3, #2
 8004250:	9207      	str	r2, [sp, #28]
 8004252:	9304      	str	r3, [sp, #16]
 8004254:	783b      	ldrb	r3, [r7, #0]
 8004256:	2b2e      	cmp	r3, #46	; 0x2e
 8004258:	d10c      	bne.n	8004274 <_svfiprintf_r+0x124>
 800425a:	787b      	ldrb	r3, [r7, #1]
 800425c:	2b2a      	cmp	r3, #42	; 0x2a
 800425e:	d133      	bne.n	80042c8 <_svfiprintf_r+0x178>
 8004260:	9b03      	ldr	r3, [sp, #12]
 8004262:	1d1a      	adds	r2, r3, #4
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	9203      	str	r2, [sp, #12]
 8004268:	2b00      	cmp	r3, #0
 800426a:	bfb8      	it	lt
 800426c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004270:	3702      	adds	r7, #2
 8004272:	9305      	str	r3, [sp, #20]
 8004274:	4d2e      	ldr	r5, [pc, #184]	; (8004330 <_svfiprintf_r+0x1e0>)
 8004276:	7839      	ldrb	r1, [r7, #0]
 8004278:	2203      	movs	r2, #3
 800427a:	4628      	mov	r0, r5
 800427c:	f7fb ffb8 	bl	80001f0 <memchr>
 8004280:	b138      	cbz	r0, 8004292 <_svfiprintf_r+0x142>
 8004282:	2340      	movs	r3, #64	; 0x40
 8004284:	1b40      	subs	r0, r0, r5
 8004286:	fa03 f000 	lsl.w	r0, r3, r0
 800428a:	9b04      	ldr	r3, [sp, #16]
 800428c:	4303      	orrs	r3, r0
 800428e:	3701      	adds	r7, #1
 8004290:	9304      	str	r3, [sp, #16]
 8004292:	7839      	ldrb	r1, [r7, #0]
 8004294:	4827      	ldr	r0, [pc, #156]	; (8004334 <_svfiprintf_r+0x1e4>)
 8004296:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800429a:	2206      	movs	r2, #6
 800429c:	1c7e      	adds	r6, r7, #1
 800429e:	f7fb ffa7 	bl	80001f0 <memchr>
 80042a2:	2800      	cmp	r0, #0
 80042a4:	d038      	beq.n	8004318 <_svfiprintf_r+0x1c8>
 80042a6:	4b24      	ldr	r3, [pc, #144]	; (8004338 <_svfiprintf_r+0x1e8>)
 80042a8:	bb13      	cbnz	r3, 80042f0 <_svfiprintf_r+0x1a0>
 80042aa:	9b03      	ldr	r3, [sp, #12]
 80042ac:	3307      	adds	r3, #7
 80042ae:	f023 0307 	bic.w	r3, r3, #7
 80042b2:	3308      	adds	r3, #8
 80042b4:	9303      	str	r3, [sp, #12]
 80042b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042b8:	444b      	add	r3, r9
 80042ba:	9309      	str	r3, [sp, #36]	; 0x24
 80042bc:	e76d      	b.n	800419a <_svfiprintf_r+0x4a>
 80042be:	fb05 3202 	mla	r2, r5, r2, r3
 80042c2:	2001      	movs	r0, #1
 80042c4:	460f      	mov	r7, r1
 80042c6:	e7a6      	b.n	8004216 <_svfiprintf_r+0xc6>
 80042c8:	2300      	movs	r3, #0
 80042ca:	3701      	adds	r7, #1
 80042cc:	9305      	str	r3, [sp, #20]
 80042ce:	4619      	mov	r1, r3
 80042d0:	250a      	movs	r5, #10
 80042d2:	4638      	mov	r0, r7
 80042d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042d8:	3a30      	subs	r2, #48	; 0x30
 80042da:	2a09      	cmp	r2, #9
 80042dc:	d903      	bls.n	80042e6 <_svfiprintf_r+0x196>
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d0c8      	beq.n	8004274 <_svfiprintf_r+0x124>
 80042e2:	9105      	str	r1, [sp, #20]
 80042e4:	e7c6      	b.n	8004274 <_svfiprintf_r+0x124>
 80042e6:	fb05 2101 	mla	r1, r5, r1, r2
 80042ea:	2301      	movs	r3, #1
 80042ec:	4607      	mov	r7, r0
 80042ee:	e7f0      	b.n	80042d2 <_svfiprintf_r+0x182>
 80042f0:	ab03      	add	r3, sp, #12
 80042f2:	9300      	str	r3, [sp, #0]
 80042f4:	4622      	mov	r2, r4
 80042f6:	4b11      	ldr	r3, [pc, #68]	; (800433c <_svfiprintf_r+0x1ec>)
 80042f8:	a904      	add	r1, sp, #16
 80042fa:	4640      	mov	r0, r8
 80042fc:	f3af 8000 	nop.w
 8004300:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004304:	4681      	mov	r9, r0
 8004306:	d1d6      	bne.n	80042b6 <_svfiprintf_r+0x166>
 8004308:	89a3      	ldrh	r3, [r4, #12]
 800430a:	065b      	lsls	r3, r3, #25
 800430c:	f53f af35 	bmi.w	800417a <_svfiprintf_r+0x2a>
 8004310:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004312:	b01d      	add	sp, #116	; 0x74
 8004314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004318:	ab03      	add	r3, sp, #12
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	4622      	mov	r2, r4
 800431e:	4b07      	ldr	r3, [pc, #28]	; (800433c <_svfiprintf_r+0x1ec>)
 8004320:	a904      	add	r1, sp, #16
 8004322:	4640      	mov	r0, r8
 8004324:	f000 f882 	bl	800442c <_printf_i>
 8004328:	e7ea      	b.n	8004300 <_svfiprintf_r+0x1b0>
 800432a:	bf00      	nop
 800432c:	080048c0 	.word	0x080048c0
 8004330:	080048c6 	.word	0x080048c6
 8004334:	080048ca 	.word	0x080048ca
 8004338:	00000000 	.word	0x00000000
 800433c:	0800409d 	.word	0x0800409d

08004340 <_printf_common>:
 8004340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004344:	4691      	mov	r9, r2
 8004346:	461f      	mov	r7, r3
 8004348:	688a      	ldr	r2, [r1, #8]
 800434a:	690b      	ldr	r3, [r1, #16]
 800434c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004350:	4293      	cmp	r3, r2
 8004352:	bfb8      	it	lt
 8004354:	4613      	movlt	r3, r2
 8004356:	f8c9 3000 	str.w	r3, [r9]
 800435a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800435e:	4606      	mov	r6, r0
 8004360:	460c      	mov	r4, r1
 8004362:	b112      	cbz	r2, 800436a <_printf_common+0x2a>
 8004364:	3301      	adds	r3, #1
 8004366:	f8c9 3000 	str.w	r3, [r9]
 800436a:	6823      	ldr	r3, [r4, #0]
 800436c:	0699      	lsls	r1, r3, #26
 800436e:	bf42      	ittt	mi
 8004370:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004374:	3302      	addmi	r3, #2
 8004376:	f8c9 3000 	strmi.w	r3, [r9]
 800437a:	6825      	ldr	r5, [r4, #0]
 800437c:	f015 0506 	ands.w	r5, r5, #6
 8004380:	d107      	bne.n	8004392 <_printf_common+0x52>
 8004382:	f104 0a19 	add.w	sl, r4, #25
 8004386:	68e3      	ldr	r3, [r4, #12]
 8004388:	f8d9 2000 	ldr.w	r2, [r9]
 800438c:	1a9b      	subs	r3, r3, r2
 800438e:	42ab      	cmp	r3, r5
 8004390:	dc28      	bgt.n	80043e4 <_printf_common+0xa4>
 8004392:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004396:	6822      	ldr	r2, [r4, #0]
 8004398:	3300      	adds	r3, #0
 800439a:	bf18      	it	ne
 800439c:	2301      	movne	r3, #1
 800439e:	0692      	lsls	r2, r2, #26
 80043a0:	d42d      	bmi.n	80043fe <_printf_common+0xbe>
 80043a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043a6:	4639      	mov	r1, r7
 80043a8:	4630      	mov	r0, r6
 80043aa:	47c0      	blx	r8
 80043ac:	3001      	adds	r0, #1
 80043ae:	d020      	beq.n	80043f2 <_printf_common+0xb2>
 80043b0:	6823      	ldr	r3, [r4, #0]
 80043b2:	68e5      	ldr	r5, [r4, #12]
 80043b4:	f8d9 2000 	ldr.w	r2, [r9]
 80043b8:	f003 0306 	and.w	r3, r3, #6
 80043bc:	2b04      	cmp	r3, #4
 80043be:	bf08      	it	eq
 80043c0:	1aad      	subeq	r5, r5, r2
 80043c2:	68a3      	ldr	r3, [r4, #8]
 80043c4:	6922      	ldr	r2, [r4, #16]
 80043c6:	bf0c      	ite	eq
 80043c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043cc:	2500      	movne	r5, #0
 80043ce:	4293      	cmp	r3, r2
 80043d0:	bfc4      	itt	gt
 80043d2:	1a9b      	subgt	r3, r3, r2
 80043d4:	18ed      	addgt	r5, r5, r3
 80043d6:	f04f 0900 	mov.w	r9, #0
 80043da:	341a      	adds	r4, #26
 80043dc:	454d      	cmp	r5, r9
 80043de:	d11a      	bne.n	8004416 <_printf_common+0xd6>
 80043e0:	2000      	movs	r0, #0
 80043e2:	e008      	b.n	80043f6 <_printf_common+0xb6>
 80043e4:	2301      	movs	r3, #1
 80043e6:	4652      	mov	r2, sl
 80043e8:	4639      	mov	r1, r7
 80043ea:	4630      	mov	r0, r6
 80043ec:	47c0      	blx	r8
 80043ee:	3001      	adds	r0, #1
 80043f0:	d103      	bne.n	80043fa <_printf_common+0xba>
 80043f2:	f04f 30ff 	mov.w	r0, #4294967295
 80043f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043fa:	3501      	adds	r5, #1
 80043fc:	e7c3      	b.n	8004386 <_printf_common+0x46>
 80043fe:	18e1      	adds	r1, r4, r3
 8004400:	1c5a      	adds	r2, r3, #1
 8004402:	2030      	movs	r0, #48	; 0x30
 8004404:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004408:	4422      	add	r2, r4
 800440a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800440e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004412:	3302      	adds	r3, #2
 8004414:	e7c5      	b.n	80043a2 <_printf_common+0x62>
 8004416:	2301      	movs	r3, #1
 8004418:	4622      	mov	r2, r4
 800441a:	4639      	mov	r1, r7
 800441c:	4630      	mov	r0, r6
 800441e:	47c0      	blx	r8
 8004420:	3001      	adds	r0, #1
 8004422:	d0e6      	beq.n	80043f2 <_printf_common+0xb2>
 8004424:	f109 0901 	add.w	r9, r9, #1
 8004428:	e7d8      	b.n	80043dc <_printf_common+0x9c>
	...

0800442c <_printf_i>:
 800442c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004430:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004434:	460c      	mov	r4, r1
 8004436:	7e09      	ldrb	r1, [r1, #24]
 8004438:	b085      	sub	sp, #20
 800443a:	296e      	cmp	r1, #110	; 0x6e
 800443c:	4617      	mov	r7, r2
 800443e:	4606      	mov	r6, r0
 8004440:	4698      	mov	r8, r3
 8004442:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004444:	f000 80b3 	beq.w	80045ae <_printf_i+0x182>
 8004448:	d822      	bhi.n	8004490 <_printf_i+0x64>
 800444a:	2963      	cmp	r1, #99	; 0x63
 800444c:	d036      	beq.n	80044bc <_printf_i+0x90>
 800444e:	d80a      	bhi.n	8004466 <_printf_i+0x3a>
 8004450:	2900      	cmp	r1, #0
 8004452:	f000 80b9 	beq.w	80045c8 <_printf_i+0x19c>
 8004456:	2958      	cmp	r1, #88	; 0x58
 8004458:	f000 8083 	beq.w	8004562 <_printf_i+0x136>
 800445c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004460:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004464:	e032      	b.n	80044cc <_printf_i+0xa0>
 8004466:	2964      	cmp	r1, #100	; 0x64
 8004468:	d001      	beq.n	800446e <_printf_i+0x42>
 800446a:	2969      	cmp	r1, #105	; 0x69
 800446c:	d1f6      	bne.n	800445c <_printf_i+0x30>
 800446e:	6820      	ldr	r0, [r4, #0]
 8004470:	6813      	ldr	r3, [r2, #0]
 8004472:	0605      	lsls	r5, r0, #24
 8004474:	f103 0104 	add.w	r1, r3, #4
 8004478:	d52a      	bpl.n	80044d0 <_printf_i+0xa4>
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	6011      	str	r1, [r2, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	da03      	bge.n	800448a <_printf_i+0x5e>
 8004482:	222d      	movs	r2, #45	; 0x2d
 8004484:	425b      	negs	r3, r3
 8004486:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800448a:	486f      	ldr	r0, [pc, #444]	; (8004648 <_printf_i+0x21c>)
 800448c:	220a      	movs	r2, #10
 800448e:	e039      	b.n	8004504 <_printf_i+0xd8>
 8004490:	2973      	cmp	r1, #115	; 0x73
 8004492:	f000 809d 	beq.w	80045d0 <_printf_i+0x1a4>
 8004496:	d808      	bhi.n	80044aa <_printf_i+0x7e>
 8004498:	296f      	cmp	r1, #111	; 0x6f
 800449a:	d020      	beq.n	80044de <_printf_i+0xb2>
 800449c:	2970      	cmp	r1, #112	; 0x70
 800449e:	d1dd      	bne.n	800445c <_printf_i+0x30>
 80044a0:	6823      	ldr	r3, [r4, #0]
 80044a2:	f043 0320 	orr.w	r3, r3, #32
 80044a6:	6023      	str	r3, [r4, #0]
 80044a8:	e003      	b.n	80044b2 <_printf_i+0x86>
 80044aa:	2975      	cmp	r1, #117	; 0x75
 80044ac:	d017      	beq.n	80044de <_printf_i+0xb2>
 80044ae:	2978      	cmp	r1, #120	; 0x78
 80044b0:	d1d4      	bne.n	800445c <_printf_i+0x30>
 80044b2:	2378      	movs	r3, #120	; 0x78
 80044b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044b8:	4864      	ldr	r0, [pc, #400]	; (800464c <_printf_i+0x220>)
 80044ba:	e055      	b.n	8004568 <_printf_i+0x13c>
 80044bc:	6813      	ldr	r3, [r2, #0]
 80044be:	1d19      	adds	r1, r3, #4
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	6011      	str	r1, [r2, #0]
 80044c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044cc:	2301      	movs	r3, #1
 80044ce:	e08c      	b.n	80045ea <_printf_i+0x1be>
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	6011      	str	r1, [r2, #0]
 80044d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80044d8:	bf18      	it	ne
 80044da:	b21b      	sxthne	r3, r3
 80044dc:	e7cf      	b.n	800447e <_printf_i+0x52>
 80044de:	6813      	ldr	r3, [r2, #0]
 80044e0:	6825      	ldr	r5, [r4, #0]
 80044e2:	1d18      	adds	r0, r3, #4
 80044e4:	6010      	str	r0, [r2, #0]
 80044e6:	0628      	lsls	r0, r5, #24
 80044e8:	d501      	bpl.n	80044ee <_printf_i+0xc2>
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	e002      	b.n	80044f4 <_printf_i+0xc8>
 80044ee:	0668      	lsls	r0, r5, #25
 80044f0:	d5fb      	bpl.n	80044ea <_printf_i+0xbe>
 80044f2:	881b      	ldrh	r3, [r3, #0]
 80044f4:	4854      	ldr	r0, [pc, #336]	; (8004648 <_printf_i+0x21c>)
 80044f6:	296f      	cmp	r1, #111	; 0x6f
 80044f8:	bf14      	ite	ne
 80044fa:	220a      	movne	r2, #10
 80044fc:	2208      	moveq	r2, #8
 80044fe:	2100      	movs	r1, #0
 8004500:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004504:	6865      	ldr	r5, [r4, #4]
 8004506:	60a5      	str	r5, [r4, #8]
 8004508:	2d00      	cmp	r5, #0
 800450a:	f2c0 8095 	blt.w	8004638 <_printf_i+0x20c>
 800450e:	6821      	ldr	r1, [r4, #0]
 8004510:	f021 0104 	bic.w	r1, r1, #4
 8004514:	6021      	str	r1, [r4, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d13d      	bne.n	8004596 <_printf_i+0x16a>
 800451a:	2d00      	cmp	r5, #0
 800451c:	f040 808e 	bne.w	800463c <_printf_i+0x210>
 8004520:	4665      	mov	r5, ip
 8004522:	2a08      	cmp	r2, #8
 8004524:	d10b      	bne.n	800453e <_printf_i+0x112>
 8004526:	6823      	ldr	r3, [r4, #0]
 8004528:	07db      	lsls	r3, r3, #31
 800452a:	d508      	bpl.n	800453e <_printf_i+0x112>
 800452c:	6923      	ldr	r3, [r4, #16]
 800452e:	6862      	ldr	r2, [r4, #4]
 8004530:	429a      	cmp	r2, r3
 8004532:	bfde      	ittt	le
 8004534:	2330      	movle	r3, #48	; 0x30
 8004536:	f805 3c01 	strble.w	r3, [r5, #-1]
 800453a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800453e:	ebac 0305 	sub.w	r3, ip, r5
 8004542:	6123      	str	r3, [r4, #16]
 8004544:	f8cd 8000 	str.w	r8, [sp]
 8004548:	463b      	mov	r3, r7
 800454a:	aa03      	add	r2, sp, #12
 800454c:	4621      	mov	r1, r4
 800454e:	4630      	mov	r0, r6
 8004550:	f7ff fef6 	bl	8004340 <_printf_common>
 8004554:	3001      	adds	r0, #1
 8004556:	d14d      	bne.n	80045f4 <_printf_i+0x1c8>
 8004558:	f04f 30ff 	mov.w	r0, #4294967295
 800455c:	b005      	add	sp, #20
 800455e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004562:	4839      	ldr	r0, [pc, #228]	; (8004648 <_printf_i+0x21c>)
 8004564:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004568:	6813      	ldr	r3, [r2, #0]
 800456a:	6821      	ldr	r1, [r4, #0]
 800456c:	1d1d      	adds	r5, r3, #4
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6015      	str	r5, [r2, #0]
 8004572:	060a      	lsls	r2, r1, #24
 8004574:	d50b      	bpl.n	800458e <_printf_i+0x162>
 8004576:	07ca      	lsls	r2, r1, #31
 8004578:	bf44      	itt	mi
 800457a:	f041 0120 	orrmi.w	r1, r1, #32
 800457e:	6021      	strmi	r1, [r4, #0]
 8004580:	b91b      	cbnz	r3, 800458a <_printf_i+0x15e>
 8004582:	6822      	ldr	r2, [r4, #0]
 8004584:	f022 0220 	bic.w	r2, r2, #32
 8004588:	6022      	str	r2, [r4, #0]
 800458a:	2210      	movs	r2, #16
 800458c:	e7b7      	b.n	80044fe <_printf_i+0xd2>
 800458e:	064d      	lsls	r5, r1, #25
 8004590:	bf48      	it	mi
 8004592:	b29b      	uxthmi	r3, r3
 8004594:	e7ef      	b.n	8004576 <_printf_i+0x14a>
 8004596:	4665      	mov	r5, ip
 8004598:	fbb3 f1f2 	udiv	r1, r3, r2
 800459c:	fb02 3311 	mls	r3, r2, r1, r3
 80045a0:	5cc3      	ldrb	r3, [r0, r3]
 80045a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80045a6:	460b      	mov	r3, r1
 80045a8:	2900      	cmp	r1, #0
 80045aa:	d1f5      	bne.n	8004598 <_printf_i+0x16c>
 80045ac:	e7b9      	b.n	8004522 <_printf_i+0xf6>
 80045ae:	6813      	ldr	r3, [r2, #0]
 80045b0:	6825      	ldr	r5, [r4, #0]
 80045b2:	6961      	ldr	r1, [r4, #20]
 80045b4:	1d18      	adds	r0, r3, #4
 80045b6:	6010      	str	r0, [r2, #0]
 80045b8:	0628      	lsls	r0, r5, #24
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	d501      	bpl.n	80045c2 <_printf_i+0x196>
 80045be:	6019      	str	r1, [r3, #0]
 80045c0:	e002      	b.n	80045c8 <_printf_i+0x19c>
 80045c2:	066a      	lsls	r2, r5, #25
 80045c4:	d5fb      	bpl.n	80045be <_printf_i+0x192>
 80045c6:	8019      	strh	r1, [r3, #0]
 80045c8:	2300      	movs	r3, #0
 80045ca:	6123      	str	r3, [r4, #16]
 80045cc:	4665      	mov	r5, ip
 80045ce:	e7b9      	b.n	8004544 <_printf_i+0x118>
 80045d0:	6813      	ldr	r3, [r2, #0]
 80045d2:	1d19      	adds	r1, r3, #4
 80045d4:	6011      	str	r1, [r2, #0]
 80045d6:	681d      	ldr	r5, [r3, #0]
 80045d8:	6862      	ldr	r2, [r4, #4]
 80045da:	2100      	movs	r1, #0
 80045dc:	4628      	mov	r0, r5
 80045de:	f7fb fe07 	bl	80001f0 <memchr>
 80045e2:	b108      	cbz	r0, 80045e8 <_printf_i+0x1bc>
 80045e4:	1b40      	subs	r0, r0, r5
 80045e6:	6060      	str	r0, [r4, #4]
 80045e8:	6863      	ldr	r3, [r4, #4]
 80045ea:	6123      	str	r3, [r4, #16]
 80045ec:	2300      	movs	r3, #0
 80045ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045f2:	e7a7      	b.n	8004544 <_printf_i+0x118>
 80045f4:	6923      	ldr	r3, [r4, #16]
 80045f6:	462a      	mov	r2, r5
 80045f8:	4639      	mov	r1, r7
 80045fa:	4630      	mov	r0, r6
 80045fc:	47c0      	blx	r8
 80045fe:	3001      	adds	r0, #1
 8004600:	d0aa      	beq.n	8004558 <_printf_i+0x12c>
 8004602:	6823      	ldr	r3, [r4, #0]
 8004604:	079b      	lsls	r3, r3, #30
 8004606:	d413      	bmi.n	8004630 <_printf_i+0x204>
 8004608:	68e0      	ldr	r0, [r4, #12]
 800460a:	9b03      	ldr	r3, [sp, #12]
 800460c:	4298      	cmp	r0, r3
 800460e:	bfb8      	it	lt
 8004610:	4618      	movlt	r0, r3
 8004612:	e7a3      	b.n	800455c <_printf_i+0x130>
 8004614:	2301      	movs	r3, #1
 8004616:	464a      	mov	r2, r9
 8004618:	4639      	mov	r1, r7
 800461a:	4630      	mov	r0, r6
 800461c:	47c0      	blx	r8
 800461e:	3001      	adds	r0, #1
 8004620:	d09a      	beq.n	8004558 <_printf_i+0x12c>
 8004622:	3501      	adds	r5, #1
 8004624:	68e3      	ldr	r3, [r4, #12]
 8004626:	9a03      	ldr	r2, [sp, #12]
 8004628:	1a9b      	subs	r3, r3, r2
 800462a:	42ab      	cmp	r3, r5
 800462c:	dcf2      	bgt.n	8004614 <_printf_i+0x1e8>
 800462e:	e7eb      	b.n	8004608 <_printf_i+0x1dc>
 8004630:	2500      	movs	r5, #0
 8004632:	f104 0919 	add.w	r9, r4, #25
 8004636:	e7f5      	b.n	8004624 <_printf_i+0x1f8>
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1ac      	bne.n	8004596 <_printf_i+0x16a>
 800463c:	7803      	ldrb	r3, [r0, #0]
 800463e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004642:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004646:	e76c      	b.n	8004522 <_printf_i+0xf6>
 8004648:	080048d1 	.word	0x080048d1
 800464c:	080048e2 	.word	0x080048e2

08004650 <memcpy>:
 8004650:	b510      	push	{r4, lr}
 8004652:	1e43      	subs	r3, r0, #1
 8004654:	440a      	add	r2, r1
 8004656:	4291      	cmp	r1, r2
 8004658:	d100      	bne.n	800465c <memcpy+0xc>
 800465a:	bd10      	pop	{r4, pc}
 800465c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004660:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004664:	e7f7      	b.n	8004656 <memcpy+0x6>

08004666 <memmove>:
 8004666:	4288      	cmp	r0, r1
 8004668:	b510      	push	{r4, lr}
 800466a:	eb01 0302 	add.w	r3, r1, r2
 800466e:	d807      	bhi.n	8004680 <memmove+0x1a>
 8004670:	1e42      	subs	r2, r0, #1
 8004672:	4299      	cmp	r1, r3
 8004674:	d00a      	beq.n	800468c <memmove+0x26>
 8004676:	f811 4b01 	ldrb.w	r4, [r1], #1
 800467a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800467e:	e7f8      	b.n	8004672 <memmove+0xc>
 8004680:	4283      	cmp	r3, r0
 8004682:	d9f5      	bls.n	8004670 <memmove+0xa>
 8004684:	1881      	adds	r1, r0, r2
 8004686:	1ad2      	subs	r2, r2, r3
 8004688:	42d3      	cmn	r3, r2
 800468a:	d100      	bne.n	800468e <memmove+0x28>
 800468c:	bd10      	pop	{r4, pc}
 800468e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004692:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004696:	e7f7      	b.n	8004688 <memmove+0x22>

08004698 <_free_r>:
 8004698:	b538      	push	{r3, r4, r5, lr}
 800469a:	4605      	mov	r5, r0
 800469c:	2900      	cmp	r1, #0
 800469e:	d045      	beq.n	800472c <_free_r+0x94>
 80046a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046a4:	1f0c      	subs	r4, r1, #4
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	bfb8      	it	lt
 80046aa:	18e4      	addlt	r4, r4, r3
 80046ac:	f000 f8d2 	bl	8004854 <__malloc_lock>
 80046b0:	4a1f      	ldr	r2, [pc, #124]	; (8004730 <_free_r+0x98>)
 80046b2:	6813      	ldr	r3, [r2, #0]
 80046b4:	4610      	mov	r0, r2
 80046b6:	b933      	cbnz	r3, 80046c6 <_free_r+0x2e>
 80046b8:	6063      	str	r3, [r4, #4]
 80046ba:	6014      	str	r4, [r2, #0]
 80046bc:	4628      	mov	r0, r5
 80046be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046c2:	f000 b8c8 	b.w	8004856 <__malloc_unlock>
 80046c6:	42a3      	cmp	r3, r4
 80046c8:	d90c      	bls.n	80046e4 <_free_r+0x4c>
 80046ca:	6821      	ldr	r1, [r4, #0]
 80046cc:	1862      	adds	r2, r4, r1
 80046ce:	4293      	cmp	r3, r2
 80046d0:	bf04      	itt	eq
 80046d2:	681a      	ldreq	r2, [r3, #0]
 80046d4:	685b      	ldreq	r3, [r3, #4]
 80046d6:	6063      	str	r3, [r4, #4]
 80046d8:	bf04      	itt	eq
 80046da:	1852      	addeq	r2, r2, r1
 80046dc:	6022      	streq	r2, [r4, #0]
 80046de:	6004      	str	r4, [r0, #0]
 80046e0:	e7ec      	b.n	80046bc <_free_r+0x24>
 80046e2:	4613      	mov	r3, r2
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	b10a      	cbz	r2, 80046ec <_free_r+0x54>
 80046e8:	42a2      	cmp	r2, r4
 80046ea:	d9fa      	bls.n	80046e2 <_free_r+0x4a>
 80046ec:	6819      	ldr	r1, [r3, #0]
 80046ee:	1858      	adds	r0, r3, r1
 80046f0:	42a0      	cmp	r0, r4
 80046f2:	d10b      	bne.n	800470c <_free_r+0x74>
 80046f4:	6820      	ldr	r0, [r4, #0]
 80046f6:	4401      	add	r1, r0
 80046f8:	1858      	adds	r0, r3, r1
 80046fa:	4282      	cmp	r2, r0
 80046fc:	6019      	str	r1, [r3, #0]
 80046fe:	d1dd      	bne.n	80046bc <_free_r+0x24>
 8004700:	6810      	ldr	r0, [r2, #0]
 8004702:	6852      	ldr	r2, [r2, #4]
 8004704:	605a      	str	r2, [r3, #4]
 8004706:	4401      	add	r1, r0
 8004708:	6019      	str	r1, [r3, #0]
 800470a:	e7d7      	b.n	80046bc <_free_r+0x24>
 800470c:	d902      	bls.n	8004714 <_free_r+0x7c>
 800470e:	230c      	movs	r3, #12
 8004710:	602b      	str	r3, [r5, #0]
 8004712:	e7d3      	b.n	80046bc <_free_r+0x24>
 8004714:	6820      	ldr	r0, [r4, #0]
 8004716:	1821      	adds	r1, r4, r0
 8004718:	428a      	cmp	r2, r1
 800471a:	bf04      	itt	eq
 800471c:	6811      	ldreq	r1, [r2, #0]
 800471e:	6852      	ldreq	r2, [r2, #4]
 8004720:	6062      	str	r2, [r4, #4]
 8004722:	bf04      	itt	eq
 8004724:	1809      	addeq	r1, r1, r0
 8004726:	6021      	streq	r1, [r4, #0]
 8004728:	605c      	str	r4, [r3, #4]
 800472a:	e7c7      	b.n	80046bc <_free_r+0x24>
 800472c:	bd38      	pop	{r3, r4, r5, pc}
 800472e:	bf00      	nop
 8004730:	20000090 	.word	0x20000090

08004734 <_malloc_r>:
 8004734:	b570      	push	{r4, r5, r6, lr}
 8004736:	1ccd      	adds	r5, r1, #3
 8004738:	f025 0503 	bic.w	r5, r5, #3
 800473c:	3508      	adds	r5, #8
 800473e:	2d0c      	cmp	r5, #12
 8004740:	bf38      	it	cc
 8004742:	250c      	movcc	r5, #12
 8004744:	2d00      	cmp	r5, #0
 8004746:	4606      	mov	r6, r0
 8004748:	db01      	blt.n	800474e <_malloc_r+0x1a>
 800474a:	42a9      	cmp	r1, r5
 800474c:	d903      	bls.n	8004756 <_malloc_r+0x22>
 800474e:	230c      	movs	r3, #12
 8004750:	6033      	str	r3, [r6, #0]
 8004752:	2000      	movs	r0, #0
 8004754:	bd70      	pop	{r4, r5, r6, pc}
 8004756:	f000 f87d 	bl	8004854 <__malloc_lock>
 800475a:	4a21      	ldr	r2, [pc, #132]	; (80047e0 <_malloc_r+0xac>)
 800475c:	6814      	ldr	r4, [r2, #0]
 800475e:	4621      	mov	r1, r4
 8004760:	b991      	cbnz	r1, 8004788 <_malloc_r+0x54>
 8004762:	4c20      	ldr	r4, [pc, #128]	; (80047e4 <_malloc_r+0xb0>)
 8004764:	6823      	ldr	r3, [r4, #0]
 8004766:	b91b      	cbnz	r3, 8004770 <_malloc_r+0x3c>
 8004768:	4630      	mov	r0, r6
 800476a:	f000 f863 	bl	8004834 <_sbrk_r>
 800476e:	6020      	str	r0, [r4, #0]
 8004770:	4629      	mov	r1, r5
 8004772:	4630      	mov	r0, r6
 8004774:	f000 f85e 	bl	8004834 <_sbrk_r>
 8004778:	1c43      	adds	r3, r0, #1
 800477a:	d124      	bne.n	80047c6 <_malloc_r+0x92>
 800477c:	230c      	movs	r3, #12
 800477e:	6033      	str	r3, [r6, #0]
 8004780:	4630      	mov	r0, r6
 8004782:	f000 f868 	bl	8004856 <__malloc_unlock>
 8004786:	e7e4      	b.n	8004752 <_malloc_r+0x1e>
 8004788:	680b      	ldr	r3, [r1, #0]
 800478a:	1b5b      	subs	r3, r3, r5
 800478c:	d418      	bmi.n	80047c0 <_malloc_r+0x8c>
 800478e:	2b0b      	cmp	r3, #11
 8004790:	d90f      	bls.n	80047b2 <_malloc_r+0x7e>
 8004792:	600b      	str	r3, [r1, #0]
 8004794:	50cd      	str	r5, [r1, r3]
 8004796:	18cc      	adds	r4, r1, r3
 8004798:	4630      	mov	r0, r6
 800479a:	f000 f85c 	bl	8004856 <__malloc_unlock>
 800479e:	f104 000b 	add.w	r0, r4, #11
 80047a2:	1d23      	adds	r3, r4, #4
 80047a4:	f020 0007 	bic.w	r0, r0, #7
 80047a8:	1ac3      	subs	r3, r0, r3
 80047aa:	d0d3      	beq.n	8004754 <_malloc_r+0x20>
 80047ac:	425a      	negs	r2, r3
 80047ae:	50e2      	str	r2, [r4, r3]
 80047b0:	e7d0      	b.n	8004754 <_malloc_r+0x20>
 80047b2:	428c      	cmp	r4, r1
 80047b4:	684b      	ldr	r3, [r1, #4]
 80047b6:	bf16      	itet	ne
 80047b8:	6063      	strne	r3, [r4, #4]
 80047ba:	6013      	streq	r3, [r2, #0]
 80047bc:	460c      	movne	r4, r1
 80047be:	e7eb      	b.n	8004798 <_malloc_r+0x64>
 80047c0:	460c      	mov	r4, r1
 80047c2:	6849      	ldr	r1, [r1, #4]
 80047c4:	e7cc      	b.n	8004760 <_malloc_r+0x2c>
 80047c6:	1cc4      	adds	r4, r0, #3
 80047c8:	f024 0403 	bic.w	r4, r4, #3
 80047cc:	42a0      	cmp	r0, r4
 80047ce:	d005      	beq.n	80047dc <_malloc_r+0xa8>
 80047d0:	1a21      	subs	r1, r4, r0
 80047d2:	4630      	mov	r0, r6
 80047d4:	f000 f82e 	bl	8004834 <_sbrk_r>
 80047d8:	3001      	adds	r0, #1
 80047da:	d0cf      	beq.n	800477c <_malloc_r+0x48>
 80047dc:	6025      	str	r5, [r4, #0]
 80047de:	e7db      	b.n	8004798 <_malloc_r+0x64>
 80047e0:	20000090 	.word	0x20000090
 80047e4:	20000094 	.word	0x20000094

080047e8 <_realloc_r>:
 80047e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ea:	4607      	mov	r7, r0
 80047ec:	4614      	mov	r4, r2
 80047ee:	460e      	mov	r6, r1
 80047f0:	b921      	cbnz	r1, 80047fc <_realloc_r+0x14>
 80047f2:	4611      	mov	r1, r2
 80047f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80047f8:	f7ff bf9c 	b.w	8004734 <_malloc_r>
 80047fc:	b922      	cbnz	r2, 8004808 <_realloc_r+0x20>
 80047fe:	f7ff ff4b 	bl	8004698 <_free_r>
 8004802:	4625      	mov	r5, r4
 8004804:	4628      	mov	r0, r5
 8004806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004808:	f000 f826 	bl	8004858 <_malloc_usable_size_r>
 800480c:	42a0      	cmp	r0, r4
 800480e:	d20f      	bcs.n	8004830 <_realloc_r+0x48>
 8004810:	4621      	mov	r1, r4
 8004812:	4638      	mov	r0, r7
 8004814:	f7ff ff8e 	bl	8004734 <_malloc_r>
 8004818:	4605      	mov	r5, r0
 800481a:	2800      	cmp	r0, #0
 800481c:	d0f2      	beq.n	8004804 <_realloc_r+0x1c>
 800481e:	4631      	mov	r1, r6
 8004820:	4622      	mov	r2, r4
 8004822:	f7ff ff15 	bl	8004650 <memcpy>
 8004826:	4631      	mov	r1, r6
 8004828:	4638      	mov	r0, r7
 800482a:	f7ff ff35 	bl	8004698 <_free_r>
 800482e:	e7e9      	b.n	8004804 <_realloc_r+0x1c>
 8004830:	4635      	mov	r5, r6
 8004832:	e7e7      	b.n	8004804 <_realloc_r+0x1c>

08004834 <_sbrk_r>:
 8004834:	b538      	push	{r3, r4, r5, lr}
 8004836:	4c06      	ldr	r4, [pc, #24]	; (8004850 <_sbrk_r+0x1c>)
 8004838:	2300      	movs	r3, #0
 800483a:	4605      	mov	r5, r0
 800483c:	4608      	mov	r0, r1
 800483e:	6023      	str	r3, [r4, #0]
 8004840:	f7fb ff4c 	bl	80006dc <_sbrk>
 8004844:	1c43      	adds	r3, r0, #1
 8004846:	d102      	bne.n	800484e <_sbrk_r+0x1a>
 8004848:	6823      	ldr	r3, [r4, #0]
 800484a:	b103      	cbz	r3, 800484e <_sbrk_r+0x1a>
 800484c:	602b      	str	r3, [r5, #0]
 800484e:	bd38      	pop	{r3, r4, r5, pc}
 8004850:	20000170 	.word	0x20000170

08004854 <__malloc_lock>:
 8004854:	4770      	bx	lr

08004856 <__malloc_unlock>:
 8004856:	4770      	bx	lr

08004858 <_malloc_usable_size_r>:
 8004858:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800485c:	1f18      	subs	r0, r3, #4
 800485e:	2b00      	cmp	r3, #0
 8004860:	bfbc      	itt	lt
 8004862:	580b      	ldrlt	r3, [r1, r0]
 8004864:	18c0      	addlt	r0, r0, r3
 8004866:	4770      	bx	lr

08004868 <_init>:
 8004868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800486a:	bf00      	nop
 800486c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800486e:	bc08      	pop	{r3}
 8004870:	469e      	mov	lr, r3
 8004872:	4770      	bx	lr

08004874 <_fini>:
 8004874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004876:	bf00      	nop
 8004878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800487a:	bc08      	pop	{r3}
 800487c:	469e      	mov	lr, r3
 800487e:	4770      	bx	lr
