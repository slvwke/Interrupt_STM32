
Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003534  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080036d4  080036d4  000136d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800375c  0800375c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800375c  0800375c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800375c  0800375c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800375c  0800375c  0001375c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003760  08003760  00013760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003764  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000074  080037d8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  080037d8  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008401  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016ee  00000000  00000000  000284a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006b8  00000000  00000000  00029b98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000610  00000000  00000000  0002a250  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001aa1  00000000  00000000  0002a860  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007e7b  00000000  00000000  0002c301  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c691e  00000000  00000000  0003417c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000faa9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c84  00000000  00000000  000fab18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080036bc 	.word	0x080036bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080036bc 	.word	0x080036bc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b08a      	sub	sp, #40	; 0x28
 8000294:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000296:	f107 0314 	add.w	r3, r7, #20
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
 80002a2:	60da      	str	r2, [r3, #12]
 80002a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002a6:	4b2f      	ldr	r3, [pc, #188]	; (8000364 <MX_GPIO_Init+0xd4>)
 80002a8:	695b      	ldr	r3, [r3, #20]
 80002aa:	4a2e      	ldr	r2, [pc, #184]	; (8000364 <MX_GPIO_Init+0xd4>)
 80002ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002b0:	6153      	str	r3, [r2, #20]
 80002b2:	4b2c      	ldr	r3, [pc, #176]	; (8000364 <MX_GPIO_Init+0xd4>)
 80002b4:	695b      	ldr	r3, [r3, #20]
 80002b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80002ba:	613b      	str	r3, [r7, #16]
 80002bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002be:	4b29      	ldr	r3, [pc, #164]	; (8000364 <MX_GPIO_Init+0xd4>)
 80002c0:	695b      	ldr	r3, [r3, #20]
 80002c2:	4a28      	ldr	r2, [pc, #160]	; (8000364 <MX_GPIO_Init+0xd4>)
 80002c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002c8:	6153      	str	r3, [r2, #20]
 80002ca:	4b26      	ldr	r3, [pc, #152]	; (8000364 <MX_GPIO_Init+0xd4>)
 80002cc:	695b      	ldr	r3, [r3, #20]
 80002ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80002d2:	60fb      	str	r3, [r7, #12]
 80002d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d6:	4b23      	ldr	r3, [pc, #140]	; (8000364 <MX_GPIO_Init+0xd4>)
 80002d8:	695b      	ldr	r3, [r3, #20]
 80002da:	4a22      	ldr	r2, [pc, #136]	; (8000364 <MX_GPIO_Init+0xd4>)
 80002dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002e0:	6153      	str	r3, [r2, #20]
 80002e2:	4b20      	ldr	r3, [pc, #128]	; (8000364 <MX_GPIO_Init+0xd4>)
 80002e4:	695b      	ldr	r3, [r3, #20]
 80002e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002ea:	60bb      	str	r3, [r7, #8]
 80002ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ee:	4b1d      	ldr	r3, [pc, #116]	; (8000364 <MX_GPIO_Init+0xd4>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	4a1c      	ldr	r2, [pc, #112]	; (8000364 <MX_GPIO_Init+0xd4>)
 80002f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002f8:	6153      	str	r3, [r2, #20]
 80002fa:	4b1a      	ldr	r3, [pc, #104]	; (8000364 <MX_GPIO_Init+0xd4>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000302:	607b      	str	r3, [r7, #4]
 8000304:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000306:	2200      	movs	r2, #0
 8000308:	2120      	movs	r1, #32
 800030a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800030e:	f000 fde5 	bl	8000edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000312:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000318:	4b13      	ldr	r3, [pc, #76]	; (8000368 <MX_GPIO_Init+0xd8>)
 800031a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800031c:	2300      	movs	r3, #0
 800031e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000320:	f107 0314 	add.w	r3, r7, #20
 8000324:	4619      	mov	r1, r3
 8000326:	4811      	ldr	r0, [pc, #68]	; (800036c <MX_GPIO_Init+0xdc>)
 8000328:	f000 fc4e 	bl	8000bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800032c:	2320      	movs	r3, #32
 800032e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000330:	2301      	movs	r3, #1
 8000332:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000334:	2300      	movs	r3, #0
 8000336:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000338:	2300      	movs	r3, #0
 800033a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800033c:	f107 0314 	add.w	r3, r7, #20
 8000340:	4619      	mov	r1, r3
 8000342:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000346:	f000 fc3f 	bl	8000bc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800034a:	2200      	movs	r2, #0
 800034c:	2100      	movs	r1, #0
 800034e:	2028      	movs	r0, #40	; 0x28
 8000350:	f000 fc03 	bl	8000b5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000354:	2028      	movs	r0, #40	; 0x28
 8000356:	f000 fc1c 	bl	8000b92 <HAL_NVIC_EnableIRQ>

}
 800035a:	bf00      	nop
 800035c:	3728      	adds	r7, #40	; 0x28
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	40021000 	.word	0x40021000
 8000368:	10210000 	.word	0x10210000
 800036c:	48000800 	.word	0x48000800

08000370 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000370:	b5b0      	push	{r4, r5, r7, lr}
 8000372:	b086      	sub	sp, #24
 8000374:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000376:	f000 fa8d 	bl	8000894 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800037a:	f000 f8cf 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800037e:	f7ff ff87 	bl	8000290 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000382:	f000 f9eb 	bl	800075c <MX_USART2_UART_Init>
  {
	  static uint16_t counter; // static- zmienna statyczna nie zeruje sie po kazdej petli //uint16_t zmienna 0 – 65535 całkowitoliczbowa
		 uint8_t buf[20];
	  //HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET);

	  if (a == b) {
 8000386:	4b60      	ldr	r3, [pc, #384]	; (8000508 <main+0x198>)
 8000388:	881a      	ldrh	r2, [r3, #0]
 800038a:	4b60      	ldr	r3, [pc, #384]	; (800050c <main+0x19c>)
 800038c:	881b      	ldrh	r3, [r3, #0]
 800038e:	429a      	cmp	r2, r3
 8000390:	d119      	bne.n	80003c6 <main+0x56>
		  sprintf((char*)buf, (char*)"Numbers equal!!!\n");
 8000392:	1d3b      	adds	r3, r7, #4
 8000394:	4a5e      	ldr	r2, [pc, #376]	; (8000510 <main+0x1a0>)
 8000396:	461c      	mov	r4, r3
 8000398:	4615      	mov	r5, r2
 800039a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800039c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800039e:	682b      	ldr	r3, [r5, #0]
 80003a0:	8023      	strh	r3, [r4, #0]
		  HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), 100);
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	4618      	mov	r0, r3
 80003a6:	f7ff ff1b 	bl	80001e0 <strlen>
 80003aa:	4603      	mov	r3, r0
 80003ac:	b29a      	uxth	r2, r3
 80003ae:	1d39      	adds	r1, r7, #4
 80003b0:	2364      	movs	r3, #100	; 0x64
 80003b2:	4858      	ldr	r0, [pc, #352]	; (8000514 <main+0x1a4>)
 80003b4:	f002 f97a 	bl	80026ac <HAL_UART_Transmit>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, SET);
 80003b8:	2201      	movs	r2, #1
 80003ba:	2120      	movs	r1, #32
 80003bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003c0:	f000 fd8c 	bl	8000edc <HAL_GPIO_WritePin>
 80003c4:	e09a      	b.n	80004fc <main+0x18c>
	  }
	  else {
		  sprintf((char*)buf, (char*)"a=%d\n", a);
 80003c6:	4b50      	ldr	r3, [pc, #320]	; (8000508 <main+0x198>)
 80003c8:	881b      	ldrh	r3, [r3, #0]
 80003ca:	461a      	mov	r2, r3
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	4952      	ldr	r1, [pc, #328]	; (8000518 <main+0x1a8>)
 80003d0:	4618      	mov	r0, r3
 80003d2:	f002 fd6d 	bl	8002eb0 <siprintf>
		  HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), 100);
 80003d6:	1d3b      	adds	r3, r7, #4
 80003d8:	4618      	mov	r0, r3
 80003da:	f7ff ff01 	bl	80001e0 <strlen>
 80003de:	4603      	mov	r3, r0
 80003e0:	b29a      	uxth	r2, r3
 80003e2:	1d39      	adds	r1, r7, #4
 80003e4:	2364      	movs	r3, #100	; 0x64
 80003e6:	484b      	ldr	r0, [pc, #300]	; (8000514 <main+0x1a4>)
 80003e8:	f002 f960 	bl	80026ac <HAL_UART_Transmit>
		  sprintf((char*)buf, (char*)"a=%d\n", b);
 80003ec:	4b47      	ldr	r3, [pc, #284]	; (800050c <main+0x19c>)
 80003ee:	881b      	ldrh	r3, [r3, #0]
 80003f0:	461a      	mov	r2, r3
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	4948      	ldr	r1, [pc, #288]	; (8000518 <main+0x1a8>)
 80003f6:	4618      	mov	r0, r3
 80003f8:	f002 fd5a 	bl	8002eb0 <siprintf>
		  HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), 100);
 80003fc:	1d3b      	adds	r3, r7, #4
 80003fe:	4618      	mov	r0, r3
 8000400:	f7ff feee 	bl	80001e0 <strlen>
 8000404:	4603      	mov	r3, r0
 8000406:	b29a      	uxth	r2, r3
 8000408:	1d39      	adds	r1, r7, #4
 800040a:	2364      	movs	r3, #100	; 0x64
 800040c:	4841      	ldr	r0, [pc, #260]	; (8000514 <main+0x1a4>)
 800040e:	f002 f94d 	bl	80026ac <HAL_UART_Transmit>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET);
 8000412:	2200      	movs	r2, #0
 8000414:	2120      	movs	r1, #32
 8000416:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800041a:	f000 fd5f 	bl	8000edc <HAL_GPIO_WritePin>
		  if (a > b)
 800041e:	4b3a      	ldr	r3, [pc, #232]	; (8000508 <main+0x198>)
 8000420:	881a      	ldrh	r2, [r3, #0]
 8000422:	4b3a      	ldr	r3, [pc, #232]	; (800050c <main+0x19c>)
 8000424:	881b      	ldrh	r3, [r3, #0]
 8000426:	429a      	cmp	r2, r3
 8000428:	d934      	bls.n	8000494 <main+0x124>
		  {
			  sprintf((char*)buf, (char*)"a=%d\n", a);
 800042a:	4b37      	ldr	r3, [pc, #220]	; (8000508 <main+0x198>)
 800042c:	881b      	ldrh	r3, [r3, #0]
 800042e:	461a      	mov	r2, r3
 8000430:	1d3b      	adds	r3, r7, #4
 8000432:	4939      	ldr	r1, [pc, #228]	; (8000518 <main+0x1a8>)
 8000434:	4618      	mov	r0, r3
 8000436:	f002 fd3b 	bl	8002eb0 <siprintf>
			  HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), 100);
 800043a:	1d3b      	adds	r3, r7, #4
 800043c:	4618      	mov	r0, r3
 800043e:	f7ff fecf 	bl	80001e0 <strlen>
 8000442:	4603      	mov	r3, r0
 8000444:	b29a      	uxth	r2, r3
 8000446:	1d39      	adds	r1, r7, #4
 8000448:	2364      	movs	r3, #100	; 0x64
 800044a:	4832      	ldr	r0, [pc, #200]	; (8000514 <main+0x1a4>)
 800044c:	f002 f92e 	bl	80026ac <HAL_UART_Transmit>
			  sprintf((char*)buf, (char*)"a=%d\n", b);
 8000450:	4b2e      	ldr	r3, [pc, #184]	; (800050c <main+0x19c>)
 8000452:	881b      	ldrh	r3, [r3, #0]
 8000454:	461a      	mov	r2, r3
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	492f      	ldr	r1, [pc, #188]	; (8000518 <main+0x1a8>)
 800045a:	4618      	mov	r0, r3
 800045c:	f002 fd28 	bl	8002eb0 <siprintf>
			  HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), 100);
 8000460:	1d3b      	adds	r3, r7, #4
 8000462:	4618      	mov	r0, r3
 8000464:	f7ff febc 	bl	80001e0 <strlen>
 8000468:	4603      	mov	r3, r0
 800046a:	b29a      	uxth	r2, r3
 800046c:	1d39      	adds	r1, r7, #4
 800046e:	2364      	movs	r3, #100	; 0x64
 8000470:	4828      	ldr	r0, [pc, #160]	; (8000514 <main+0x1a4>)
 8000472:	f002 f91b 	bl	80026ac <HAL_UART_Transmit>
			  a = a - b;
 8000476:	4b24      	ldr	r3, [pc, #144]	; (8000508 <main+0x198>)
 8000478:	881a      	ldrh	r2, [r3, #0]
 800047a:	4b24      	ldr	r3, [pc, #144]	; (800050c <main+0x19c>)
 800047c:	881b      	ldrh	r3, [r3, #0]
 800047e:	1ad3      	subs	r3, r2, r3
 8000480:	b29a      	uxth	r2, r3
 8000482:	4b21      	ldr	r3, [pc, #132]	; (8000508 <main+0x198>)
 8000484:	801a      	strh	r2, [r3, #0]
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET);
 8000486:	2200      	movs	r2, #0
 8000488:	2120      	movs	r1, #32
 800048a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800048e:	f000 fd25 	bl	8000edc <HAL_GPIO_WritePin>
 8000492:	e033      	b.n	80004fc <main+0x18c>
		  }
		  else
		  {
			  sprintf((char*)buf, (char*)"a=%d\n", a);
 8000494:	4b1c      	ldr	r3, [pc, #112]	; (8000508 <main+0x198>)
 8000496:	881b      	ldrh	r3, [r3, #0]
 8000498:	461a      	mov	r2, r3
 800049a:	1d3b      	adds	r3, r7, #4
 800049c:	491e      	ldr	r1, [pc, #120]	; (8000518 <main+0x1a8>)
 800049e:	4618      	mov	r0, r3
 80004a0:	f002 fd06 	bl	8002eb0 <siprintf>
			  HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), 100);
 80004a4:	1d3b      	adds	r3, r7, #4
 80004a6:	4618      	mov	r0, r3
 80004a8:	f7ff fe9a 	bl	80001e0 <strlen>
 80004ac:	4603      	mov	r3, r0
 80004ae:	b29a      	uxth	r2, r3
 80004b0:	1d39      	adds	r1, r7, #4
 80004b2:	2364      	movs	r3, #100	; 0x64
 80004b4:	4817      	ldr	r0, [pc, #92]	; (8000514 <main+0x1a4>)
 80004b6:	f002 f8f9 	bl	80026ac <HAL_UART_Transmit>
			  sprintf((char*)buf, (char*)"a=%d\n", b);
 80004ba:	4b14      	ldr	r3, [pc, #80]	; (800050c <main+0x19c>)
 80004bc:	881b      	ldrh	r3, [r3, #0]
 80004be:	461a      	mov	r2, r3
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	4915      	ldr	r1, [pc, #84]	; (8000518 <main+0x1a8>)
 80004c4:	4618      	mov	r0, r3
 80004c6:	f002 fcf3 	bl	8002eb0 <siprintf>
			  HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), 100);
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	4618      	mov	r0, r3
 80004ce:	f7ff fe87 	bl	80001e0 <strlen>
 80004d2:	4603      	mov	r3, r0
 80004d4:	b29a      	uxth	r2, r3
 80004d6:	1d39      	adds	r1, r7, #4
 80004d8:	2364      	movs	r3, #100	; 0x64
 80004da:	480e      	ldr	r0, [pc, #56]	; (8000514 <main+0x1a4>)
 80004dc:	f002 f8e6 	bl	80026ac <HAL_UART_Transmit>
			  b = b - a;
 80004e0:	4b0a      	ldr	r3, [pc, #40]	; (800050c <main+0x19c>)
 80004e2:	881a      	ldrh	r2, [r3, #0]
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <main+0x198>)
 80004e6:	881b      	ldrh	r3, [r3, #0]
 80004e8:	1ad3      	subs	r3, r2, r3
 80004ea:	b29a      	uxth	r2, r3
 80004ec:	4b07      	ldr	r3, [pc, #28]	; (800050c <main+0x19c>)
 80004ee:	801a      	strh	r2, [r3, #0]
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET);
 80004f0:	2200      	movs	r2, #0
 80004f2:	2120      	movs	r1, #32
 80004f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f8:	f000 fcf0 	bl	8000edc <HAL_GPIO_WritePin>
		  }
	  }



HAL_Delay(1000);
 80004fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000500:	f000 fa2e 	bl	8000960 <HAL_Delay>
  {
 8000504:	e73f      	b.n	8000386 <main+0x16>
 8000506:	bf00      	nop
 8000508:	20000000 	.word	0x20000000
 800050c:	20000002 	.word	0x20000002
 8000510:	080036d4 	.word	0x080036d4
 8000514:	2000009c 	.word	0x2000009c
 8000518:	080036e8 	.word	0x080036e8

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b0a6      	sub	sp, #152	; 0x98
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000526:	2228      	movs	r2, #40	; 0x28
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f002 fcb8 	bl	8002ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000540:	1d3b      	adds	r3, r7, #4
 8000542:	2258      	movs	r2, #88	; 0x58
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f002 fcaa 	bl	8002ea0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800054c:	2302      	movs	r3, #2
 800054e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000550:	2301      	movs	r3, #1
 8000552:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000554:	2310      	movs	r3, #16
 8000556:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055a:	2302      	movs	r3, #2
 800055c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000560:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000564:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000568:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800056c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000570:	2300      	movs	r3, #0
 8000572:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000576:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800057a:	4618      	mov	r0, r3
 800057c:	f000 fcde 	bl	8000f3c <HAL_RCC_OscConfig>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000586:	f000 f83f 	bl	8000608 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058a:	230f      	movs	r3, #15
 800058c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058e:	2302      	movs	r3, #2
 8000590:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000596:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800059a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005a0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80005a4:	2102      	movs	r1, #2
 80005a6:	4618      	mov	r0, r3
 80005a8:	f001 fbde 	bl	8001d68 <HAL_RCC_ClockConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005b2:	f000 f829 	bl	8000608 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 80005b6:	2382      	movs	r3, #130	; 0x82
 80005b8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80005be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	4618      	mov	r0, r3
 80005c8:	f001 fe04 	bl	80021d4 <HAL_RCCEx_PeriphCLKConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80005d2:	f000 f819 	bl	8000608 <Error_Handler>
  }
}
 80005d6:	bf00      	nop
 80005d8:	3798      	adds	r7, #152	; 0x98
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
	...

080005e0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	80fb      	strh	r3, [r7, #6]
a = a+6;
 80005ea:	4b06      	ldr	r3, [pc, #24]	; (8000604 <HAL_GPIO_EXTI_Callback+0x24>)
 80005ec:	881b      	ldrh	r3, [r3, #0]
 80005ee:	3306      	adds	r3, #6
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	4b04      	ldr	r3, [pc, #16]	; (8000604 <HAL_GPIO_EXTI_Callback+0x24>)
 80005f4:	801a      	strh	r2, [r3, #0]
}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	20000000 	.word	0x20000000

08000608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
	...

08000618 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800061e:	4b0f      	ldr	r3, [pc, #60]	; (800065c <HAL_MspInit+0x44>)
 8000620:	699b      	ldr	r3, [r3, #24]
 8000622:	4a0e      	ldr	r2, [pc, #56]	; (800065c <HAL_MspInit+0x44>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6193      	str	r3, [r2, #24]
 800062a:	4b0c      	ldr	r3, [pc, #48]	; (800065c <HAL_MspInit+0x44>)
 800062c:	699b      	ldr	r3, [r3, #24]
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <HAL_MspInit+0x44>)
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	4a08      	ldr	r2, [pc, #32]	; (800065c <HAL_MspInit+0x44>)
 800063c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000640:	61d3      	str	r3, [r2, #28]
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <HAL_MspInit+0x44>)
 8000644:	69db      	ldr	r3, [r3, #28]
 8000646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800064e:	2007      	movs	r0, #7
 8000650:	f000 fa78 	bl	8000b44 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40021000 	.word	0x40021000

08000660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr

0800066e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800066e:	b480      	push	{r7}
 8000670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000672:	e7fe      	b.n	8000672 <HardFault_Handler+0x4>

08000674 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000678:	e7fe      	b.n	8000678 <MemManage_Handler+0x4>

0800067a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800067a:	b480      	push	{r7}
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800067e:	e7fe      	b.n	800067e <BusFault_Handler+0x4>

08000680 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000684:	e7fe      	b.n	8000684 <UsageFault_Handler+0x4>

08000686 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800068a:	bf00      	nop
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr

08000694 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr

080006a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006a2:	b480      	push	{r7}
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006a6:	bf00      	nop
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006b4:	f000 f934 	bl	8000920 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}

080006bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80006c0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80006c4:	f000 fc22 	bl	8000f0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}

080006cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006d4:	4a14      	ldr	r2, [pc, #80]	; (8000728 <_sbrk+0x5c>)
 80006d6:	4b15      	ldr	r3, [pc, #84]	; (800072c <_sbrk+0x60>)
 80006d8:	1ad3      	subs	r3, r2, r3
 80006da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006e0:	4b13      	ldr	r3, [pc, #76]	; (8000730 <_sbrk+0x64>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d102      	bne.n	80006ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <_sbrk+0x64>)
 80006ea:	4a12      	ldr	r2, [pc, #72]	; (8000734 <_sbrk+0x68>)
 80006ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006ee:	4b10      	ldr	r3, [pc, #64]	; (8000730 <_sbrk+0x64>)
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4413      	add	r3, r2
 80006f6:	693a      	ldr	r2, [r7, #16]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d207      	bcs.n	800070c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006fc:	f002 fba6 	bl	8002e4c <__errno>
 8000700:	4602      	mov	r2, r0
 8000702:	230c      	movs	r3, #12
 8000704:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000706:	f04f 33ff 	mov.w	r3, #4294967295
 800070a:	e009      	b.n	8000720 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800070c:	4b08      	ldr	r3, [pc, #32]	; (8000730 <_sbrk+0x64>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000712:	4b07      	ldr	r3, [pc, #28]	; (8000730 <_sbrk+0x64>)
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4413      	add	r3, r2
 800071a:	4a05      	ldr	r2, [pc, #20]	; (8000730 <_sbrk+0x64>)
 800071c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800071e:	68fb      	ldr	r3, [r7, #12]
}
 8000720:	4618      	mov	r0, r3
 8000722:	3718      	adds	r7, #24
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20010000 	.word	0x20010000
 800072c:	00000400 	.word	0x00000400
 8000730:	20000090 	.word	0x20000090
 8000734:	20000128 	.word	0x20000128

08000738 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <SystemInit+0x20>)
 800073e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000742:	4a05      	ldr	r2, [pc, #20]	; (8000758 <SystemInit+0x20>)
 8000744:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000748:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000760:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <MX_USART2_UART_Init+0x58>)
 8000762:	4a15      	ldr	r2, [pc, #84]	; (80007b8 <MX_USART2_UART_Init+0x5c>)
 8000764:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000766:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <MX_USART2_UART_Init+0x58>)
 8000768:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800076c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_USART2_UART_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <MX_USART2_UART_Init+0x58>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_USART2_UART_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_USART2_UART_Init+0x58>)
 8000782:	220c      	movs	r2, #12
 8000784:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <MX_USART2_UART_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800078c:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_USART2_UART_Init+0x58>)
 800078e:	2200      	movs	r2, #0
 8000790:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <MX_USART2_UART_Init+0x58>)
 8000794:	2200      	movs	r2, #0
 8000796:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_USART2_UART_Init+0x58>)
 800079a:	2200      	movs	r2, #0
 800079c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_USART2_UART_Init+0x58>)
 80007a0:	f001 ff36 	bl	8002610 <HAL_UART_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007aa:	f7ff ff2d 	bl	8000608 <Error_Handler>
  }

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	2000009c 	.word	0x2000009c
 80007b8:	40004400 	.word	0x40004400

080007bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	; 0x28
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a17      	ldr	r2, [pc, #92]	; (8000838 <HAL_UART_MspInit+0x7c>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d128      	bne.n	8000830 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007de:	4b17      	ldr	r3, [pc, #92]	; (800083c <HAL_UART_MspInit+0x80>)
 80007e0:	69db      	ldr	r3, [r3, #28]
 80007e2:	4a16      	ldr	r2, [pc, #88]	; (800083c <HAL_UART_MspInit+0x80>)
 80007e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e8:	61d3      	str	r3, [r2, #28]
 80007ea:	4b14      	ldr	r3, [pc, #80]	; (800083c <HAL_UART_MspInit+0x80>)
 80007ec:	69db      	ldr	r3, [r3, #28]
 80007ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	4b11      	ldr	r3, [pc, #68]	; (800083c <HAL_UART_MspInit+0x80>)
 80007f8:	695b      	ldr	r3, [r3, #20]
 80007fa:	4a10      	ldr	r2, [pc, #64]	; (800083c <HAL_UART_MspInit+0x80>)
 80007fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000800:	6153      	str	r3, [r2, #20]
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <HAL_UART_MspInit+0x80>)
 8000804:	695b      	ldr	r3, [r3, #20]
 8000806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800080e:	230c      	movs	r3, #12
 8000810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000812:	2302      	movs	r3, #2
 8000814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800081e:	2307      	movs	r3, #7
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	4619      	mov	r1, r3
 8000828:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800082c:	f000 f9cc 	bl	8000bc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000830:	bf00      	nop
 8000832:	3728      	adds	r7, #40	; 0x28
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40004400 	.word	0x40004400
 800083c:	40021000 	.word	0x40021000

08000840 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000840:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000878 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000844:	480d      	ldr	r0, [pc, #52]	; (800087c <LoopForever+0x6>)
  ldr r1, =_edata
 8000846:	490e      	ldr	r1, [pc, #56]	; (8000880 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000848:	4a0e      	ldr	r2, [pc, #56]	; (8000884 <LoopForever+0xe>)
  movs r3, #0
 800084a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800084c:	e002      	b.n	8000854 <LoopCopyDataInit>

0800084e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800084e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000852:	3304      	adds	r3, #4

08000854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000858:	d3f9      	bcc.n	800084e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800085a:	4a0b      	ldr	r2, [pc, #44]	; (8000888 <LoopForever+0x12>)
  ldr r4, =_ebss
 800085c:	4c0b      	ldr	r4, [pc, #44]	; (800088c <LoopForever+0x16>)
  movs r3, #0
 800085e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000860:	e001      	b.n	8000866 <LoopFillZerobss>

08000862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000864:	3204      	adds	r2, #4

08000866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000868:	d3fb      	bcc.n	8000862 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800086a:	f7ff ff65 	bl	8000738 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800086e:	f002 faf3 	bl	8002e58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000872:	f7ff fd7d 	bl	8000370 <main>

08000876 <LoopForever>:

LoopForever:
    b LoopForever
 8000876:	e7fe      	b.n	8000876 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000878:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800087c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000880:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000884:	08003764 	.word	0x08003764
  ldr r2, =_sbss
 8000888:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800088c:	20000128 	.word	0x20000128

08000890 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000890:	e7fe      	b.n	8000890 <ADC1_2_IRQHandler>
	...

08000894 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000898:	4b08      	ldr	r3, [pc, #32]	; (80008bc <HAL_Init+0x28>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a07      	ldr	r2, [pc, #28]	; (80008bc <HAL_Init+0x28>)
 800089e:	f043 0310 	orr.w	r3, r3, #16
 80008a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a4:	2003      	movs	r0, #3
 80008a6:	f000 f94d 	bl	8000b44 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008aa:	2000      	movs	r0, #0
 80008ac:	f000 f808 	bl	80008c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008b0:	f7ff feb2 	bl	8000618 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008b4:	2300      	movs	r3, #0
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40022000 	.word	0x40022000

080008c0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <HAL_InitTick+0x54>)
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <HAL_InitTick+0x58>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	4619      	mov	r1, r3
 80008d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008da:	fbb2 f3f3 	udiv	r3, r2, r3
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 f965 	bl	8000bae <HAL_SYSTICK_Config>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ea:	2301      	movs	r3, #1
 80008ec:	e00e      	b.n	800090c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2b0f      	cmp	r3, #15
 80008f2:	d80a      	bhi.n	800090a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008f4:	2200      	movs	r2, #0
 80008f6:	6879      	ldr	r1, [r7, #4]
 80008f8:	f04f 30ff 	mov.w	r0, #4294967295
 80008fc:	f000 f92d 	bl	8000b5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000900:	4a06      	ldr	r2, [pc, #24]	; (800091c <HAL_InitTick+0x5c>)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000906:	2300      	movs	r3, #0
 8000908:	e000      	b.n	800090c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800090a:	2301      	movs	r3, #1
}
 800090c:	4618      	mov	r0, r3
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000004 	.word	0x20000004
 8000918:	2000000c 	.word	0x2000000c
 800091c:	20000008 	.word	0x20000008

08000920 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <HAL_IncTick+0x20>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	461a      	mov	r2, r3
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <HAL_IncTick+0x24>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4413      	add	r3, r2
 8000930:	4a04      	ldr	r2, [pc, #16]	; (8000944 <HAL_IncTick+0x24>)
 8000932:	6013      	str	r3, [r2, #0]
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	2000000c 	.word	0x2000000c
 8000944:	20000120 	.word	0x20000120

08000948 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  return uwTick;  
 800094c:	4b03      	ldr	r3, [pc, #12]	; (800095c <HAL_GetTick+0x14>)
 800094e:	681b      	ldr	r3, [r3, #0]
}
 8000950:	4618      	mov	r0, r3
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	20000120 	.word	0x20000120

08000960 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000968:	f7ff ffee 	bl	8000948 <HAL_GetTick>
 800096c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000978:	d005      	beq.n	8000986 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <HAL_Delay+0x40>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	461a      	mov	r2, r3
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	4413      	add	r3, r2
 8000984:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000986:	bf00      	nop
 8000988:	f7ff ffde 	bl	8000948 <HAL_GetTick>
 800098c:	4602      	mov	r2, r0
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	68fa      	ldr	r2, [r7, #12]
 8000994:	429a      	cmp	r2, r3
 8000996:	d8f7      	bhi.n	8000988 <HAL_Delay+0x28>
  {
  }
}
 8000998:	bf00      	nop
 800099a:	3710      	adds	r7, #16
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	2000000c 	.word	0x2000000c

080009a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	f003 0307 	and.w	r3, r3, #7
 80009b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009b4:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <__NVIC_SetPriorityGrouping+0x44>)
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ba:	68ba      	ldr	r2, [r7, #8]
 80009bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009c0:	4013      	ands	r3, r2
 80009c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009d6:	4a04      	ldr	r2, [pc, #16]	; (80009e8 <__NVIC_SetPriorityGrouping+0x44>)
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	60d3      	str	r3, [r2, #12]
}
 80009dc:	bf00      	nop
 80009de:	3714      	adds	r7, #20
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009f0:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <__NVIC_GetPriorityGrouping+0x18>)
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	0a1b      	lsrs	r3, r3, #8
 80009f6:	f003 0307 	and.w	r3, r3, #7
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	db0b      	blt.n	8000a32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	f003 021f 	and.w	r2, r3, #31
 8000a20:	4907      	ldr	r1, [pc, #28]	; (8000a40 <__NVIC_EnableIRQ+0x38>)
 8000a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a26:	095b      	lsrs	r3, r3, #5
 8000a28:	2001      	movs	r0, #1
 8000a2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	e000e100 	.word	0xe000e100

08000a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	6039      	str	r1, [r7, #0]
 8000a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	db0a      	blt.n	8000a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	b2da      	uxtb	r2, r3
 8000a5c:	490c      	ldr	r1, [pc, #48]	; (8000a90 <__NVIC_SetPriority+0x4c>)
 8000a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a62:	0112      	lsls	r2, r2, #4
 8000a64:	b2d2      	uxtb	r2, r2
 8000a66:	440b      	add	r3, r1
 8000a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a6c:	e00a      	b.n	8000a84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	4908      	ldr	r1, [pc, #32]	; (8000a94 <__NVIC_SetPriority+0x50>)
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	f003 030f 	and.w	r3, r3, #15
 8000a7a:	3b04      	subs	r3, #4
 8000a7c:	0112      	lsls	r2, r2, #4
 8000a7e:	b2d2      	uxtb	r2, r2
 8000a80:	440b      	add	r3, r1
 8000a82:	761a      	strb	r2, [r3, #24]
}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	e000e100 	.word	0xe000e100
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b089      	sub	sp, #36	; 0x24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aac:	69fb      	ldr	r3, [r7, #28]
 8000aae:	f1c3 0307 	rsb	r3, r3, #7
 8000ab2:	2b04      	cmp	r3, #4
 8000ab4:	bf28      	it	cs
 8000ab6:	2304      	movcs	r3, #4
 8000ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	3304      	adds	r3, #4
 8000abe:	2b06      	cmp	r3, #6
 8000ac0:	d902      	bls.n	8000ac8 <NVIC_EncodePriority+0x30>
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	3b03      	subs	r3, #3
 8000ac6:	e000      	b.n	8000aca <NVIC_EncodePriority+0x32>
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000acc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad6:	43da      	mvns	r2, r3
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	401a      	ands	r2, r3
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aea:	43d9      	mvns	r1, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af0:	4313      	orrs	r3, r2
         );
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3724      	adds	r7, #36	; 0x24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
	...

08000b00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b10:	d301      	bcc.n	8000b16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b12:	2301      	movs	r3, #1
 8000b14:	e00f      	b.n	8000b36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b16:	4a0a      	ldr	r2, [pc, #40]	; (8000b40 <SysTick_Config+0x40>)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b1e:	210f      	movs	r1, #15
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295
 8000b24:	f7ff ff8e 	bl	8000a44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b28:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <SysTick_Config+0x40>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b2e:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <SysTick_Config+0x40>)
 8000b30:	2207      	movs	r2, #7
 8000b32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	e000e010 	.word	0xe000e010

08000b44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f7ff ff29 	bl	80009a4 <__NVIC_SetPriorityGrouping>
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b086      	sub	sp, #24
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	4603      	mov	r3, r0
 8000b62:	60b9      	str	r1, [r7, #8]
 8000b64:	607a      	str	r2, [r7, #4]
 8000b66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b6c:	f7ff ff3e 	bl	80009ec <__NVIC_GetPriorityGrouping>
 8000b70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	68b9      	ldr	r1, [r7, #8]
 8000b76:	6978      	ldr	r0, [r7, #20]
 8000b78:	f7ff ff8e 	bl	8000a98 <NVIC_EncodePriority>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b82:	4611      	mov	r1, r2
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff ff5d 	bl	8000a44 <__NVIC_SetPriority>
}
 8000b8a:	bf00      	nop
 8000b8c:	3718      	adds	r7, #24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b082      	sub	sp, #8
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	4603      	mov	r3, r0
 8000b9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ff31 	bl	8000a08 <__NVIC_EnableIRQ>
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f7ff ffa2 	bl	8000b00 <SysTick_Config>
 8000bbc:	4603      	mov	r3, r0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b087      	sub	sp, #28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bd6:	e160      	b.n	8000e9a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	2101      	movs	r1, #1
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	fa01 f303 	lsl.w	r3, r1, r3
 8000be4:	4013      	ands	r3, r2
 8000be6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	f000 8152 	beq.w	8000e94 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d00b      	beq.n	8000c10 <HAL_GPIO_Init+0x48>
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	d007      	beq.n	8000c10 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c04:	2b11      	cmp	r3, #17
 8000c06:	d003      	beq.n	8000c10 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	2b12      	cmp	r3, #18
 8000c0e:	d130      	bne.n	8000c72 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	2203      	movs	r2, #3
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	43db      	mvns	r3, r3
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	4013      	ands	r3, r2
 8000c26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	68da      	ldr	r2, [r3, #12]
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c46:	2201      	movs	r2, #1
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	43db      	mvns	r3, r3
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	4013      	ands	r3, r2
 8000c54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	091b      	lsrs	r3, r3, #4
 8000c5c:	f003 0201 	and.w	r2, r3, #1
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	68db      	ldr	r3, [r3, #12]
 8000c76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	2203      	movs	r2, #3
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43db      	mvns	r3, r3
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	4013      	ands	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	689a      	ldr	r2, [r3, #8]
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	d003      	beq.n	8000cb2 <HAL_GPIO_Init+0xea>
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	2b12      	cmp	r3, #18
 8000cb0:	d123      	bne.n	8000cfa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	08da      	lsrs	r2, r3, #3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	3208      	adds	r2, #8
 8000cba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	220f      	movs	r2, #15
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	43db      	mvns	r3, r3
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	691a      	ldr	r2, [r3, #16]
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	f003 0307 	and.w	r3, r3, #7
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	08da      	lsrs	r2, r3, #3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3208      	adds	r2, #8
 8000cf4:	6939      	ldr	r1, [r7, #16]
 8000cf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	2203      	movs	r2, #3
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f003 0203 	and.w	r2, r3, #3
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	f000 80ac 	beq.w	8000e94 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3c:	4b5e      	ldr	r3, [pc, #376]	; (8000eb8 <HAL_GPIO_Init+0x2f0>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	4a5d      	ldr	r2, [pc, #372]	; (8000eb8 <HAL_GPIO_Init+0x2f0>)
 8000d42:	f043 0301 	orr.w	r3, r3, #1
 8000d46:	6193      	str	r3, [r2, #24]
 8000d48:	4b5b      	ldr	r3, [pc, #364]	; (8000eb8 <HAL_GPIO_Init+0x2f0>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d54:	4a59      	ldr	r2, [pc, #356]	; (8000ebc <HAL_GPIO_Init+0x2f4>)
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	089b      	lsrs	r3, r3, #2
 8000d5a:	3302      	adds	r3, #2
 8000d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	f003 0303 	and.w	r3, r3, #3
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	220f      	movs	r2, #15
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	43db      	mvns	r3, r3
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	4013      	ands	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d7e:	d025      	beq.n	8000dcc <HAL_GPIO_Init+0x204>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a4f      	ldr	r2, [pc, #316]	; (8000ec0 <HAL_GPIO_Init+0x2f8>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d01f      	beq.n	8000dc8 <HAL_GPIO_Init+0x200>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4a4e      	ldr	r2, [pc, #312]	; (8000ec4 <HAL_GPIO_Init+0x2fc>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d019      	beq.n	8000dc4 <HAL_GPIO_Init+0x1fc>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a4d      	ldr	r2, [pc, #308]	; (8000ec8 <HAL_GPIO_Init+0x300>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d013      	beq.n	8000dc0 <HAL_GPIO_Init+0x1f8>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4a4c      	ldr	r2, [pc, #304]	; (8000ecc <HAL_GPIO_Init+0x304>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d00d      	beq.n	8000dbc <HAL_GPIO_Init+0x1f4>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a4b      	ldr	r2, [pc, #300]	; (8000ed0 <HAL_GPIO_Init+0x308>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d007      	beq.n	8000db8 <HAL_GPIO_Init+0x1f0>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	4a4a      	ldr	r2, [pc, #296]	; (8000ed4 <HAL_GPIO_Init+0x30c>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d101      	bne.n	8000db4 <HAL_GPIO_Init+0x1ec>
 8000db0:	2306      	movs	r3, #6
 8000db2:	e00c      	b.n	8000dce <HAL_GPIO_Init+0x206>
 8000db4:	2307      	movs	r3, #7
 8000db6:	e00a      	b.n	8000dce <HAL_GPIO_Init+0x206>
 8000db8:	2305      	movs	r3, #5
 8000dba:	e008      	b.n	8000dce <HAL_GPIO_Init+0x206>
 8000dbc:	2304      	movs	r3, #4
 8000dbe:	e006      	b.n	8000dce <HAL_GPIO_Init+0x206>
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	e004      	b.n	8000dce <HAL_GPIO_Init+0x206>
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	e002      	b.n	8000dce <HAL_GPIO_Init+0x206>
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e000      	b.n	8000dce <HAL_GPIO_Init+0x206>
 8000dcc:	2300      	movs	r3, #0
 8000dce:	697a      	ldr	r2, [r7, #20]
 8000dd0:	f002 0203 	and.w	r2, r2, #3
 8000dd4:	0092      	lsls	r2, r2, #2
 8000dd6:	4093      	lsls	r3, r2
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dde:	4937      	ldr	r1, [pc, #220]	; (8000ebc <HAL_GPIO_Init+0x2f4>)
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	089b      	lsrs	r3, r3, #2
 8000de4:	3302      	adds	r3, #2
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dec:	4b3a      	ldr	r3, [pc, #232]	; (8000ed8 <HAL_GPIO_Init+0x310>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	43db      	mvns	r3, r3
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d003      	beq.n	8000e10 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e10:	4a31      	ldr	r2, [pc, #196]	; (8000ed8 <HAL_GPIO_Init+0x310>)
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e16:	4b30      	ldr	r3, [pc, #192]	; (8000ed8 <HAL_GPIO_Init+0x310>)
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	4013      	ands	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d003      	beq.n	8000e3a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e3a:	4a27      	ldr	r2, [pc, #156]	; (8000ed8 <HAL_GPIO_Init+0x310>)
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e40:	4b25      	ldr	r3, [pc, #148]	; (8000ed8 <HAL_GPIO_Init+0x310>)
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d003      	beq.n	8000e64 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e64:	4a1c      	ldr	r2, [pc, #112]	; (8000ed8 <HAL_GPIO_Init+0x310>)
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e6a:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <HAL_GPIO_Init+0x310>)
 8000e6c:	68db      	ldr	r3, [r3, #12]
 8000e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	43db      	mvns	r3, r3
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	4013      	ands	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d003      	beq.n	8000e8e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e8e:	4a12      	ldr	r2, [pc, #72]	; (8000ed8 <HAL_GPIO_Init+0x310>)
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	3301      	adds	r3, #1
 8000e98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	f47f ae97 	bne.w	8000bd8 <HAL_GPIO_Init+0x10>
  }
}
 8000eaa:	bf00      	nop
 8000eac:	371c      	adds	r7, #28
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	40010000 	.word	0x40010000
 8000ec0:	48000400 	.word	0x48000400
 8000ec4:	48000800 	.word	0x48000800
 8000ec8:	48000c00 	.word	0x48000c00
 8000ecc:	48001000 	.word	0x48001000
 8000ed0:	48001400 	.word	0x48001400
 8000ed4:	48001800 	.word	0x48001800
 8000ed8:	40010400 	.word	0x40010400

08000edc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	807b      	strh	r3, [r7, #2]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000eec:	787b      	ldrb	r3, [r7, #1]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d003      	beq.n	8000efa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ef2:	887a      	ldrh	r2, [r7, #2]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ef8:	e002      	b.n	8000f00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000efa:	887a      	ldrh	r2, [r7, #2]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f18:	695a      	ldr	r2, [r3, #20]
 8000f1a:	88fb      	ldrh	r3, [r7, #6]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d006      	beq.n	8000f30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f22:	4a05      	ldr	r2, [pc, #20]	; (8000f38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f24:	88fb      	ldrh	r3, [r7, #6]
 8000f26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f28:	88fb      	ldrh	r3, [r7, #6]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff fb58 	bl	80005e0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40010400 	.word	0x40010400

08000f3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d102      	bne.n	8000f56 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	f000 bf01 	b.w	8001d58 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	f000 8160 	beq.w	8001226 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f66:	4bae      	ldr	r3, [pc, #696]	; (8001220 <HAL_RCC_OscConfig+0x2e4>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f003 030c 	and.w	r3, r3, #12
 8000f6e:	2b04      	cmp	r3, #4
 8000f70:	d00c      	beq.n	8000f8c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f72:	4bab      	ldr	r3, [pc, #684]	; (8001220 <HAL_RCC_OscConfig+0x2e4>)
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f003 030c 	and.w	r3, r3, #12
 8000f7a:	2b08      	cmp	r3, #8
 8000f7c:	d159      	bne.n	8001032 <HAL_RCC_OscConfig+0xf6>
 8000f7e:	4ba8      	ldr	r3, [pc, #672]	; (8001220 <HAL_RCC_OscConfig+0x2e4>)
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000f86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f8a:	d152      	bne.n	8001032 <HAL_RCC_OscConfig+0xf6>
 8000f8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f90:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f94:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000f98:	fa93 f3a3 	rbit	r3, r3
 8000f9c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000fa0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fa4:	fab3 f383 	clz	r3, r3
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	095b      	lsrs	r3, r3, #5
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	f043 0301 	orr.w	r3, r3, #1
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d102      	bne.n	8000fbe <HAL_RCC_OscConfig+0x82>
 8000fb8:	4b99      	ldr	r3, [pc, #612]	; (8001220 <HAL_RCC_OscConfig+0x2e4>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	e015      	b.n	8000fea <HAL_RCC_OscConfig+0xae>
 8000fbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fc2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000fca:	fa93 f3a3 	rbit	r3, r3
 8000fce:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000fd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fd6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000fda:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000fde:	fa93 f3a3 	rbit	r3, r3
 8000fe2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000fe6:	4b8e      	ldr	r3, [pc, #568]	; (8001220 <HAL_RCC_OscConfig+0x2e4>)
 8000fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fee:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000ff2:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000ff6:	fa92 f2a2 	rbit	r2, r2
 8000ffa:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000ffe:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001002:	fab2 f282 	clz	r2, r2
 8001006:	b2d2      	uxtb	r2, r2
 8001008:	f042 0220 	orr.w	r2, r2, #32
 800100c:	b2d2      	uxtb	r2, r2
 800100e:	f002 021f 	and.w	r2, r2, #31
 8001012:	2101      	movs	r1, #1
 8001014:	fa01 f202 	lsl.w	r2, r1, r2
 8001018:	4013      	ands	r3, r2
 800101a:	2b00      	cmp	r3, #0
 800101c:	f000 8102 	beq.w	8001224 <HAL_RCC_OscConfig+0x2e8>
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	f040 80fc 	bne.w	8001224 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	f000 be93 	b.w	8001d58 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800103c:	d106      	bne.n	800104c <HAL_RCC_OscConfig+0x110>
 800103e:	4b78      	ldr	r3, [pc, #480]	; (8001220 <HAL_RCC_OscConfig+0x2e4>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a77      	ldr	r2, [pc, #476]	; (8001220 <HAL_RCC_OscConfig+0x2e4>)
 8001044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001048:	6013      	str	r3, [r2, #0]
 800104a:	e030      	b.n	80010ae <HAL_RCC_OscConfig+0x172>
 800104c:	1d3b      	adds	r3, r7, #4
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d10c      	bne.n	8001070 <HAL_RCC_OscConfig+0x134>
 8001056:	4b72      	ldr	r3, [pc, #456]	; (8001220 <HAL_RCC_OscConfig+0x2e4>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a71      	ldr	r2, [pc, #452]	; (8001220 <HAL_RCC_OscConfig+0x2e4>)
 800105c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001060:	6013      	str	r3, [r2, #0]
 8001062:	4b6f      	ldr	r3, [pc, #444]	; (8001220 <HAL_RCC_OscConfig+0x2e4>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a6e      	ldr	r2, [pc, #440]	; (8001220 <HAL_RCC_OscConfig+0x2e4>)
 8001068:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800106c:	6013      	str	r3, [r2, #0]
 800106e:	e01e      	b.n	80010ae <HAL_RCC_OscConfig+0x172>
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800107a:	d10c      	bne.n	8001096 <HAL_RCC_OscConfig+0x15a>
 800107c:	4b68      	ldr	r3, [pc, #416]	; (8001220 <HAL_RCC_OscConfig+0x2e4>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a67      	ldr	r2, [pc, #412]	; (8001220 <HAL_RCC_OscConfig+0x2e4>)
 8001082:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001086:	6013      	str	r3, [r2, #0]
 8001088:	4b65      	ldr	r3, [pc, #404]	; (8001220 <HAL_RCC_OscConfig+0x2e4>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a64      	ldr	r2, [pc, #400]	; (8001220 <HAL_RCC_OscConfig+0x2e4>)
 800108e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001092:	6013      	str	r3, [r2, #0]
 8001094:	e00b      	b.n	80010ae <HAL_RCC_OscConfig+0x172>
 8001096:	4b62      	ldr	r3, [pc, #392]	; (8001220 <HAL_RCC_OscConfig+0x2e4>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a61      	ldr	r2, [pc, #388]	; (8001220 <HAL_RCC_OscConfig+0x2e4>)
 800109c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010a0:	6013      	str	r3, [r2, #0]
 80010a2:	4b5f      	ldr	r3, [pc, #380]	; (8001220 <HAL_RCC_OscConfig+0x2e4>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a5e      	ldr	r2, [pc, #376]	; (8001220 <HAL_RCC_OscConfig+0x2e4>)
 80010a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ac:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d059      	beq.n	800116c <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b8:	f7ff fc46 	bl	8000948 <HAL_GetTick>
 80010bc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010c0:	e00a      	b.n	80010d8 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010c2:	f7ff fc41 	bl	8000948 <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b64      	cmp	r3, #100	; 0x64
 80010d0:	d902      	bls.n	80010d8 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	f000 be40 	b.w	8001d58 <HAL_RCC_OscConfig+0xe1c>
 80010d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010dc:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80010e4:	fa93 f3a3 	rbit	r3, r3
 80010e8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80010ec:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010f0:	fab3 f383 	clz	r3, r3
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	095b      	lsrs	r3, r3, #5
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	f043 0301 	orr.w	r3, r3, #1
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	2b01      	cmp	r3, #1
 8001102:	d102      	bne.n	800110a <HAL_RCC_OscConfig+0x1ce>
 8001104:	4b46      	ldr	r3, [pc, #280]	; (8001220 <HAL_RCC_OscConfig+0x2e4>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	e015      	b.n	8001136 <HAL_RCC_OscConfig+0x1fa>
 800110a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800110e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001112:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001116:	fa93 f3a3 	rbit	r3, r3
 800111a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800111e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001122:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001126:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800112a:	fa93 f3a3 	rbit	r3, r3
 800112e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001132:	4b3b      	ldr	r3, [pc, #236]	; (8001220 <HAL_RCC_OscConfig+0x2e4>)
 8001134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001136:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800113a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800113e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001142:	fa92 f2a2 	rbit	r2, r2
 8001146:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800114a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800114e:	fab2 f282 	clz	r2, r2
 8001152:	b2d2      	uxtb	r2, r2
 8001154:	f042 0220 	orr.w	r2, r2, #32
 8001158:	b2d2      	uxtb	r2, r2
 800115a:	f002 021f 	and.w	r2, r2, #31
 800115e:	2101      	movs	r1, #1
 8001160:	fa01 f202 	lsl.w	r2, r1, r2
 8001164:	4013      	ands	r3, r2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d0ab      	beq.n	80010c2 <HAL_RCC_OscConfig+0x186>
 800116a:	e05c      	b.n	8001226 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800116c:	f7ff fbec 	bl	8000948 <HAL_GetTick>
 8001170:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001174:	e00a      	b.n	800118c <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001176:	f7ff fbe7 	bl	8000948 <HAL_GetTick>
 800117a:	4602      	mov	r2, r0
 800117c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	2b64      	cmp	r3, #100	; 0x64
 8001184:	d902      	bls.n	800118c <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	f000 bde6 	b.w	8001d58 <HAL_RCC_OscConfig+0xe1c>
 800118c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001190:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001194:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001198:	fa93 f3a3 	rbit	r3, r3
 800119c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80011a0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011a4:	fab3 f383 	clz	r3, r3
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	095b      	lsrs	r3, r3, #5
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	f043 0301 	orr.w	r3, r3, #1
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d102      	bne.n	80011be <HAL_RCC_OscConfig+0x282>
 80011b8:	4b19      	ldr	r3, [pc, #100]	; (8001220 <HAL_RCC_OscConfig+0x2e4>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	e015      	b.n	80011ea <HAL_RCC_OscConfig+0x2ae>
 80011be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011c2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80011ca:	fa93 f3a3 	rbit	r3, r3
 80011ce:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80011d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011d6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80011da:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80011de:	fa93 f3a3 	rbit	r3, r3
 80011e2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <HAL_RCC_OscConfig+0x2e4>)
 80011e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011ee:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80011f2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80011f6:	fa92 f2a2 	rbit	r2, r2
 80011fa:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80011fe:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001202:	fab2 f282 	clz	r2, r2
 8001206:	b2d2      	uxtb	r2, r2
 8001208:	f042 0220 	orr.w	r2, r2, #32
 800120c:	b2d2      	uxtb	r2, r2
 800120e:	f002 021f 	and.w	r2, r2, #31
 8001212:	2101      	movs	r1, #1
 8001214:	fa01 f202 	lsl.w	r2, r1, r2
 8001218:	4013      	ands	r3, r2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1ab      	bne.n	8001176 <HAL_RCC_OscConfig+0x23a>
 800121e:	e002      	b.n	8001226 <HAL_RCC_OscConfig+0x2ea>
 8001220:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0302 	and.w	r3, r3, #2
 8001230:	2b00      	cmp	r3, #0
 8001232:	f000 8170 	beq.w	8001516 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001236:	4bd0      	ldr	r3, [pc, #832]	; (8001578 <HAL_RCC_OscConfig+0x63c>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f003 030c 	and.w	r3, r3, #12
 800123e:	2b00      	cmp	r3, #0
 8001240:	d00c      	beq.n	800125c <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001242:	4bcd      	ldr	r3, [pc, #820]	; (8001578 <HAL_RCC_OscConfig+0x63c>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f003 030c 	and.w	r3, r3, #12
 800124a:	2b08      	cmp	r3, #8
 800124c:	d16d      	bne.n	800132a <HAL_RCC_OscConfig+0x3ee>
 800124e:	4bca      	ldr	r3, [pc, #808]	; (8001578 <HAL_RCC_OscConfig+0x63c>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001256:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800125a:	d166      	bne.n	800132a <HAL_RCC_OscConfig+0x3ee>
 800125c:	2302      	movs	r3, #2
 800125e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001262:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001266:	fa93 f3a3 	rbit	r3, r3
 800126a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800126e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001272:	fab3 f383 	clz	r3, r3
 8001276:	b2db      	uxtb	r3, r3
 8001278:	095b      	lsrs	r3, r3, #5
 800127a:	b2db      	uxtb	r3, r3
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b01      	cmp	r3, #1
 8001284:	d102      	bne.n	800128c <HAL_RCC_OscConfig+0x350>
 8001286:	4bbc      	ldr	r3, [pc, #752]	; (8001578 <HAL_RCC_OscConfig+0x63c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	e013      	b.n	80012b4 <HAL_RCC_OscConfig+0x378>
 800128c:	2302      	movs	r3, #2
 800128e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001292:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001296:	fa93 f3a3 	rbit	r3, r3
 800129a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800129e:	2302      	movs	r3, #2
 80012a0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80012a4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80012a8:	fa93 f3a3 	rbit	r3, r3
 80012ac:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80012b0:	4bb1      	ldr	r3, [pc, #708]	; (8001578 <HAL_RCC_OscConfig+0x63c>)
 80012b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b4:	2202      	movs	r2, #2
 80012b6:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80012ba:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80012be:	fa92 f2a2 	rbit	r2, r2
 80012c2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80012c6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80012ca:	fab2 f282 	clz	r2, r2
 80012ce:	b2d2      	uxtb	r2, r2
 80012d0:	f042 0220 	orr.w	r2, r2, #32
 80012d4:	b2d2      	uxtb	r2, r2
 80012d6:	f002 021f 	and.w	r2, r2, #31
 80012da:	2101      	movs	r1, #1
 80012dc:	fa01 f202 	lsl.w	r2, r1, r2
 80012e0:	4013      	ands	r3, r2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d007      	beq.n	80012f6 <HAL_RCC_OscConfig+0x3ba>
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d002      	beq.n	80012f6 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	f000 bd31 	b.w	8001d58 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f6:	4ba0      	ldr	r3, [pc, #640]	; (8001578 <HAL_RCC_OscConfig+0x63c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	691b      	ldr	r3, [r3, #16]
 8001304:	21f8      	movs	r1, #248	; 0xf8
 8001306:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800130a:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800130e:	fa91 f1a1 	rbit	r1, r1
 8001312:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001316:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800131a:	fab1 f181 	clz	r1, r1
 800131e:	b2c9      	uxtb	r1, r1
 8001320:	408b      	lsls	r3, r1
 8001322:	4995      	ldr	r1, [pc, #596]	; (8001578 <HAL_RCC_OscConfig+0x63c>)
 8001324:	4313      	orrs	r3, r2
 8001326:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001328:	e0f5      	b.n	8001516 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	2b00      	cmp	r3, #0
 8001332:	f000 8085 	beq.w	8001440 <HAL_RCC_OscConfig+0x504>
 8001336:	2301      	movs	r3, #1
 8001338:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001340:	fa93 f3a3 	rbit	r3, r3
 8001344:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001348:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800134c:	fab3 f383 	clz	r3, r3
 8001350:	b2db      	uxtb	r3, r3
 8001352:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001356:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	461a      	mov	r2, r3
 800135e:	2301      	movs	r3, #1
 8001360:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001362:	f7ff faf1 	bl	8000948 <HAL_GetTick>
 8001366:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800136a:	e00a      	b.n	8001382 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800136c:	f7ff faec 	bl	8000948 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d902      	bls.n	8001382 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	f000 bceb 	b.w	8001d58 <HAL_RCC_OscConfig+0xe1c>
 8001382:	2302      	movs	r3, #2
 8001384:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001388:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800138c:	fa93 f3a3 	rbit	r3, r3
 8001390:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001394:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001398:	fab3 f383 	clz	r3, r3
 800139c:	b2db      	uxtb	r3, r3
 800139e:	095b      	lsrs	r3, r3, #5
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d102      	bne.n	80013b2 <HAL_RCC_OscConfig+0x476>
 80013ac:	4b72      	ldr	r3, [pc, #456]	; (8001578 <HAL_RCC_OscConfig+0x63c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	e013      	b.n	80013da <HAL_RCC_OscConfig+0x49e>
 80013b2:	2302      	movs	r3, #2
 80013b4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80013bc:	fa93 f3a3 	rbit	r3, r3
 80013c0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80013c4:	2302      	movs	r3, #2
 80013c6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80013ca:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80013ce:	fa93 f3a3 	rbit	r3, r3
 80013d2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80013d6:	4b68      	ldr	r3, [pc, #416]	; (8001578 <HAL_RCC_OscConfig+0x63c>)
 80013d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013da:	2202      	movs	r2, #2
 80013dc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80013e0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80013e4:	fa92 f2a2 	rbit	r2, r2
 80013e8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80013ec:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80013f0:	fab2 f282 	clz	r2, r2
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	f042 0220 	orr.w	r2, r2, #32
 80013fa:	b2d2      	uxtb	r2, r2
 80013fc:	f002 021f 	and.w	r2, r2, #31
 8001400:	2101      	movs	r1, #1
 8001402:	fa01 f202 	lsl.w	r2, r1, r2
 8001406:	4013      	ands	r3, r2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d0af      	beq.n	800136c <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800140c:	4b5a      	ldr	r3, [pc, #360]	; (8001578 <HAL_RCC_OscConfig+0x63c>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001414:	1d3b      	adds	r3, r7, #4
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	21f8      	movs	r1, #248	; 0xf8
 800141c:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001420:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001424:	fa91 f1a1 	rbit	r1, r1
 8001428:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800142c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001430:	fab1 f181 	clz	r1, r1
 8001434:	b2c9      	uxtb	r1, r1
 8001436:	408b      	lsls	r3, r1
 8001438:	494f      	ldr	r1, [pc, #316]	; (8001578 <HAL_RCC_OscConfig+0x63c>)
 800143a:	4313      	orrs	r3, r2
 800143c:	600b      	str	r3, [r1, #0]
 800143e:	e06a      	b.n	8001516 <HAL_RCC_OscConfig+0x5da>
 8001440:	2301      	movs	r3, #1
 8001442:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001446:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800144a:	fa93 f3a3 	rbit	r3, r3
 800144e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001452:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001456:	fab3 f383 	clz	r3, r3
 800145a:	b2db      	uxtb	r3, r3
 800145c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001460:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	461a      	mov	r2, r3
 8001468:	2300      	movs	r3, #0
 800146a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146c:	f7ff fa6c 	bl	8000948 <HAL_GetTick>
 8001470:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001474:	e00a      	b.n	800148c <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001476:	f7ff fa67 	bl	8000948 <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d902      	bls.n	800148c <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	f000 bc66 	b.w	8001d58 <HAL_RCC_OscConfig+0xe1c>
 800148c:	2302      	movs	r3, #2
 800148e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001492:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001496:	fa93 f3a3 	rbit	r3, r3
 800149a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800149e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014a2:	fab3 f383 	clz	r3, r3
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	095b      	lsrs	r3, r3, #5
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d102      	bne.n	80014bc <HAL_RCC_OscConfig+0x580>
 80014b6:	4b30      	ldr	r3, [pc, #192]	; (8001578 <HAL_RCC_OscConfig+0x63c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	e013      	b.n	80014e4 <HAL_RCC_OscConfig+0x5a8>
 80014bc:	2302      	movs	r3, #2
 80014be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80014c6:	fa93 f3a3 	rbit	r3, r3
 80014ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80014ce:	2302      	movs	r3, #2
 80014d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80014d4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80014d8:	fa93 f3a3 	rbit	r3, r3
 80014dc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80014e0:	4b25      	ldr	r3, [pc, #148]	; (8001578 <HAL_RCC_OscConfig+0x63c>)
 80014e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e4:	2202      	movs	r2, #2
 80014e6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80014ea:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80014ee:	fa92 f2a2 	rbit	r2, r2
 80014f2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80014f6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80014fa:	fab2 f282 	clz	r2, r2
 80014fe:	b2d2      	uxtb	r2, r2
 8001500:	f042 0220 	orr.w	r2, r2, #32
 8001504:	b2d2      	uxtb	r2, r2
 8001506:	f002 021f 	and.w	r2, r2, #31
 800150a:	2101      	movs	r1, #1
 800150c:	fa01 f202 	lsl.w	r2, r1, r2
 8001510:	4013      	ands	r3, r2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1af      	bne.n	8001476 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0308 	and.w	r3, r3, #8
 8001520:	2b00      	cmp	r3, #0
 8001522:	f000 80da 	beq.w	80016da <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d069      	beq.n	8001604 <HAL_RCC_OscConfig+0x6c8>
 8001530:	2301      	movs	r3, #1
 8001532:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001536:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800153a:	fa93 f3a3 	rbit	r3, r3
 800153e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001542:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001546:	fab3 f383 	clz	r3, r3
 800154a:	b2db      	uxtb	r3, r3
 800154c:	461a      	mov	r2, r3
 800154e:	4b0b      	ldr	r3, [pc, #44]	; (800157c <HAL_RCC_OscConfig+0x640>)
 8001550:	4413      	add	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	461a      	mov	r2, r3
 8001556:	2301      	movs	r3, #1
 8001558:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800155a:	f7ff f9f5 	bl	8000948 <HAL_GetTick>
 800155e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001562:	e00d      	b.n	8001580 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001564:	f7ff f9f0 	bl	8000948 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d905      	bls.n	8001580 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e3ef      	b.n	8001d58 <HAL_RCC_OscConfig+0xe1c>
 8001578:	40021000 	.word	0x40021000
 800157c:	10908120 	.word	0x10908120
 8001580:	2302      	movs	r3, #2
 8001582:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001586:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800158a:	fa93 f2a3 	rbit	r2, r3
 800158e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001598:	2202      	movs	r2, #2
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	fa93 f2a3 	rbit	r2, r3
 80015a6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80015b0:	2202      	movs	r2, #2
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	fa93 f2a3 	rbit	r2, r3
 80015be:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80015c2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015c4:	4ba4      	ldr	r3, [pc, #656]	; (8001858 <HAL_RCC_OscConfig+0x91c>)
 80015c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015c8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80015cc:	2102      	movs	r1, #2
 80015ce:	6019      	str	r1, [r3, #0]
 80015d0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	fa93 f1a3 	rbit	r1, r3
 80015da:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80015de:	6019      	str	r1, [r3, #0]
  return result;
 80015e0:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	fab3 f383 	clz	r3, r3
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	f003 031f 	and.w	r3, r3, #31
 80015f6:	2101      	movs	r1, #1
 80015f8:	fa01 f303 	lsl.w	r3, r1, r3
 80015fc:	4013      	ands	r3, r2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d0b0      	beq.n	8001564 <HAL_RCC_OscConfig+0x628>
 8001602:	e06a      	b.n	80016da <HAL_RCC_OscConfig+0x79e>
 8001604:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001608:	2201      	movs	r2, #1
 800160a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	fa93 f2a3 	rbit	r2, r3
 8001616:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800161a:	601a      	str	r2, [r3, #0]
  return result;
 800161c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001620:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001622:	fab3 f383 	clz	r3, r3
 8001626:	b2db      	uxtb	r3, r3
 8001628:	461a      	mov	r2, r3
 800162a:	4b8c      	ldr	r3, [pc, #560]	; (800185c <HAL_RCC_OscConfig+0x920>)
 800162c:	4413      	add	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	461a      	mov	r2, r3
 8001632:	2300      	movs	r3, #0
 8001634:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001636:	f7ff f987 	bl	8000948 <HAL_GetTick>
 800163a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800163e:	e009      	b.n	8001654 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001640:	f7ff f982 	bl	8000948 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e381      	b.n	8001d58 <HAL_RCC_OscConfig+0xe1c>
 8001654:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001658:	2202      	movs	r2, #2
 800165a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	fa93 f2a3 	rbit	r2, r3
 8001666:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001670:	2202      	movs	r2, #2
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	fa93 f2a3 	rbit	r2, r3
 800167e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001688:	2202      	movs	r2, #2
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	fa93 f2a3 	rbit	r2, r3
 8001696:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800169a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800169c:	4b6e      	ldr	r3, [pc, #440]	; (8001858 <HAL_RCC_OscConfig+0x91c>)
 800169e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016a0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016a4:	2102      	movs	r1, #2
 80016a6:	6019      	str	r1, [r3, #0]
 80016a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	fa93 f1a3 	rbit	r1, r3
 80016b2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80016b6:	6019      	str	r1, [r3, #0]
  return result;
 80016b8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	fab3 f383 	clz	r3, r3
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	f003 031f 	and.w	r3, r3, #31
 80016ce:	2101      	movs	r1, #1
 80016d0:	fa01 f303 	lsl.w	r3, r1, r3
 80016d4:	4013      	ands	r3, r2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1b2      	bne.n	8001640 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0304 	and.w	r3, r3, #4
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f000 8157 	beq.w	8001998 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ea:	2300      	movs	r3, #0
 80016ec:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016f0:	4b59      	ldr	r3, [pc, #356]	; (8001858 <HAL_RCC_OscConfig+0x91c>)
 80016f2:	69db      	ldr	r3, [r3, #28]
 80016f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d112      	bne.n	8001722 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016fc:	4b56      	ldr	r3, [pc, #344]	; (8001858 <HAL_RCC_OscConfig+0x91c>)
 80016fe:	69db      	ldr	r3, [r3, #28]
 8001700:	4a55      	ldr	r2, [pc, #340]	; (8001858 <HAL_RCC_OscConfig+0x91c>)
 8001702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001706:	61d3      	str	r3, [r2, #28]
 8001708:	4b53      	ldr	r3, [pc, #332]	; (8001858 <HAL_RCC_OscConfig+0x91c>)
 800170a:	69db      	ldr	r3, [r3, #28]
 800170c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001710:	f107 030c 	add.w	r3, r7, #12
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	f107 030c 	add.w	r3, r7, #12
 800171a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800171c:	2301      	movs	r3, #1
 800171e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001722:	4b4f      	ldr	r3, [pc, #316]	; (8001860 <HAL_RCC_OscConfig+0x924>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800172a:	2b00      	cmp	r3, #0
 800172c:	d11a      	bne.n	8001764 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800172e:	4b4c      	ldr	r3, [pc, #304]	; (8001860 <HAL_RCC_OscConfig+0x924>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a4b      	ldr	r2, [pc, #300]	; (8001860 <HAL_RCC_OscConfig+0x924>)
 8001734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001738:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800173a:	f7ff f905 	bl	8000948 <HAL_GetTick>
 800173e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001742:	e009      	b.n	8001758 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001744:	f7ff f900 	bl	8000948 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b64      	cmp	r3, #100	; 0x64
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e2ff      	b.n	8001d58 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001758:	4b41      	ldr	r3, [pc, #260]	; (8001860 <HAL_RCC_OscConfig+0x924>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0ef      	beq.n	8001744 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001764:	1d3b      	adds	r3, r7, #4
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d106      	bne.n	800177c <HAL_RCC_OscConfig+0x840>
 800176e:	4b3a      	ldr	r3, [pc, #232]	; (8001858 <HAL_RCC_OscConfig+0x91c>)
 8001770:	6a1b      	ldr	r3, [r3, #32]
 8001772:	4a39      	ldr	r2, [pc, #228]	; (8001858 <HAL_RCC_OscConfig+0x91c>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	6213      	str	r3, [r2, #32]
 800177a:	e02f      	b.n	80017dc <HAL_RCC_OscConfig+0x8a0>
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d10c      	bne.n	80017a0 <HAL_RCC_OscConfig+0x864>
 8001786:	4b34      	ldr	r3, [pc, #208]	; (8001858 <HAL_RCC_OscConfig+0x91c>)
 8001788:	6a1b      	ldr	r3, [r3, #32]
 800178a:	4a33      	ldr	r2, [pc, #204]	; (8001858 <HAL_RCC_OscConfig+0x91c>)
 800178c:	f023 0301 	bic.w	r3, r3, #1
 8001790:	6213      	str	r3, [r2, #32]
 8001792:	4b31      	ldr	r3, [pc, #196]	; (8001858 <HAL_RCC_OscConfig+0x91c>)
 8001794:	6a1b      	ldr	r3, [r3, #32]
 8001796:	4a30      	ldr	r2, [pc, #192]	; (8001858 <HAL_RCC_OscConfig+0x91c>)
 8001798:	f023 0304 	bic.w	r3, r3, #4
 800179c:	6213      	str	r3, [r2, #32]
 800179e:	e01d      	b.n	80017dc <HAL_RCC_OscConfig+0x8a0>
 80017a0:	1d3b      	adds	r3, r7, #4
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	2b05      	cmp	r3, #5
 80017a8:	d10c      	bne.n	80017c4 <HAL_RCC_OscConfig+0x888>
 80017aa:	4b2b      	ldr	r3, [pc, #172]	; (8001858 <HAL_RCC_OscConfig+0x91c>)
 80017ac:	6a1b      	ldr	r3, [r3, #32]
 80017ae:	4a2a      	ldr	r2, [pc, #168]	; (8001858 <HAL_RCC_OscConfig+0x91c>)
 80017b0:	f043 0304 	orr.w	r3, r3, #4
 80017b4:	6213      	str	r3, [r2, #32]
 80017b6:	4b28      	ldr	r3, [pc, #160]	; (8001858 <HAL_RCC_OscConfig+0x91c>)
 80017b8:	6a1b      	ldr	r3, [r3, #32]
 80017ba:	4a27      	ldr	r2, [pc, #156]	; (8001858 <HAL_RCC_OscConfig+0x91c>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6213      	str	r3, [r2, #32]
 80017c2:	e00b      	b.n	80017dc <HAL_RCC_OscConfig+0x8a0>
 80017c4:	4b24      	ldr	r3, [pc, #144]	; (8001858 <HAL_RCC_OscConfig+0x91c>)
 80017c6:	6a1b      	ldr	r3, [r3, #32]
 80017c8:	4a23      	ldr	r2, [pc, #140]	; (8001858 <HAL_RCC_OscConfig+0x91c>)
 80017ca:	f023 0301 	bic.w	r3, r3, #1
 80017ce:	6213      	str	r3, [r2, #32]
 80017d0:	4b21      	ldr	r3, [pc, #132]	; (8001858 <HAL_RCC_OscConfig+0x91c>)
 80017d2:	6a1b      	ldr	r3, [r3, #32]
 80017d4:	4a20      	ldr	r2, [pc, #128]	; (8001858 <HAL_RCC_OscConfig+0x91c>)
 80017d6:	f023 0304 	bic.w	r3, r3, #4
 80017da:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017dc:	1d3b      	adds	r3, r7, #4
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d06a      	beq.n	80018bc <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e6:	f7ff f8af 	bl	8000948 <HAL_GetTick>
 80017ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ee:	e00b      	b.n	8001808 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017f0:	f7ff f8aa 	bl	8000948 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001800:	4293      	cmp	r3, r2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e2a7      	b.n	8001d58 <HAL_RCC_OscConfig+0xe1c>
 8001808:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800180c:	2202      	movs	r2, #2
 800180e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001810:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	fa93 f2a3 	rbit	r2, r3
 800181a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001824:	2202      	movs	r2, #2
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	fa93 f2a3 	rbit	r2, r3
 8001832:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001836:	601a      	str	r2, [r3, #0]
  return result;
 8001838:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800183c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800183e:	fab3 f383 	clz	r3, r3
 8001842:	b2db      	uxtb	r3, r3
 8001844:	095b      	lsrs	r3, r3, #5
 8001846:	b2db      	uxtb	r3, r3
 8001848:	f043 0302 	orr.w	r3, r3, #2
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d108      	bne.n	8001864 <HAL_RCC_OscConfig+0x928>
 8001852:	4b01      	ldr	r3, [pc, #4]	; (8001858 <HAL_RCC_OscConfig+0x91c>)
 8001854:	6a1b      	ldr	r3, [r3, #32]
 8001856:	e013      	b.n	8001880 <HAL_RCC_OscConfig+0x944>
 8001858:	40021000 	.word	0x40021000
 800185c:	10908120 	.word	0x10908120
 8001860:	40007000 	.word	0x40007000
 8001864:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001868:	2202      	movs	r2, #2
 800186a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	fa93 f2a3 	rbit	r2, r3
 8001876:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	4bc0      	ldr	r3, [pc, #768]	; (8001b80 <HAL_RCC_OscConfig+0xc44>)
 800187e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001880:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001884:	2102      	movs	r1, #2
 8001886:	6011      	str	r1, [r2, #0]
 8001888:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800188c:	6812      	ldr	r2, [r2, #0]
 800188e:	fa92 f1a2 	rbit	r1, r2
 8001892:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001896:	6011      	str	r1, [r2, #0]
  return result;
 8001898:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800189c:	6812      	ldr	r2, [r2, #0]
 800189e:	fab2 f282 	clz	r2, r2
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018a8:	b2d2      	uxtb	r2, r2
 80018aa:	f002 021f 	and.w	r2, r2, #31
 80018ae:	2101      	movs	r1, #1
 80018b0:	fa01 f202 	lsl.w	r2, r1, r2
 80018b4:	4013      	ands	r3, r2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d09a      	beq.n	80017f0 <HAL_RCC_OscConfig+0x8b4>
 80018ba:	e063      	b.n	8001984 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018bc:	f7ff f844 	bl	8000948 <HAL_GetTick>
 80018c0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c4:	e00b      	b.n	80018de <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018c6:	f7ff f83f 	bl	8000948 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e23c      	b.n	8001d58 <HAL_RCC_OscConfig+0xe1c>
 80018de:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018e2:	2202      	movs	r2, #2
 80018e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	fa93 f2a3 	rbit	r2, r3
 80018f0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018fa:	2202      	movs	r2, #2
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	fa93 f2a3 	rbit	r2, r3
 8001908:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800190c:	601a      	str	r2, [r3, #0]
  return result;
 800190e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001912:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001914:	fab3 f383 	clz	r3, r3
 8001918:	b2db      	uxtb	r3, r3
 800191a:	095b      	lsrs	r3, r3, #5
 800191c:	b2db      	uxtb	r3, r3
 800191e:	f043 0302 	orr.w	r3, r3, #2
 8001922:	b2db      	uxtb	r3, r3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d102      	bne.n	800192e <HAL_RCC_OscConfig+0x9f2>
 8001928:	4b95      	ldr	r3, [pc, #596]	; (8001b80 <HAL_RCC_OscConfig+0xc44>)
 800192a:	6a1b      	ldr	r3, [r3, #32]
 800192c:	e00d      	b.n	800194a <HAL_RCC_OscConfig+0xa0e>
 800192e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001932:	2202      	movs	r2, #2
 8001934:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001936:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	fa93 f2a3 	rbit	r2, r3
 8001940:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	4b8e      	ldr	r3, [pc, #568]	; (8001b80 <HAL_RCC_OscConfig+0xc44>)
 8001948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800194e:	2102      	movs	r1, #2
 8001950:	6011      	str	r1, [r2, #0]
 8001952:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001956:	6812      	ldr	r2, [r2, #0]
 8001958:	fa92 f1a2 	rbit	r1, r2
 800195c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001960:	6011      	str	r1, [r2, #0]
  return result;
 8001962:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001966:	6812      	ldr	r2, [r2, #0]
 8001968:	fab2 f282 	clz	r2, r2
 800196c:	b2d2      	uxtb	r2, r2
 800196e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	f002 021f 	and.w	r2, r2, #31
 8001978:	2101      	movs	r1, #1
 800197a:	fa01 f202 	lsl.w	r2, r1, r2
 800197e:	4013      	ands	r3, r2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1a0      	bne.n	80018c6 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001984:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001988:	2b01      	cmp	r3, #1
 800198a:	d105      	bne.n	8001998 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800198c:	4b7c      	ldr	r3, [pc, #496]	; (8001b80 <HAL_RCC_OscConfig+0xc44>)
 800198e:	69db      	ldr	r3, [r3, #28]
 8001990:	4a7b      	ldr	r2, [pc, #492]	; (8001b80 <HAL_RCC_OscConfig+0xc44>)
 8001992:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001996:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001998:	1d3b      	adds	r3, r7, #4
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f000 81d9 	beq.w	8001d56 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019a4:	4b76      	ldr	r3, [pc, #472]	; (8001b80 <HAL_RCC_OscConfig+0xc44>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 030c 	and.w	r3, r3, #12
 80019ac:	2b08      	cmp	r3, #8
 80019ae:	f000 81a6 	beq.w	8001cfe <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019b2:	1d3b      	adds	r3, r7, #4
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	f040 811e 	bne.w	8001bfa <HAL_RCC_OscConfig+0xcbe>
 80019be:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80019c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	fa93 f2a3 	rbit	r2, r3
 80019d2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80019d6:	601a      	str	r2, [r3, #0]
  return result;
 80019d8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80019dc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019de:	fab3 f383 	clz	r3, r3
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	461a      	mov	r2, r3
 80019f0:	2300      	movs	r3, #0
 80019f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f4:	f7fe ffa8 	bl	8000948 <HAL_GetTick>
 80019f8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019fc:	e009      	b.n	8001a12 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019fe:	f7fe ffa3 	bl	8000948 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e1a2      	b.n	8001d58 <HAL_RCC_OscConfig+0xe1c>
 8001a12:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001a16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	fa93 f2a3 	rbit	r2, r3
 8001a26:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001a2a:	601a      	str	r2, [r3, #0]
  return result;
 8001a2c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001a30:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a32:	fab3 f383 	clz	r3, r3
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	095b      	lsrs	r3, r3, #5
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d102      	bne.n	8001a4c <HAL_RCC_OscConfig+0xb10>
 8001a46:	4b4e      	ldr	r3, [pc, #312]	; (8001b80 <HAL_RCC_OscConfig+0xc44>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	e01b      	b.n	8001a84 <HAL_RCC_OscConfig+0xb48>
 8001a4c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a56:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	fa93 f2a3 	rbit	r2, r3
 8001a60:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	fa93 f2a3 	rbit	r2, r3
 8001a7a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	4b3f      	ldr	r3, [pc, #252]	; (8001b80 <HAL_RCC_OscConfig+0xc44>)
 8001a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a84:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001a88:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a8c:	6011      	str	r1, [r2, #0]
 8001a8e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001a92:	6812      	ldr	r2, [r2, #0]
 8001a94:	fa92 f1a2 	rbit	r1, r2
 8001a98:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001a9c:	6011      	str	r1, [r2, #0]
  return result;
 8001a9e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001aa2:	6812      	ldr	r2, [r2, #0]
 8001aa4:	fab2 f282 	clz	r2, r2
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	f042 0220 	orr.w	r2, r2, #32
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	f002 021f 	and.w	r2, r2, #31
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8001aba:	4013      	ands	r3, r2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d19e      	bne.n	80019fe <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ac0:	4b2f      	ldr	r3, [pc, #188]	; (8001b80 <HAL_RCC_OscConfig+0xc44>)
 8001ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac4:	f023 020f 	bic.w	r2, r3, #15
 8001ac8:	1d3b      	adds	r3, r7, #4
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ace:	492c      	ldr	r1, [pc, #176]	; (8001b80 <HAL_RCC_OscConfig+0xc44>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001ad4:	4b2a      	ldr	r3, [pc, #168]	; (8001b80 <HAL_RCC_OscConfig+0xc44>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001adc:	1d3b      	adds	r3, r7, #4
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6a19      	ldr	r1, [r3, #32]
 8001ae2:	1d3b      	adds	r3, r7, #4
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	69db      	ldr	r3, [r3, #28]
 8001ae8:	430b      	orrs	r3, r1
 8001aea:	4925      	ldr	r1, [pc, #148]	; (8001b80 <HAL_RCC_OscConfig+0xc44>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	604b      	str	r3, [r1, #4]
 8001af0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001af4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001af8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	fa93 f2a3 	rbit	r2, r3
 8001b04:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b08:	601a      	str	r2, [r3, #0]
  return result;
 8001b0a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b0e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b10:	fab3 f383 	clz	r3, r3
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b1a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	461a      	mov	r2, r3
 8001b22:	2301      	movs	r3, #1
 8001b24:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b26:	f7fe ff0f 	bl	8000948 <HAL_GetTick>
 8001b2a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b2e:	e009      	b.n	8001b44 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b30:	f7fe ff0a 	bl	8000948 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e109      	b.n	8001d58 <HAL_RCC_OscConfig+0xe1c>
 8001b44:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	fa93 f2a3 	rbit	r2, r3
 8001b58:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b5c:	601a      	str	r2, [r3, #0]
  return result;
 8001b5e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b62:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b64:	fab3 f383 	clz	r3, r3
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	095b      	lsrs	r3, r3, #5
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	f043 0301 	orr.w	r3, r3, #1
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d105      	bne.n	8001b84 <HAL_RCC_OscConfig+0xc48>
 8001b78:	4b01      	ldr	r3, [pc, #4]	; (8001b80 <HAL_RCC_OscConfig+0xc44>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	e01e      	b.n	8001bbc <HAL_RCC_OscConfig+0xc80>
 8001b7e:	bf00      	nop
 8001b80:	40021000 	.word	0x40021000
 8001b84:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	fa93 f2a3 	rbit	r2, r3
 8001b98:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ba2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	fa93 f2a3 	rbit	r2, r3
 8001bb2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	4b6a      	ldr	r3, [pc, #424]	; (8001d64 <HAL_RCC_OscConfig+0xe28>)
 8001bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001bc0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bc4:	6011      	str	r1, [r2, #0]
 8001bc6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001bca:	6812      	ldr	r2, [r2, #0]
 8001bcc:	fa92 f1a2 	rbit	r1, r2
 8001bd0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001bd4:	6011      	str	r1, [r2, #0]
  return result;
 8001bd6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001bda:	6812      	ldr	r2, [r2, #0]
 8001bdc:	fab2 f282 	clz	r2, r2
 8001be0:	b2d2      	uxtb	r2, r2
 8001be2:	f042 0220 	orr.w	r2, r2, #32
 8001be6:	b2d2      	uxtb	r2, r2
 8001be8:	f002 021f 	and.w	r2, r2, #31
 8001bec:	2101      	movs	r1, #1
 8001bee:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d09b      	beq.n	8001b30 <HAL_RCC_OscConfig+0xbf4>
 8001bf8:	e0ad      	b.n	8001d56 <HAL_RCC_OscConfig+0xe1a>
 8001bfa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001bfe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c04:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	fa93 f2a3 	rbit	r2, r3
 8001c0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c12:	601a      	str	r2, [r3, #0]
  return result;
 8001c14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c18:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c1a:	fab3 f383 	clz	r3, r3
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c24:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c30:	f7fe fe8a 	bl	8000948 <HAL_GetTick>
 8001c34:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c38:	e009      	b.n	8001c4e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c3a:	f7fe fe85 	bl	8000948 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e084      	b.n	8001d58 <HAL_RCC_OscConfig+0xe1c>
 8001c4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	fa93 f2a3 	rbit	r2, r3
 8001c62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c66:	601a      	str	r2, [r3, #0]
  return result;
 8001c68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c6c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c6e:	fab3 f383 	clz	r3, r3
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	095b      	lsrs	r3, r3, #5
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d102      	bne.n	8001c88 <HAL_RCC_OscConfig+0xd4c>
 8001c82:	4b38      	ldr	r3, [pc, #224]	; (8001d64 <HAL_RCC_OscConfig+0xe28>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	e01b      	b.n	8001cc0 <HAL_RCC_OscConfig+0xd84>
 8001c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	fa93 f2a3 	rbit	r2, r3
 8001c9c:	f107 0320 	add.w	r3, r7, #32
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	f107 031c 	add.w	r3, r7, #28
 8001ca6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	f107 031c 	add.w	r3, r7, #28
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	fa93 f2a3 	rbit	r2, r3
 8001cb6:	f107 0318 	add.w	r3, r7, #24
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	4b29      	ldr	r3, [pc, #164]	; (8001d64 <HAL_RCC_OscConfig+0xe28>)
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc0:	f107 0214 	add.w	r2, r7, #20
 8001cc4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cc8:	6011      	str	r1, [r2, #0]
 8001cca:	f107 0214 	add.w	r2, r7, #20
 8001cce:	6812      	ldr	r2, [r2, #0]
 8001cd0:	fa92 f1a2 	rbit	r1, r2
 8001cd4:	f107 0210 	add.w	r2, r7, #16
 8001cd8:	6011      	str	r1, [r2, #0]
  return result;
 8001cda:	f107 0210 	add.w	r2, r7, #16
 8001cde:	6812      	ldr	r2, [r2, #0]
 8001ce0:	fab2 f282 	clz	r2, r2
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	f042 0220 	orr.w	r2, r2, #32
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	f002 021f 	and.w	r2, r2, #31
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d19e      	bne.n	8001c3a <HAL_RCC_OscConfig+0xcfe>
 8001cfc:	e02b      	b.n	8001d56 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cfe:	1d3b      	adds	r3, r7, #4
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d101      	bne.n	8001d0c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e025      	b.n	8001d58 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d0c:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <HAL_RCC_OscConfig+0xe28>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001d14:	4b13      	ldr	r3, [pc, #76]	; (8001d64 <HAL_RCC_OscConfig+0xe28>)
 8001d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d18:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d1c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001d20:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001d24:	1d3b      	adds	r3, r7, #4
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d111      	bne.n	8001d52 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001d2e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001d32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d36:	1d3b      	adds	r3, r7, #4
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d108      	bne.n	8001d52 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001d40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d44:	f003 020f 	and.w	r2, r3, #15
 8001d48:	1d3b      	adds	r3, r7, #4
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d001      	beq.n	8001d56 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e000      	b.n	8001d58 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40021000 	.word	0x40021000

08001d68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b09e      	sub	sp, #120	; 0x78
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d72:	2300      	movs	r3, #0
 8001d74:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d101      	bne.n	8001d80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e162      	b.n	8002046 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d80:	4b90      	ldr	r3, [pc, #576]	; (8001fc4 <HAL_RCC_ClockConfig+0x25c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d910      	bls.n	8001db0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8e:	4b8d      	ldr	r3, [pc, #564]	; (8001fc4 <HAL_RCC_ClockConfig+0x25c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f023 0207 	bic.w	r2, r3, #7
 8001d96:	498b      	ldr	r1, [pc, #556]	; (8001fc4 <HAL_RCC_ClockConfig+0x25c>)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d9e:	4b89      	ldr	r3, [pc, #548]	; (8001fc4 <HAL_RCC_ClockConfig+0x25c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d001      	beq.n	8001db0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e14a      	b.n	8002046 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d008      	beq.n	8001dce <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dbc:	4b82      	ldr	r3, [pc, #520]	; (8001fc8 <HAL_RCC_ClockConfig+0x260>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	497f      	ldr	r1, [pc, #508]	; (8001fc8 <HAL_RCC_ClockConfig+0x260>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 80dc 	beq.w	8001f94 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d13c      	bne.n	8001e5e <HAL_RCC_ClockConfig+0xf6>
 8001de4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001de8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dec:	fa93 f3a3 	rbit	r3, r3
 8001df0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001df2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df4:	fab3 f383 	clz	r3, r3
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	095b      	lsrs	r3, r3, #5
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	f043 0301 	orr.w	r3, r3, #1
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d102      	bne.n	8001e0e <HAL_RCC_ClockConfig+0xa6>
 8001e08:	4b6f      	ldr	r3, [pc, #444]	; (8001fc8 <HAL_RCC_ClockConfig+0x260>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	e00f      	b.n	8001e2e <HAL_RCC_ClockConfig+0xc6>
 8001e0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e12:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e16:	fa93 f3a3 	rbit	r3, r3
 8001e1a:	667b      	str	r3, [r7, #100]	; 0x64
 8001e1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e20:	663b      	str	r3, [r7, #96]	; 0x60
 8001e22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e24:	fa93 f3a3 	rbit	r3, r3
 8001e28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e2a:	4b67      	ldr	r3, [pc, #412]	; (8001fc8 <HAL_RCC_ClockConfig+0x260>)
 8001e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e32:	65ba      	str	r2, [r7, #88]	; 0x58
 8001e34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e36:	fa92 f2a2 	rbit	r2, r2
 8001e3a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001e3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e3e:	fab2 f282 	clz	r2, r2
 8001e42:	b2d2      	uxtb	r2, r2
 8001e44:	f042 0220 	orr.w	r2, r2, #32
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	f002 021f 	and.w	r2, r2, #31
 8001e4e:	2101      	movs	r1, #1
 8001e50:	fa01 f202 	lsl.w	r2, r1, r2
 8001e54:	4013      	ands	r3, r2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d17b      	bne.n	8001f52 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e0f3      	b.n	8002046 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d13c      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0x178>
 8001e66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e6a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e6e:	fa93 f3a3 	rbit	r3, r3
 8001e72:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e76:	fab3 f383 	clz	r3, r3
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	095b      	lsrs	r3, r3, #5
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d102      	bne.n	8001e90 <HAL_RCC_ClockConfig+0x128>
 8001e8a:	4b4f      	ldr	r3, [pc, #316]	; (8001fc8 <HAL_RCC_ClockConfig+0x260>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	e00f      	b.n	8001eb0 <HAL_RCC_ClockConfig+0x148>
 8001e90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e94:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e98:	fa93 f3a3 	rbit	r3, r3
 8001e9c:	647b      	str	r3, [r7, #68]	; 0x44
 8001e9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ea2:	643b      	str	r3, [r7, #64]	; 0x40
 8001ea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ea6:	fa93 f3a3 	rbit	r3, r3
 8001eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001eac:	4b46      	ldr	r3, [pc, #280]	; (8001fc8 <HAL_RCC_ClockConfig+0x260>)
 8001eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eb4:	63ba      	str	r2, [r7, #56]	; 0x38
 8001eb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001eb8:	fa92 f2a2 	rbit	r2, r2
 8001ebc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001ebe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ec0:	fab2 f282 	clz	r2, r2
 8001ec4:	b2d2      	uxtb	r2, r2
 8001ec6:	f042 0220 	orr.w	r2, r2, #32
 8001eca:	b2d2      	uxtb	r2, r2
 8001ecc:	f002 021f 	and.w	r2, r2, #31
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d13a      	bne.n	8001f52 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e0b2      	b.n	8002046 <HAL_RCC_ClockConfig+0x2de>
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ee6:	fa93 f3a3 	rbit	r3, r3
 8001eea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eee:	fab3 f383 	clz	r3, r3
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	095b      	lsrs	r3, r3, #5
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d102      	bne.n	8001f08 <HAL_RCC_ClockConfig+0x1a0>
 8001f02:	4b31      	ldr	r3, [pc, #196]	; (8001fc8 <HAL_RCC_ClockConfig+0x260>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	e00d      	b.n	8001f24 <HAL_RCC_ClockConfig+0x1bc>
 8001f08:	2302      	movs	r3, #2
 8001f0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f0e:	fa93 f3a3 	rbit	r3, r3
 8001f12:	627b      	str	r3, [r7, #36]	; 0x24
 8001f14:	2302      	movs	r3, #2
 8001f16:	623b      	str	r3, [r7, #32]
 8001f18:	6a3b      	ldr	r3, [r7, #32]
 8001f1a:	fa93 f3a3 	rbit	r3, r3
 8001f1e:	61fb      	str	r3, [r7, #28]
 8001f20:	4b29      	ldr	r3, [pc, #164]	; (8001fc8 <HAL_RCC_ClockConfig+0x260>)
 8001f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f24:	2202      	movs	r2, #2
 8001f26:	61ba      	str	r2, [r7, #24]
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	fa92 f2a2 	rbit	r2, r2
 8001f2e:	617a      	str	r2, [r7, #20]
  return result;
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	fab2 f282 	clz	r2, r2
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	f042 0220 	orr.w	r2, r2, #32
 8001f3c:	b2d2      	uxtb	r2, r2
 8001f3e:	f002 021f 	and.w	r2, r2, #31
 8001f42:	2101      	movs	r1, #1
 8001f44:	fa01 f202 	lsl.w	r2, r1, r2
 8001f48:	4013      	ands	r3, r2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e079      	b.n	8002046 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f52:	4b1d      	ldr	r3, [pc, #116]	; (8001fc8 <HAL_RCC_ClockConfig+0x260>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f023 0203 	bic.w	r2, r3, #3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	491a      	ldr	r1, [pc, #104]	; (8001fc8 <HAL_RCC_ClockConfig+0x260>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f64:	f7fe fcf0 	bl	8000948 <HAL_GetTick>
 8001f68:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6a:	e00a      	b.n	8001f82 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f6c:	f7fe fcec 	bl	8000948 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e061      	b.n	8002046 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f82:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <HAL_RCC_ClockConfig+0x260>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f003 020c 	and.w	r2, r3, #12
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d1eb      	bne.n	8001f6c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f94:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <HAL_RCC_ClockConfig+0x25c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d214      	bcs.n	8001fcc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <HAL_RCC_ClockConfig+0x25c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 0207 	bic.w	r2, r3, #7
 8001faa:	4906      	ldr	r1, [pc, #24]	; (8001fc4 <HAL_RCC_ClockConfig+0x25c>)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	4b04      	ldr	r3, [pc, #16]	; (8001fc4 <HAL_RCC_ClockConfig+0x25c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d005      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e040      	b.n	8002046 <HAL_RCC_ClockConfig+0x2de>
 8001fc4:	40022000 	.word	0x40022000
 8001fc8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d008      	beq.n	8001fea <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fd8:	4b1d      	ldr	r3, [pc, #116]	; (8002050 <HAL_RCC_ClockConfig+0x2e8>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	491a      	ldr	r1, [pc, #104]	; (8002050 <HAL_RCC_ClockConfig+0x2e8>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d009      	beq.n	800200a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ff6:	4b16      	ldr	r3, [pc, #88]	; (8002050 <HAL_RCC_ClockConfig+0x2e8>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	4912      	ldr	r1, [pc, #72]	; (8002050 <HAL_RCC_ClockConfig+0x2e8>)
 8002006:	4313      	orrs	r3, r2
 8002008:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800200a:	f000 f829 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 800200e:	4601      	mov	r1, r0
 8002010:	4b0f      	ldr	r3, [pc, #60]	; (8002050 <HAL_RCC_ClockConfig+0x2e8>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002018:	22f0      	movs	r2, #240	; 0xf0
 800201a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	fa92 f2a2 	rbit	r2, r2
 8002022:	60fa      	str	r2, [r7, #12]
  return result;
 8002024:	68fa      	ldr	r2, [r7, #12]
 8002026:	fab2 f282 	clz	r2, r2
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	40d3      	lsrs	r3, r2
 800202e:	4a09      	ldr	r2, [pc, #36]	; (8002054 <HAL_RCC_ClockConfig+0x2ec>)
 8002030:	5cd3      	ldrb	r3, [r2, r3]
 8002032:	fa21 f303 	lsr.w	r3, r1, r3
 8002036:	4a08      	ldr	r2, [pc, #32]	; (8002058 <HAL_RCC_ClockConfig+0x2f0>)
 8002038:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800203a:	4b08      	ldr	r3, [pc, #32]	; (800205c <HAL_RCC_ClockConfig+0x2f4>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe fc3e 	bl	80008c0 <HAL_InitTick>
  
  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3778      	adds	r7, #120	; 0x78
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40021000 	.word	0x40021000
 8002054:	080036f0 	.word	0x080036f0
 8002058:	20000004 	.word	0x20000004
 800205c:	20000008 	.word	0x20000008

08002060 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002060:	b480      	push	{r7}
 8002062:	b08b      	sub	sp, #44	; 0x2c
 8002064:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002066:	2300      	movs	r3, #0
 8002068:	61fb      	str	r3, [r7, #28]
 800206a:	2300      	movs	r3, #0
 800206c:	61bb      	str	r3, [r7, #24]
 800206e:	2300      	movs	r3, #0
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
 8002072:	2300      	movs	r3, #0
 8002074:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002076:	2300      	movs	r3, #0
 8002078:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800207a:	4b2a      	ldr	r3, [pc, #168]	; (8002124 <HAL_RCC_GetSysClockFreq+0xc4>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	f003 030c 	and.w	r3, r3, #12
 8002086:	2b04      	cmp	r3, #4
 8002088:	d002      	beq.n	8002090 <HAL_RCC_GetSysClockFreq+0x30>
 800208a:	2b08      	cmp	r3, #8
 800208c:	d003      	beq.n	8002096 <HAL_RCC_GetSysClockFreq+0x36>
 800208e:	e03f      	b.n	8002110 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002090:	4b25      	ldr	r3, [pc, #148]	; (8002128 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002092:	623b      	str	r3, [r7, #32]
      break;
 8002094:	e03f      	b.n	8002116 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800209c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80020a0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a2:	68ba      	ldr	r2, [r7, #8]
 80020a4:	fa92 f2a2 	rbit	r2, r2
 80020a8:	607a      	str	r2, [r7, #4]
  return result;
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	fab2 f282 	clz	r2, r2
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	40d3      	lsrs	r3, r2
 80020b4:	4a1d      	ldr	r2, [pc, #116]	; (800212c <HAL_RCC_GetSysClockFreq+0xcc>)
 80020b6:	5cd3      	ldrb	r3, [r2, r3]
 80020b8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80020ba:	4b1a      	ldr	r3, [pc, #104]	; (8002124 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	220f      	movs	r2, #15
 80020c4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	fa92 f2a2 	rbit	r2, r2
 80020cc:	60fa      	str	r2, [r7, #12]
  return result;
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	fab2 f282 	clz	r2, r2
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	40d3      	lsrs	r3, r2
 80020d8:	4a15      	ldr	r2, [pc, #84]	; (8002130 <HAL_RCC_GetSysClockFreq+0xd0>)
 80020da:	5cd3      	ldrb	r3, [r2, r3]
 80020dc:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d008      	beq.n	80020fa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020e8:	4a0f      	ldr	r2, [pc, #60]	; (8002128 <HAL_RCC_GetSysClockFreq+0xc8>)
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	fb02 f303 	mul.w	r3, r2, r3
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
 80020f8:	e007      	b.n	800210a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020fa:	4a0b      	ldr	r2, [pc, #44]	; (8002128 <HAL_RCC_GetSysClockFreq+0xc8>)
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	fb02 f303 	mul.w	r3, r2, r3
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210c:	623b      	str	r3, [r7, #32]
      break;
 800210e:	e002      	b.n	8002116 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002110:	4b05      	ldr	r3, [pc, #20]	; (8002128 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002112:	623b      	str	r3, [r7, #32]
      break;
 8002114:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002116:	6a3b      	ldr	r3, [r7, #32]
}
 8002118:	4618      	mov	r0, r3
 800211a:	372c      	adds	r7, #44	; 0x2c
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	40021000 	.word	0x40021000
 8002128:	007a1200 	.word	0x007a1200
 800212c:	08003708 	.word	0x08003708
 8002130:	08003718 	.word	0x08003718

08002134 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002138:	4b03      	ldr	r3, [pc, #12]	; (8002148 <HAL_RCC_GetHCLKFreq+0x14>)
 800213a:	681b      	ldr	r3, [r3, #0]
}
 800213c:	4618      	mov	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	20000004 	.word	0x20000004

0800214c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002152:	f7ff ffef 	bl	8002134 <HAL_RCC_GetHCLKFreq>
 8002156:	4601      	mov	r1, r0
 8002158:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002160:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002164:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	fa92 f2a2 	rbit	r2, r2
 800216c:	603a      	str	r2, [r7, #0]
  return result;
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	fab2 f282 	clz	r2, r2
 8002174:	b2d2      	uxtb	r2, r2
 8002176:	40d3      	lsrs	r3, r2
 8002178:	4a04      	ldr	r2, [pc, #16]	; (800218c <HAL_RCC_GetPCLK1Freq+0x40>)
 800217a:	5cd3      	ldrb	r3, [r2, r3]
 800217c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002180:	4618      	mov	r0, r3
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40021000 	.word	0x40021000
 800218c:	08003700 	.word	0x08003700

08002190 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002196:	f7ff ffcd 	bl	8002134 <HAL_RCC_GetHCLKFreq>
 800219a:	4601      	mov	r1, r0
 800219c:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <HAL_RCC_GetPCLK2Freq+0x3c>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80021a4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80021a8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	fa92 f2a2 	rbit	r2, r2
 80021b0:	603a      	str	r2, [r7, #0]
  return result;
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	fab2 f282 	clz	r2, r2
 80021b8:	b2d2      	uxtb	r2, r2
 80021ba:	40d3      	lsrs	r3, r2
 80021bc:	4a04      	ldr	r2, [pc, #16]	; (80021d0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80021be:	5cd3      	ldrb	r3, [r2, r3]
 80021c0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80021c4:	4618      	mov	r0, r3
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40021000 	.word	0x40021000
 80021d0:	08003700 	.word	0x08003700

080021d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b092      	sub	sp, #72	; 0x48
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021dc:	2300      	movs	r3, #0
 80021de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80021e4:	2300      	movs	r3, #0
 80021e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f000 80d4 	beq.w	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021f8:	4b4e      	ldr	r3, [pc, #312]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021fa:	69db      	ldr	r3, [r3, #28]
 80021fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d10e      	bne.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002204:	4b4b      	ldr	r3, [pc, #300]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	4a4a      	ldr	r2, [pc, #296]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800220a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800220e:	61d3      	str	r3, [r2, #28]
 8002210:	4b48      	ldr	r3, [pc, #288]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002212:	69db      	ldr	r3, [r3, #28]
 8002214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002218:	60bb      	str	r3, [r7, #8]
 800221a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800221c:	2301      	movs	r3, #1
 800221e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002222:	4b45      	ldr	r3, [pc, #276]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222a:	2b00      	cmp	r3, #0
 800222c:	d118      	bne.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800222e:	4b42      	ldr	r3, [pc, #264]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a41      	ldr	r2, [pc, #260]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002238:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800223a:	f7fe fb85 	bl	8000948 <HAL_GetTick>
 800223e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002240:	e008      	b.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002242:	f7fe fb81 	bl	8000948 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b64      	cmp	r3, #100	; 0x64
 800224e:	d901      	bls.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e1d6      	b.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002254:	4b38      	ldr	r3, [pc, #224]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0f0      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002260:	4b34      	ldr	r3, [pc, #208]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002268:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800226a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 8084 	beq.w	800237a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800227a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800227c:	429a      	cmp	r2, r3
 800227e:	d07c      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002280:	4b2c      	ldr	r3, [pc, #176]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002282:	6a1b      	ldr	r3, [r3, #32]
 8002284:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002288:	63fb      	str	r3, [r7, #60]	; 0x3c
 800228a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800228e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002292:	fa93 f3a3 	rbit	r3, r3
 8002296:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800229a:	fab3 f383 	clz	r3, r3
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	461a      	mov	r2, r3
 80022a2:	4b26      	ldr	r3, [pc, #152]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022a4:	4413      	add	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	461a      	mov	r2, r3
 80022aa:	2301      	movs	r3, #1
 80022ac:	6013      	str	r3, [r2, #0]
 80022ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022b6:	fa93 f3a3 	rbit	r3, r3
 80022ba:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80022bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022be:	fab3 f383 	clz	r3, r3
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	461a      	mov	r2, r3
 80022c6:	4b1d      	ldr	r3, [pc, #116]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022c8:	4413      	add	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	461a      	mov	r2, r3
 80022ce:	2300      	movs	r3, #0
 80022d0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022d2:	4a18      	ldr	r2, [pc, #96]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022d6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d04b      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e2:	f7fe fb31 	bl	8000948 <HAL_GetTick>
 80022e6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e8:	e00a      	b.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ea:	f7fe fb2d 	bl	8000948 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d901      	bls.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e180      	b.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002300:	2302      	movs	r3, #2
 8002302:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002306:	fa93 f3a3 	rbit	r3, r3
 800230a:	627b      	str	r3, [r7, #36]	; 0x24
 800230c:	2302      	movs	r3, #2
 800230e:	623b      	str	r3, [r7, #32]
 8002310:	6a3b      	ldr	r3, [r7, #32]
 8002312:	fa93 f3a3 	rbit	r3, r3
 8002316:	61fb      	str	r3, [r7, #28]
  return result;
 8002318:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800231a:	fab3 f383 	clz	r3, r3
 800231e:	b2db      	uxtb	r3, r3
 8002320:	095b      	lsrs	r3, r3, #5
 8002322:	b2db      	uxtb	r3, r3
 8002324:	f043 0302 	orr.w	r3, r3, #2
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d108      	bne.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800232e:	4b01      	ldr	r3, [pc, #4]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	e00d      	b.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002334:	40021000 	.word	0x40021000
 8002338:	40007000 	.word	0x40007000
 800233c:	10908100 	.word	0x10908100
 8002340:	2302      	movs	r3, #2
 8002342:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	fa93 f3a3 	rbit	r3, r3
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	4ba0      	ldr	r3, [pc, #640]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002350:	2202      	movs	r2, #2
 8002352:	613a      	str	r2, [r7, #16]
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	fa92 f2a2 	rbit	r2, r2
 800235a:	60fa      	str	r2, [r7, #12]
  return result;
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	fab2 f282 	clz	r2, r2
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	f002 021f 	and.w	r2, r2, #31
 800236e:	2101      	movs	r1, #1
 8002370:	fa01 f202 	lsl.w	r2, r1, r2
 8002374:	4013      	ands	r3, r2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d0b7      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800237a:	4b95      	ldr	r3, [pc, #596]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	4992      	ldr	r1, [pc, #584]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002388:	4313      	orrs	r3, r2
 800238a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800238c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002390:	2b01      	cmp	r3, #1
 8002392:	d105      	bne.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002394:	4b8e      	ldr	r3, [pc, #568]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002396:	69db      	ldr	r3, [r3, #28]
 8002398:	4a8d      	ldr	r2, [pc, #564]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800239a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800239e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d008      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023ac:	4b88      	ldr	r3, [pc, #544]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b0:	f023 0203 	bic.w	r2, r3, #3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	4985      	ldr	r1, [pc, #532]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d008      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023ca:	4b81      	ldr	r3, [pc, #516]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	497e      	ldr	r1, [pc, #504]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d008      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023e8:	4b79      	ldr	r3, [pc, #484]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	4976      	ldr	r1, [pc, #472]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0320 	and.w	r3, r3, #32
 8002402:	2b00      	cmp	r3, #0
 8002404:	d008      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002406:	4b72      	ldr	r3, [pc, #456]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	f023 0210 	bic.w	r2, r3, #16
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	496f      	ldr	r1, [pc, #444]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002414:	4313      	orrs	r3, r2
 8002416:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d008      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002424:	4b6a      	ldr	r3, [pc, #424]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002430:	4967      	ldr	r1, [pc, #412]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002432:	4313      	orrs	r3, r2
 8002434:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800243e:	2b00      	cmp	r3, #0
 8002440:	d008      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002442:	4b63      	ldr	r3, [pc, #396]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	f023 0220 	bic.w	r2, r3, #32
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	4960      	ldr	r1, [pc, #384]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002450:	4313      	orrs	r3, r2
 8002452:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d008      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002460:	4b5b      	ldr	r3, [pc, #364]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002464:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246c:	4958      	ldr	r1, [pc, #352]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800246e:	4313      	orrs	r3, r2
 8002470:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0308 	and.w	r3, r3, #8
 800247a:	2b00      	cmp	r3, #0
 800247c:	d008      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800247e:	4b54      	ldr	r3, [pc, #336]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	4951      	ldr	r1, [pc, #324]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800248c:	4313      	orrs	r3, r2
 800248e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0310 	and.w	r3, r3, #16
 8002498:	2b00      	cmp	r3, #0
 800249a:	d008      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800249c:	4b4c      	ldr	r3, [pc, #304]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800249e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	4949      	ldr	r1, [pc, #292]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d008      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80024ba:	4b45      	ldr	r3, [pc, #276]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	4942      	ldr	r1, [pc, #264]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d008      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80024d8:	4b3d      	ldr	r3, [pc, #244]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024dc:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e4:	493a      	ldr	r1, [pc, #232]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d008      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80024f6:	4b36      	ldr	r3, [pc, #216]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fa:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002502:	4933      	ldr	r1, [pc, #204]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002504:	4313      	orrs	r3, r2
 8002506:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d008      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002514:	4b2e      	ldr	r3, [pc, #184]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002518:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002520:	492b      	ldr	r1, [pc, #172]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002522:	4313      	orrs	r3, r2
 8002524:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d008      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002532:	4b27      	ldr	r3, [pc, #156]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	4924      	ldr	r1, [pc, #144]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002540:	4313      	orrs	r3, r2
 8002542:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d008      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002550:	4b1f      	ldr	r3, [pc, #124]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002554:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800255c:	491c      	ldr	r1, [pc, #112]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800255e:	4313      	orrs	r3, r2
 8002560:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d008      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800256e:	4b18      	ldr	r3, [pc, #96]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800257a:	4915      	ldr	r1, [pc, #84]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800257c:	4313      	orrs	r3, r2
 800257e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d008      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800258c:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800258e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002590:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002598:	490d      	ldr	r1, [pc, #52]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800259a:	4313      	orrs	r3, r2
 800259c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d008      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80025aa:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025b6:	4906      	ldr	r1, [pc, #24]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00c      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80025c8:	4b01      	ldr	r3, [pc, #4]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025cc:	e002      	b.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80025ce:	bf00      	nop
 80025d0:	40021000 	.word	0x40021000
 80025d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025dc:	490b      	ldr	r1, [pc, #44]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d008      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80025ee:	4b07      	ldr	r3, [pc, #28]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025fa:	4904      	ldr	r1, [pc, #16]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3748      	adds	r7, #72	; 0x48
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40021000 	.word	0x40021000

08002610 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e040      	b.n	80026a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002626:	2b00      	cmp	r3, #0
 8002628:	d106      	bne.n	8002638 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7fe f8c2 	bl	80007bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2224      	movs	r2, #36	; 0x24
 800263c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0201 	bic.w	r2, r2, #1
 800264c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f8c0 	bl	80027d4 <UART_SetConfig>
 8002654:	4603      	mov	r3, r0
 8002656:	2b01      	cmp	r3, #1
 8002658:	d101      	bne.n	800265e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e022      	b.n	80026a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	2b00      	cmp	r3, #0
 8002664:	d002      	beq.n	800266c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 fa88 	bl	8002b7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800267a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800268a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0201 	orr.w	r2, r2, #1
 800269a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 fb0f 	bl	8002cc0 <UART_CheckIdleState>
 80026a2:	4603      	mov	r3, r0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b08a      	sub	sp, #40	; 0x28
 80026b0:	af02      	add	r7, sp, #8
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	603b      	str	r3, [r7, #0]
 80026b8:	4613      	mov	r3, r2
 80026ba:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026c0:	2b20      	cmp	r3, #32
 80026c2:	f040 8082 	bne.w	80027ca <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d002      	beq.n	80026d2 <HAL_UART_Transmit+0x26>
 80026cc:	88fb      	ldrh	r3, [r7, #6]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e07a      	b.n	80027cc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d101      	bne.n	80026e4 <HAL_UART_Transmit+0x38>
 80026e0:	2302      	movs	r3, #2
 80026e2:	e073      	b.n	80027cc <HAL_UART_Transmit+0x120>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2221      	movs	r2, #33	; 0x21
 80026f8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026fa:	f7fe f925 	bl	8000948 <HAL_GetTick>
 80026fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	88fa      	ldrh	r2, [r7, #6]
 8002704:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	88fa      	ldrh	r2, [r7, #6]
 800270c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002718:	d108      	bne.n	800272c <HAL_UART_Transmit+0x80>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d104      	bne.n	800272c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002722:	2300      	movs	r3, #0
 8002724:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	61bb      	str	r3, [r7, #24]
 800272a:	e003      	b.n	8002734 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002730:	2300      	movs	r3, #0
 8002732:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800273c:	e02d      	b.n	800279a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	2200      	movs	r2, #0
 8002746:	2180      	movs	r1, #128	; 0x80
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f000 fb02 	bl	8002d52 <UART_WaitOnFlagUntilTimeout>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e039      	b.n	80027cc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10b      	bne.n	8002776 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	881a      	ldrh	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800276a:	b292      	uxth	r2, r2
 800276c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	3302      	adds	r3, #2
 8002772:	61bb      	str	r3, [r7, #24]
 8002774:	e008      	b.n	8002788 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	781a      	ldrb	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	b292      	uxth	r2, r2
 8002780:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	3301      	adds	r3, #1
 8002786:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800278e:	b29b      	uxth	r3, r3
 8002790:	3b01      	subs	r3, #1
 8002792:	b29a      	uxth	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1cb      	bne.n	800273e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	2200      	movs	r2, #0
 80027ae:	2140      	movs	r1, #64	; 0x40
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f000 face 	bl	8002d52 <UART_WaitOnFlagUntilTimeout>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e005      	b.n	80027cc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2220      	movs	r2, #32
 80027c4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80027c6:	2300      	movs	r3, #0
 80027c8:	e000      	b.n	80027cc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80027ca:	2302      	movs	r3, #2
  }
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3720      	adds	r7, #32
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b088      	sub	sp, #32
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80027dc:	2300      	movs	r3, #0
 80027de:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	431a      	orrs	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	69db      	ldr	r3, [r3, #28]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	4baa      	ldr	r3, [pc, #680]	; (8002aa8 <UART_SetConfig+0x2d4>)
 8002800:	4013      	ands	r3, r2
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	6812      	ldr	r2, [r2, #0]
 8002806:	6979      	ldr	r1, [r7, #20]
 8002808:	430b      	orrs	r3, r1
 800280a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68da      	ldr	r2, [r3, #12]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	430a      	orrs	r2, r1
 8002820:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	4313      	orrs	r3, r2
 8002830:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	430a      	orrs	r2, r1
 8002844:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a98      	ldr	r2, [pc, #608]	; (8002aac <UART_SetConfig+0x2d8>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d121      	bne.n	8002894 <UART_SetConfig+0xc0>
 8002850:	4b97      	ldr	r3, [pc, #604]	; (8002ab0 <UART_SetConfig+0x2dc>)
 8002852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002854:	f003 0303 	and.w	r3, r3, #3
 8002858:	2b03      	cmp	r3, #3
 800285a:	d817      	bhi.n	800288c <UART_SetConfig+0xb8>
 800285c:	a201      	add	r2, pc, #4	; (adr r2, 8002864 <UART_SetConfig+0x90>)
 800285e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002862:	bf00      	nop
 8002864:	08002875 	.word	0x08002875
 8002868:	08002881 	.word	0x08002881
 800286c:	08002887 	.word	0x08002887
 8002870:	0800287b 	.word	0x0800287b
 8002874:	2301      	movs	r3, #1
 8002876:	77fb      	strb	r3, [r7, #31]
 8002878:	e0b2      	b.n	80029e0 <UART_SetConfig+0x20c>
 800287a:	2302      	movs	r3, #2
 800287c:	77fb      	strb	r3, [r7, #31]
 800287e:	e0af      	b.n	80029e0 <UART_SetConfig+0x20c>
 8002880:	2304      	movs	r3, #4
 8002882:	77fb      	strb	r3, [r7, #31]
 8002884:	e0ac      	b.n	80029e0 <UART_SetConfig+0x20c>
 8002886:	2308      	movs	r3, #8
 8002888:	77fb      	strb	r3, [r7, #31]
 800288a:	e0a9      	b.n	80029e0 <UART_SetConfig+0x20c>
 800288c:	2310      	movs	r3, #16
 800288e:	77fb      	strb	r3, [r7, #31]
 8002890:	bf00      	nop
 8002892:	e0a5      	b.n	80029e0 <UART_SetConfig+0x20c>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a86      	ldr	r2, [pc, #536]	; (8002ab4 <UART_SetConfig+0x2e0>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d123      	bne.n	80028e6 <UART_SetConfig+0x112>
 800289e:	4b84      	ldr	r3, [pc, #528]	; (8002ab0 <UART_SetConfig+0x2dc>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028aa:	d012      	beq.n	80028d2 <UART_SetConfig+0xfe>
 80028ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028b0:	d802      	bhi.n	80028b8 <UART_SetConfig+0xe4>
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d007      	beq.n	80028c6 <UART_SetConfig+0xf2>
 80028b6:	e012      	b.n	80028de <UART_SetConfig+0x10a>
 80028b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028bc:	d00c      	beq.n	80028d8 <UART_SetConfig+0x104>
 80028be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80028c2:	d003      	beq.n	80028cc <UART_SetConfig+0xf8>
 80028c4:	e00b      	b.n	80028de <UART_SetConfig+0x10a>
 80028c6:	2300      	movs	r3, #0
 80028c8:	77fb      	strb	r3, [r7, #31]
 80028ca:	e089      	b.n	80029e0 <UART_SetConfig+0x20c>
 80028cc:	2302      	movs	r3, #2
 80028ce:	77fb      	strb	r3, [r7, #31]
 80028d0:	e086      	b.n	80029e0 <UART_SetConfig+0x20c>
 80028d2:	2304      	movs	r3, #4
 80028d4:	77fb      	strb	r3, [r7, #31]
 80028d6:	e083      	b.n	80029e0 <UART_SetConfig+0x20c>
 80028d8:	2308      	movs	r3, #8
 80028da:	77fb      	strb	r3, [r7, #31]
 80028dc:	e080      	b.n	80029e0 <UART_SetConfig+0x20c>
 80028de:	2310      	movs	r3, #16
 80028e0:	77fb      	strb	r3, [r7, #31]
 80028e2:	bf00      	nop
 80028e4:	e07c      	b.n	80029e0 <UART_SetConfig+0x20c>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a73      	ldr	r2, [pc, #460]	; (8002ab8 <UART_SetConfig+0x2e4>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d123      	bne.n	8002938 <UART_SetConfig+0x164>
 80028f0:	4b6f      	ldr	r3, [pc, #444]	; (8002ab0 <UART_SetConfig+0x2dc>)
 80028f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80028f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028fc:	d012      	beq.n	8002924 <UART_SetConfig+0x150>
 80028fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002902:	d802      	bhi.n	800290a <UART_SetConfig+0x136>
 8002904:	2b00      	cmp	r3, #0
 8002906:	d007      	beq.n	8002918 <UART_SetConfig+0x144>
 8002908:	e012      	b.n	8002930 <UART_SetConfig+0x15c>
 800290a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800290e:	d00c      	beq.n	800292a <UART_SetConfig+0x156>
 8002910:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002914:	d003      	beq.n	800291e <UART_SetConfig+0x14a>
 8002916:	e00b      	b.n	8002930 <UART_SetConfig+0x15c>
 8002918:	2300      	movs	r3, #0
 800291a:	77fb      	strb	r3, [r7, #31]
 800291c:	e060      	b.n	80029e0 <UART_SetConfig+0x20c>
 800291e:	2302      	movs	r3, #2
 8002920:	77fb      	strb	r3, [r7, #31]
 8002922:	e05d      	b.n	80029e0 <UART_SetConfig+0x20c>
 8002924:	2304      	movs	r3, #4
 8002926:	77fb      	strb	r3, [r7, #31]
 8002928:	e05a      	b.n	80029e0 <UART_SetConfig+0x20c>
 800292a:	2308      	movs	r3, #8
 800292c:	77fb      	strb	r3, [r7, #31]
 800292e:	e057      	b.n	80029e0 <UART_SetConfig+0x20c>
 8002930:	2310      	movs	r3, #16
 8002932:	77fb      	strb	r3, [r7, #31]
 8002934:	bf00      	nop
 8002936:	e053      	b.n	80029e0 <UART_SetConfig+0x20c>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a5f      	ldr	r2, [pc, #380]	; (8002abc <UART_SetConfig+0x2e8>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d123      	bne.n	800298a <UART_SetConfig+0x1b6>
 8002942:	4b5b      	ldr	r3, [pc, #364]	; (8002ab0 <UART_SetConfig+0x2dc>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002946:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800294a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800294e:	d012      	beq.n	8002976 <UART_SetConfig+0x1a2>
 8002950:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002954:	d802      	bhi.n	800295c <UART_SetConfig+0x188>
 8002956:	2b00      	cmp	r3, #0
 8002958:	d007      	beq.n	800296a <UART_SetConfig+0x196>
 800295a:	e012      	b.n	8002982 <UART_SetConfig+0x1ae>
 800295c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002960:	d00c      	beq.n	800297c <UART_SetConfig+0x1a8>
 8002962:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002966:	d003      	beq.n	8002970 <UART_SetConfig+0x19c>
 8002968:	e00b      	b.n	8002982 <UART_SetConfig+0x1ae>
 800296a:	2300      	movs	r3, #0
 800296c:	77fb      	strb	r3, [r7, #31]
 800296e:	e037      	b.n	80029e0 <UART_SetConfig+0x20c>
 8002970:	2302      	movs	r3, #2
 8002972:	77fb      	strb	r3, [r7, #31]
 8002974:	e034      	b.n	80029e0 <UART_SetConfig+0x20c>
 8002976:	2304      	movs	r3, #4
 8002978:	77fb      	strb	r3, [r7, #31]
 800297a:	e031      	b.n	80029e0 <UART_SetConfig+0x20c>
 800297c:	2308      	movs	r3, #8
 800297e:	77fb      	strb	r3, [r7, #31]
 8002980:	e02e      	b.n	80029e0 <UART_SetConfig+0x20c>
 8002982:	2310      	movs	r3, #16
 8002984:	77fb      	strb	r3, [r7, #31]
 8002986:	bf00      	nop
 8002988:	e02a      	b.n	80029e0 <UART_SetConfig+0x20c>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a4c      	ldr	r2, [pc, #304]	; (8002ac0 <UART_SetConfig+0x2ec>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d123      	bne.n	80029dc <UART_SetConfig+0x208>
 8002994:	4b46      	ldr	r3, [pc, #280]	; (8002ab0 <UART_SetConfig+0x2dc>)
 8002996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002998:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800299c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029a0:	d012      	beq.n	80029c8 <UART_SetConfig+0x1f4>
 80029a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029a6:	d802      	bhi.n	80029ae <UART_SetConfig+0x1da>
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d007      	beq.n	80029bc <UART_SetConfig+0x1e8>
 80029ac:	e012      	b.n	80029d4 <UART_SetConfig+0x200>
 80029ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029b2:	d00c      	beq.n	80029ce <UART_SetConfig+0x1fa>
 80029b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80029b8:	d003      	beq.n	80029c2 <UART_SetConfig+0x1ee>
 80029ba:	e00b      	b.n	80029d4 <UART_SetConfig+0x200>
 80029bc:	2300      	movs	r3, #0
 80029be:	77fb      	strb	r3, [r7, #31]
 80029c0:	e00e      	b.n	80029e0 <UART_SetConfig+0x20c>
 80029c2:	2302      	movs	r3, #2
 80029c4:	77fb      	strb	r3, [r7, #31]
 80029c6:	e00b      	b.n	80029e0 <UART_SetConfig+0x20c>
 80029c8:	2304      	movs	r3, #4
 80029ca:	77fb      	strb	r3, [r7, #31]
 80029cc:	e008      	b.n	80029e0 <UART_SetConfig+0x20c>
 80029ce:	2308      	movs	r3, #8
 80029d0:	77fb      	strb	r3, [r7, #31]
 80029d2:	e005      	b.n	80029e0 <UART_SetConfig+0x20c>
 80029d4:	2310      	movs	r3, #16
 80029d6:	77fb      	strb	r3, [r7, #31]
 80029d8:	bf00      	nop
 80029da:	e001      	b.n	80029e0 <UART_SetConfig+0x20c>
 80029dc:	2310      	movs	r3, #16
 80029de:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	69db      	ldr	r3, [r3, #28]
 80029e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029e8:	d16e      	bne.n	8002ac8 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80029ea:	7ffb      	ldrb	r3, [r7, #31]
 80029ec:	2b08      	cmp	r3, #8
 80029ee:	d828      	bhi.n	8002a42 <UART_SetConfig+0x26e>
 80029f0:	a201      	add	r2, pc, #4	; (adr r2, 80029f8 <UART_SetConfig+0x224>)
 80029f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f6:	bf00      	nop
 80029f8:	08002a1d 	.word	0x08002a1d
 80029fc:	08002a25 	.word	0x08002a25
 8002a00:	08002a2d 	.word	0x08002a2d
 8002a04:	08002a43 	.word	0x08002a43
 8002a08:	08002a33 	.word	0x08002a33
 8002a0c:	08002a43 	.word	0x08002a43
 8002a10:	08002a43 	.word	0x08002a43
 8002a14:	08002a43 	.word	0x08002a43
 8002a18:	08002a3b 	.word	0x08002a3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a1c:	f7ff fb96 	bl	800214c <HAL_RCC_GetPCLK1Freq>
 8002a20:	61b8      	str	r0, [r7, #24]
        break;
 8002a22:	e013      	b.n	8002a4c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a24:	f7ff fbb4 	bl	8002190 <HAL_RCC_GetPCLK2Freq>
 8002a28:	61b8      	str	r0, [r7, #24]
        break;
 8002a2a:	e00f      	b.n	8002a4c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a2c:	4b25      	ldr	r3, [pc, #148]	; (8002ac4 <UART_SetConfig+0x2f0>)
 8002a2e:	61bb      	str	r3, [r7, #24]
        break;
 8002a30:	e00c      	b.n	8002a4c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a32:	f7ff fb15 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 8002a36:	61b8      	str	r0, [r7, #24]
        break;
 8002a38:	e008      	b.n	8002a4c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a3e:	61bb      	str	r3, [r7, #24]
        break;
 8002a40:	e004      	b.n	8002a4c <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	77bb      	strb	r3, [r7, #30]
        break;
 8002a4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f000 8086 	beq.w	8002b60 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	005a      	lsls	r2, r3, #1
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	085b      	lsrs	r3, r3, #1
 8002a5e:	441a      	add	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	2b0f      	cmp	r3, #15
 8002a70:	d916      	bls.n	8002aa0 <UART_SetConfig+0x2cc>
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a78:	d212      	bcs.n	8002aa0 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	f023 030f 	bic.w	r3, r3, #15
 8002a82:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	085b      	lsrs	r3, r3, #1
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	89fb      	ldrh	r3, [r7, #14]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	89fa      	ldrh	r2, [r7, #14]
 8002a9c:	60da      	str	r2, [r3, #12]
 8002a9e:	e05f      	b.n	8002b60 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	77bb      	strb	r3, [r7, #30]
 8002aa4:	e05c      	b.n	8002b60 <UART_SetConfig+0x38c>
 8002aa6:	bf00      	nop
 8002aa8:	efff69f3 	.word	0xefff69f3
 8002aac:	40013800 	.word	0x40013800
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	40004400 	.word	0x40004400
 8002ab8:	40004800 	.word	0x40004800
 8002abc:	40004c00 	.word	0x40004c00
 8002ac0:	40005000 	.word	0x40005000
 8002ac4:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ac8:	7ffb      	ldrb	r3, [r7, #31]
 8002aca:	2b08      	cmp	r3, #8
 8002acc:	d827      	bhi.n	8002b1e <UART_SetConfig+0x34a>
 8002ace:	a201      	add	r2, pc, #4	; (adr r2, 8002ad4 <UART_SetConfig+0x300>)
 8002ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad4:	08002af9 	.word	0x08002af9
 8002ad8:	08002b01 	.word	0x08002b01
 8002adc:	08002b09 	.word	0x08002b09
 8002ae0:	08002b1f 	.word	0x08002b1f
 8002ae4:	08002b0f 	.word	0x08002b0f
 8002ae8:	08002b1f 	.word	0x08002b1f
 8002aec:	08002b1f 	.word	0x08002b1f
 8002af0:	08002b1f 	.word	0x08002b1f
 8002af4:	08002b17 	.word	0x08002b17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002af8:	f7ff fb28 	bl	800214c <HAL_RCC_GetPCLK1Freq>
 8002afc:	61b8      	str	r0, [r7, #24]
        break;
 8002afe:	e013      	b.n	8002b28 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b00:	f7ff fb46 	bl	8002190 <HAL_RCC_GetPCLK2Freq>
 8002b04:	61b8      	str	r0, [r7, #24]
        break;
 8002b06:	e00f      	b.n	8002b28 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b08:	4b1b      	ldr	r3, [pc, #108]	; (8002b78 <UART_SetConfig+0x3a4>)
 8002b0a:	61bb      	str	r3, [r7, #24]
        break;
 8002b0c:	e00c      	b.n	8002b28 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b0e:	f7ff faa7 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 8002b12:	61b8      	str	r0, [r7, #24]
        break;
 8002b14:	e008      	b.n	8002b28 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b1a:	61bb      	str	r3, [r7, #24]
        break;
 8002b1c:	e004      	b.n	8002b28 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	77bb      	strb	r3, [r7, #30]
        break;
 8002b26:	bf00      	nop
    }

    if (pclk != 0U)
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d018      	beq.n	8002b60 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	085a      	lsrs	r2, r3, #1
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	441a      	add	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	2b0f      	cmp	r3, #15
 8002b48:	d908      	bls.n	8002b5c <UART_SetConfig+0x388>
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b50:	d204      	bcs.n	8002b5c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	60da      	str	r2, [r3, #12]
 8002b5a:	e001      	b.n	8002b60 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002b6c:	7fbb      	ldrb	r3, [r7, #30]
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3720      	adds	r7, #32
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	007a1200 	.word	0x007a1200

08002b7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00a      	beq.n	8002ba6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00a      	beq.n	8002bc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bcc:	f003 0304 	and.w	r3, r3, #4
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00a      	beq.n	8002bea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bee:	f003 0308 	and.w	r3, r3, #8
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00a      	beq.n	8002c0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	f003 0310 	and.w	r3, r3, #16
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00a      	beq.n	8002c2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c32:	f003 0320 	and.w	r3, r3, #32
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00a      	beq.n	8002c50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d01a      	beq.n	8002c92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c7a:	d10a      	bne.n	8002c92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00a      	beq.n	8002cb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	605a      	str	r2, [r3, #4]
  }
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af02      	add	r7, sp, #8
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002cd0:	f7fd fe3a 	bl	8000948 <HAL_GetTick>
 8002cd4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0308 	and.w	r3, r3, #8
 8002ce0:	2b08      	cmp	r3, #8
 8002ce2:	d10e      	bne.n	8002d02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ce4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f82d 	bl	8002d52 <UART_WaitOnFlagUntilTimeout>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e023      	b.n	8002d4a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	2b04      	cmp	r3, #4
 8002d0e:	d10e      	bne.n	8002d2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f817 	bl	8002d52 <UART_WaitOnFlagUntilTimeout>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e00d      	b.n	8002d4a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2220      	movs	r2, #32
 8002d32:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2220      	movs	r2, #32
 8002d38:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b084      	sub	sp, #16
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	60f8      	str	r0, [r7, #12]
 8002d5a:	60b9      	str	r1, [r7, #8]
 8002d5c:	603b      	str	r3, [r7, #0]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d62:	e05e      	b.n	8002e22 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6a:	d05a      	beq.n	8002e22 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d6c:	f7fd fdec 	bl	8000948 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d302      	bcc.n	8002d82 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d11b      	bne.n	8002dba <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002d90:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 0201 	bic.w	r2, r2, #1
 8002da0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2220      	movs	r2, #32
 8002da6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2220      	movs	r2, #32
 8002dac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e043      	b.n	8002e42 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d02c      	beq.n	8002e22 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dd6:	d124      	bne.n	8002e22 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002de0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002df0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 0201 	bic.w	r2, r2, #1
 8002e00:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2220      	movs	r2, #32
 8002e06:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2220      	movs	r2, #32
 8002e12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e00f      	b.n	8002e42 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	69da      	ldr	r2, [r3, #28]
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	bf0c      	ite	eq
 8002e32:	2301      	moveq	r3, #1
 8002e34:	2300      	movne	r3, #0
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	461a      	mov	r2, r3
 8002e3a:	79fb      	ldrb	r3, [r7, #7]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d091      	beq.n	8002d64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
	...

08002e4c <__errno>:
 8002e4c:	4b01      	ldr	r3, [pc, #4]	; (8002e54 <__errno+0x8>)
 8002e4e:	6818      	ldr	r0, [r3, #0]
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	20000010 	.word	0x20000010

08002e58 <__libc_init_array>:
 8002e58:	b570      	push	{r4, r5, r6, lr}
 8002e5a:	4e0d      	ldr	r6, [pc, #52]	; (8002e90 <__libc_init_array+0x38>)
 8002e5c:	4c0d      	ldr	r4, [pc, #52]	; (8002e94 <__libc_init_array+0x3c>)
 8002e5e:	1ba4      	subs	r4, r4, r6
 8002e60:	10a4      	asrs	r4, r4, #2
 8002e62:	2500      	movs	r5, #0
 8002e64:	42a5      	cmp	r5, r4
 8002e66:	d109      	bne.n	8002e7c <__libc_init_array+0x24>
 8002e68:	4e0b      	ldr	r6, [pc, #44]	; (8002e98 <__libc_init_array+0x40>)
 8002e6a:	4c0c      	ldr	r4, [pc, #48]	; (8002e9c <__libc_init_array+0x44>)
 8002e6c:	f000 fc26 	bl	80036bc <_init>
 8002e70:	1ba4      	subs	r4, r4, r6
 8002e72:	10a4      	asrs	r4, r4, #2
 8002e74:	2500      	movs	r5, #0
 8002e76:	42a5      	cmp	r5, r4
 8002e78:	d105      	bne.n	8002e86 <__libc_init_array+0x2e>
 8002e7a:	bd70      	pop	{r4, r5, r6, pc}
 8002e7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e80:	4798      	blx	r3
 8002e82:	3501      	adds	r5, #1
 8002e84:	e7ee      	b.n	8002e64 <__libc_init_array+0xc>
 8002e86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e8a:	4798      	blx	r3
 8002e8c:	3501      	adds	r5, #1
 8002e8e:	e7f2      	b.n	8002e76 <__libc_init_array+0x1e>
 8002e90:	0800375c 	.word	0x0800375c
 8002e94:	0800375c 	.word	0x0800375c
 8002e98:	0800375c 	.word	0x0800375c
 8002e9c:	08003760 	.word	0x08003760

08002ea0 <memset>:
 8002ea0:	4402      	add	r2, r0
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d100      	bne.n	8002eaa <memset+0xa>
 8002ea8:	4770      	bx	lr
 8002eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8002eae:	e7f9      	b.n	8002ea4 <memset+0x4>

08002eb0 <siprintf>:
 8002eb0:	b40e      	push	{r1, r2, r3}
 8002eb2:	b500      	push	{lr}
 8002eb4:	b09c      	sub	sp, #112	; 0x70
 8002eb6:	ab1d      	add	r3, sp, #116	; 0x74
 8002eb8:	9002      	str	r0, [sp, #8]
 8002eba:	9006      	str	r0, [sp, #24]
 8002ebc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002ec0:	4809      	ldr	r0, [pc, #36]	; (8002ee8 <siprintf+0x38>)
 8002ec2:	9107      	str	r1, [sp, #28]
 8002ec4:	9104      	str	r1, [sp, #16]
 8002ec6:	4909      	ldr	r1, [pc, #36]	; (8002eec <siprintf+0x3c>)
 8002ec8:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ecc:	9105      	str	r1, [sp, #20]
 8002ece:	6800      	ldr	r0, [r0, #0]
 8002ed0:	9301      	str	r3, [sp, #4]
 8002ed2:	a902      	add	r1, sp, #8
 8002ed4:	f000 f866 	bl	8002fa4 <_svfiprintf_r>
 8002ed8:	9b02      	ldr	r3, [sp, #8]
 8002eda:	2200      	movs	r2, #0
 8002edc:	701a      	strb	r2, [r3, #0]
 8002ede:	b01c      	add	sp, #112	; 0x70
 8002ee0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ee4:	b003      	add	sp, #12
 8002ee6:	4770      	bx	lr
 8002ee8:	20000010 	.word	0x20000010
 8002eec:	ffff0208 	.word	0xffff0208

08002ef0 <__ssputs_r>:
 8002ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ef4:	688e      	ldr	r6, [r1, #8]
 8002ef6:	429e      	cmp	r6, r3
 8002ef8:	4682      	mov	sl, r0
 8002efa:	460c      	mov	r4, r1
 8002efc:	4690      	mov	r8, r2
 8002efe:	4699      	mov	r9, r3
 8002f00:	d837      	bhi.n	8002f72 <__ssputs_r+0x82>
 8002f02:	898a      	ldrh	r2, [r1, #12]
 8002f04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002f08:	d031      	beq.n	8002f6e <__ssputs_r+0x7e>
 8002f0a:	6825      	ldr	r5, [r4, #0]
 8002f0c:	6909      	ldr	r1, [r1, #16]
 8002f0e:	1a6f      	subs	r7, r5, r1
 8002f10:	6965      	ldr	r5, [r4, #20]
 8002f12:	2302      	movs	r3, #2
 8002f14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002f18:	fb95 f5f3 	sdiv	r5, r5, r3
 8002f1c:	f109 0301 	add.w	r3, r9, #1
 8002f20:	443b      	add	r3, r7
 8002f22:	429d      	cmp	r5, r3
 8002f24:	bf38      	it	cc
 8002f26:	461d      	movcc	r5, r3
 8002f28:	0553      	lsls	r3, r2, #21
 8002f2a:	d530      	bpl.n	8002f8e <__ssputs_r+0x9e>
 8002f2c:	4629      	mov	r1, r5
 8002f2e:	f000 fb2b 	bl	8003588 <_malloc_r>
 8002f32:	4606      	mov	r6, r0
 8002f34:	b950      	cbnz	r0, 8002f4c <__ssputs_r+0x5c>
 8002f36:	230c      	movs	r3, #12
 8002f38:	f8ca 3000 	str.w	r3, [sl]
 8002f3c:	89a3      	ldrh	r3, [r4, #12]
 8002f3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f42:	81a3      	strh	r3, [r4, #12]
 8002f44:	f04f 30ff 	mov.w	r0, #4294967295
 8002f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f4c:	463a      	mov	r2, r7
 8002f4e:	6921      	ldr	r1, [r4, #16]
 8002f50:	f000 faa8 	bl	80034a4 <memcpy>
 8002f54:	89a3      	ldrh	r3, [r4, #12]
 8002f56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f5e:	81a3      	strh	r3, [r4, #12]
 8002f60:	6126      	str	r6, [r4, #16]
 8002f62:	6165      	str	r5, [r4, #20]
 8002f64:	443e      	add	r6, r7
 8002f66:	1bed      	subs	r5, r5, r7
 8002f68:	6026      	str	r6, [r4, #0]
 8002f6a:	60a5      	str	r5, [r4, #8]
 8002f6c:	464e      	mov	r6, r9
 8002f6e:	454e      	cmp	r6, r9
 8002f70:	d900      	bls.n	8002f74 <__ssputs_r+0x84>
 8002f72:	464e      	mov	r6, r9
 8002f74:	4632      	mov	r2, r6
 8002f76:	4641      	mov	r1, r8
 8002f78:	6820      	ldr	r0, [r4, #0]
 8002f7a:	f000 fa9e 	bl	80034ba <memmove>
 8002f7e:	68a3      	ldr	r3, [r4, #8]
 8002f80:	1b9b      	subs	r3, r3, r6
 8002f82:	60a3      	str	r3, [r4, #8]
 8002f84:	6823      	ldr	r3, [r4, #0]
 8002f86:	441e      	add	r6, r3
 8002f88:	6026      	str	r6, [r4, #0]
 8002f8a:	2000      	movs	r0, #0
 8002f8c:	e7dc      	b.n	8002f48 <__ssputs_r+0x58>
 8002f8e:	462a      	mov	r2, r5
 8002f90:	f000 fb54 	bl	800363c <_realloc_r>
 8002f94:	4606      	mov	r6, r0
 8002f96:	2800      	cmp	r0, #0
 8002f98:	d1e2      	bne.n	8002f60 <__ssputs_r+0x70>
 8002f9a:	6921      	ldr	r1, [r4, #16]
 8002f9c:	4650      	mov	r0, sl
 8002f9e:	f000 faa5 	bl	80034ec <_free_r>
 8002fa2:	e7c8      	b.n	8002f36 <__ssputs_r+0x46>

08002fa4 <_svfiprintf_r>:
 8002fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fa8:	461d      	mov	r5, r3
 8002faa:	898b      	ldrh	r3, [r1, #12]
 8002fac:	061f      	lsls	r7, r3, #24
 8002fae:	b09d      	sub	sp, #116	; 0x74
 8002fb0:	4680      	mov	r8, r0
 8002fb2:	460c      	mov	r4, r1
 8002fb4:	4616      	mov	r6, r2
 8002fb6:	d50f      	bpl.n	8002fd8 <_svfiprintf_r+0x34>
 8002fb8:	690b      	ldr	r3, [r1, #16]
 8002fba:	b96b      	cbnz	r3, 8002fd8 <_svfiprintf_r+0x34>
 8002fbc:	2140      	movs	r1, #64	; 0x40
 8002fbe:	f000 fae3 	bl	8003588 <_malloc_r>
 8002fc2:	6020      	str	r0, [r4, #0]
 8002fc4:	6120      	str	r0, [r4, #16]
 8002fc6:	b928      	cbnz	r0, 8002fd4 <_svfiprintf_r+0x30>
 8002fc8:	230c      	movs	r3, #12
 8002fca:	f8c8 3000 	str.w	r3, [r8]
 8002fce:	f04f 30ff 	mov.w	r0, #4294967295
 8002fd2:	e0c8      	b.n	8003166 <_svfiprintf_r+0x1c2>
 8002fd4:	2340      	movs	r3, #64	; 0x40
 8002fd6:	6163      	str	r3, [r4, #20]
 8002fd8:	2300      	movs	r3, #0
 8002fda:	9309      	str	r3, [sp, #36]	; 0x24
 8002fdc:	2320      	movs	r3, #32
 8002fde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002fe2:	2330      	movs	r3, #48	; 0x30
 8002fe4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002fe8:	9503      	str	r5, [sp, #12]
 8002fea:	f04f 0b01 	mov.w	fp, #1
 8002fee:	4637      	mov	r7, r6
 8002ff0:	463d      	mov	r5, r7
 8002ff2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002ff6:	b10b      	cbz	r3, 8002ffc <_svfiprintf_r+0x58>
 8002ff8:	2b25      	cmp	r3, #37	; 0x25
 8002ffa:	d13e      	bne.n	800307a <_svfiprintf_r+0xd6>
 8002ffc:	ebb7 0a06 	subs.w	sl, r7, r6
 8003000:	d00b      	beq.n	800301a <_svfiprintf_r+0x76>
 8003002:	4653      	mov	r3, sl
 8003004:	4632      	mov	r2, r6
 8003006:	4621      	mov	r1, r4
 8003008:	4640      	mov	r0, r8
 800300a:	f7ff ff71 	bl	8002ef0 <__ssputs_r>
 800300e:	3001      	adds	r0, #1
 8003010:	f000 80a4 	beq.w	800315c <_svfiprintf_r+0x1b8>
 8003014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003016:	4453      	add	r3, sl
 8003018:	9309      	str	r3, [sp, #36]	; 0x24
 800301a:	783b      	ldrb	r3, [r7, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 809d 	beq.w	800315c <_svfiprintf_r+0x1b8>
 8003022:	2300      	movs	r3, #0
 8003024:	f04f 32ff 	mov.w	r2, #4294967295
 8003028:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800302c:	9304      	str	r3, [sp, #16]
 800302e:	9307      	str	r3, [sp, #28]
 8003030:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003034:	931a      	str	r3, [sp, #104]	; 0x68
 8003036:	462f      	mov	r7, r5
 8003038:	2205      	movs	r2, #5
 800303a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800303e:	4850      	ldr	r0, [pc, #320]	; (8003180 <_svfiprintf_r+0x1dc>)
 8003040:	f7fd f8d6 	bl	80001f0 <memchr>
 8003044:	9b04      	ldr	r3, [sp, #16]
 8003046:	b9d0      	cbnz	r0, 800307e <_svfiprintf_r+0xda>
 8003048:	06d9      	lsls	r1, r3, #27
 800304a:	bf44      	itt	mi
 800304c:	2220      	movmi	r2, #32
 800304e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003052:	071a      	lsls	r2, r3, #28
 8003054:	bf44      	itt	mi
 8003056:	222b      	movmi	r2, #43	; 0x2b
 8003058:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800305c:	782a      	ldrb	r2, [r5, #0]
 800305e:	2a2a      	cmp	r2, #42	; 0x2a
 8003060:	d015      	beq.n	800308e <_svfiprintf_r+0xea>
 8003062:	9a07      	ldr	r2, [sp, #28]
 8003064:	462f      	mov	r7, r5
 8003066:	2000      	movs	r0, #0
 8003068:	250a      	movs	r5, #10
 800306a:	4639      	mov	r1, r7
 800306c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003070:	3b30      	subs	r3, #48	; 0x30
 8003072:	2b09      	cmp	r3, #9
 8003074:	d94d      	bls.n	8003112 <_svfiprintf_r+0x16e>
 8003076:	b1b8      	cbz	r0, 80030a8 <_svfiprintf_r+0x104>
 8003078:	e00f      	b.n	800309a <_svfiprintf_r+0xf6>
 800307a:	462f      	mov	r7, r5
 800307c:	e7b8      	b.n	8002ff0 <_svfiprintf_r+0x4c>
 800307e:	4a40      	ldr	r2, [pc, #256]	; (8003180 <_svfiprintf_r+0x1dc>)
 8003080:	1a80      	subs	r0, r0, r2
 8003082:	fa0b f000 	lsl.w	r0, fp, r0
 8003086:	4318      	orrs	r0, r3
 8003088:	9004      	str	r0, [sp, #16]
 800308a:	463d      	mov	r5, r7
 800308c:	e7d3      	b.n	8003036 <_svfiprintf_r+0x92>
 800308e:	9a03      	ldr	r2, [sp, #12]
 8003090:	1d11      	adds	r1, r2, #4
 8003092:	6812      	ldr	r2, [r2, #0]
 8003094:	9103      	str	r1, [sp, #12]
 8003096:	2a00      	cmp	r2, #0
 8003098:	db01      	blt.n	800309e <_svfiprintf_r+0xfa>
 800309a:	9207      	str	r2, [sp, #28]
 800309c:	e004      	b.n	80030a8 <_svfiprintf_r+0x104>
 800309e:	4252      	negs	r2, r2
 80030a0:	f043 0302 	orr.w	r3, r3, #2
 80030a4:	9207      	str	r2, [sp, #28]
 80030a6:	9304      	str	r3, [sp, #16]
 80030a8:	783b      	ldrb	r3, [r7, #0]
 80030aa:	2b2e      	cmp	r3, #46	; 0x2e
 80030ac:	d10c      	bne.n	80030c8 <_svfiprintf_r+0x124>
 80030ae:	787b      	ldrb	r3, [r7, #1]
 80030b0:	2b2a      	cmp	r3, #42	; 0x2a
 80030b2:	d133      	bne.n	800311c <_svfiprintf_r+0x178>
 80030b4:	9b03      	ldr	r3, [sp, #12]
 80030b6:	1d1a      	adds	r2, r3, #4
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	9203      	str	r2, [sp, #12]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	bfb8      	it	lt
 80030c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80030c4:	3702      	adds	r7, #2
 80030c6:	9305      	str	r3, [sp, #20]
 80030c8:	4d2e      	ldr	r5, [pc, #184]	; (8003184 <_svfiprintf_r+0x1e0>)
 80030ca:	7839      	ldrb	r1, [r7, #0]
 80030cc:	2203      	movs	r2, #3
 80030ce:	4628      	mov	r0, r5
 80030d0:	f7fd f88e 	bl	80001f0 <memchr>
 80030d4:	b138      	cbz	r0, 80030e6 <_svfiprintf_r+0x142>
 80030d6:	2340      	movs	r3, #64	; 0x40
 80030d8:	1b40      	subs	r0, r0, r5
 80030da:	fa03 f000 	lsl.w	r0, r3, r0
 80030de:	9b04      	ldr	r3, [sp, #16]
 80030e0:	4303      	orrs	r3, r0
 80030e2:	3701      	adds	r7, #1
 80030e4:	9304      	str	r3, [sp, #16]
 80030e6:	7839      	ldrb	r1, [r7, #0]
 80030e8:	4827      	ldr	r0, [pc, #156]	; (8003188 <_svfiprintf_r+0x1e4>)
 80030ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80030ee:	2206      	movs	r2, #6
 80030f0:	1c7e      	adds	r6, r7, #1
 80030f2:	f7fd f87d 	bl	80001f0 <memchr>
 80030f6:	2800      	cmp	r0, #0
 80030f8:	d038      	beq.n	800316c <_svfiprintf_r+0x1c8>
 80030fa:	4b24      	ldr	r3, [pc, #144]	; (800318c <_svfiprintf_r+0x1e8>)
 80030fc:	bb13      	cbnz	r3, 8003144 <_svfiprintf_r+0x1a0>
 80030fe:	9b03      	ldr	r3, [sp, #12]
 8003100:	3307      	adds	r3, #7
 8003102:	f023 0307 	bic.w	r3, r3, #7
 8003106:	3308      	adds	r3, #8
 8003108:	9303      	str	r3, [sp, #12]
 800310a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800310c:	444b      	add	r3, r9
 800310e:	9309      	str	r3, [sp, #36]	; 0x24
 8003110:	e76d      	b.n	8002fee <_svfiprintf_r+0x4a>
 8003112:	fb05 3202 	mla	r2, r5, r2, r3
 8003116:	2001      	movs	r0, #1
 8003118:	460f      	mov	r7, r1
 800311a:	e7a6      	b.n	800306a <_svfiprintf_r+0xc6>
 800311c:	2300      	movs	r3, #0
 800311e:	3701      	adds	r7, #1
 8003120:	9305      	str	r3, [sp, #20]
 8003122:	4619      	mov	r1, r3
 8003124:	250a      	movs	r5, #10
 8003126:	4638      	mov	r0, r7
 8003128:	f810 2b01 	ldrb.w	r2, [r0], #1
 800312c:	3a30      	subs	r2, #48	; 0x30
 800312e:	2a09      	cmp	r2, #9
 8003130:	d903      	bls.n	800313a <_svfiprintf_r+0x196>
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0c8      	beq.n	80030c8 <_svfiprintf_r+0x124>
 8003136:	9105      	str	r1, [sp, #20]
 8003138:	e7c6      	b.n	80030c8 <_svfiprintf_r+0x124>
 800313a:	fb05 2101 	mla	r1, r5, r1, r2
 800313e:	2301      	movs	r3, #1
 8003140:	4607      	mov	r7, r0
 8003142:	e7f0      	b.n	8003126 <_svfiprintf_r+0x182>
 8003144:	ab03      	add	r3, sp, #12
 8003146:	9300      	str	r3, [sp, #0]
 8003148:	4622      	mov	r2, r4
 800314a:	4b11      	ldr	r3, [pc, #68]	; (8003190 <_svfiprintf_r+0x1ec>)
 800314c:	a904      	add	r1, sp, #16
 800314e:	4640      	mov	r0, r8
 8003150:	f3af 8000 	nop.w
 8003154:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003158:	4681      	mov	r9, r0
 800315a:	d1d6      	bne.n	800310a <_svfiprintf_r+0x166>
 800315c:	89a3      	ldrh	r3, [r4, #12]
 800315e:	065b      	lsls	r3, r3, #25
 8003160:	f53f af35 	bmi.w	8002fce <_svfiprintf_r+0x2a>
 8003164:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003166:	b01d      	add	sp, #116	; 0x74
 8003168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800316c:	ab03      	add	r3, sp, #12
 800316e:	9300      	str	r3, [sp, #0]
 8003170:	4622      	mov	r2, r4
 8003172:	4b07      	ldr	r3, [pc, #28]	; (8003190 <_svfiprintf_r+0x1ec>)
 8003174:	a904      	add	r1, sp, #16
 8003176:	4640      	mov	r0, r8
 8003178:	f000 f882 	bl	8003280 <_printf_i>
 800317c:	e7ea      	b.n	8003154 <_svfiprintf_r+0x1b0>
 800317e:	bf00      	nop
 8003180:	08003728 	.word	0x08003728
 8003184:	0800372e 	.word	0x0800372e
 8003188:	08003732 	.word	0x08003732
 800318c:	00000000 	.word	0x00000000
 8003190:	08002ef1 	.word	0x08002ef1

08003194 <_printf_common>:
 8003194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003198:	4691      	mov	r9, r2
 800319a:	461f      	mov	r7, r3
 800319c:	688a      	ldr	r2, [r1, #8]
 800319e:	690b      	ldr	r3, [r1, #16]
 80031a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80031a4:	4293      	cmp	r3, r2
 80031a6:	bfb8      	it	lt
 80031a8:	4613      	movlt	r3, r2
 80031aa:	f8c9 3000 	str.w	r3, [r9]
 80031ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80031b2:	4606      	mov	r6, r0
 80031b4:	460c      	mov	r4, r1
 80031b6:	b112      	cbz	r2, 80031be <_printf_common+0x2a>
 80031b8:	3301      	adds	r3, #1
 80031ba:	f8c9 3000 	str.w	r3, [r9]
 80031be:	6823      	ldr	r3, [r4, #0]
 80031c0:	0699      	lsls	r1, r3, #26
 80031c2:	bf42      	ittt	mi
 80031c4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80031c8:	3302      	addmi	r3, #2
 80031ca:	f8c9 3000 	strmi.w	r3, [r9]
 80031ce:	6825      	ldr	r5, [r4, #0]
 80031d0:	f015 0506 	ands.w	r5, r5, #6
 80031d4:	d107      	bne.n	80031e6 <_printf_common+0x52>
 80031d6:	f104 0a19 	add.w	sl, r4, #25
 80031da:	68e3      	ldr	r3, [r4, #12]
 80031dc:	f8d9 2000 	ldr.w	r2, [r9]
 80031e0:	1a9b      	subs	r3, r3, r2
 80031e2:	42ab      	cmp	r3, r5
 80031e4:	dc28      	bgt.n	8003238 <_printf_common+0xa4>
 80031e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80031ea:	6822      	ldr	r2, [r4, #0]
 80031ec:	3300      	adds	r3, #0
 80031ee:	bf18      	it	ne
 80031f0:	2301      	movne	r3, #1
 80031f2:	0692      	lsls	r2, r2, #26
 80031f4:	d42d      	bmi.n	8003252 <_printf_common+0xbe>
 80031f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80031fa:	4639      	mov	r1, r7
 80031fc:	4630      	mov	r0, r6
 80031fe:	47c0      	blx	r8
 8003200:	3001      	adds	r0, #1
 8003202:	d020      	beq.n	8003246 <_printf_common+0xb2>
 8003204:	6823      	ldr	r3, [r4, #0]
 8003206:	68e5      	ldr	r5, [r4, #12]
 8003208:	f8d9 2000 	ldr.w	r2, [r9]
 800320c:	f003 0306 	and.w	r3, r3, #6
 8003210:	2b04      	cmp	r3, #4
 8003212:	bf08      	it	eq
 8003214:	1aad      	subeq	r5, r5, r2
 8003216:	68a3      	ldr	r3, [r4, #8]
 8003218:	6922      	ldr	r2, [r4, #16]
 800321a:	bf0c      	ite	eq
 800321c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003220:	2500      	movne	r5, #0
 8003222:	4293      	cmp	r3, r2
 8003224:	bfc4      	itt	gt
 8003226:	1a9b      	subgt	r3, r3, r2
 8003228:	18ed      	addgt	r5, r5, r3
 800322a:	f04f 0900 	mov.w	r9, #0
 800322e:	341a      	adds	r4, #26
 8003230:	454d      	cmp	r5, r9
 8003232:	d11a      	bne.n	800326a <_printf_common+0xd6>
 8003234:	2000      	movs	r0, #0
 8003236:	e008      	b.n	800324a <_printf_common+0xb6>
 8003238:	2301      	movs	r3, #1
 800323a:	4652      	mov	r2, sl
 800323c:	4639      	mov	r1, r7
 800323e:	4630      	mov	r0, r6
 8003240:	47c0      	blx	r8
 8003242:	3001      	adds	r0, #1
 8003244:	d103      	bne.n	800324e <_printf_common+0xba>
 8003246:	f04f 30ff 	mov.w	r0, #4294967295
 800324a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800324e:	3501      	adds	r5, #1
 8003250:	e7c3      	b.n	80031da <_printf_common+0x46>
 8003252:	18e1      	adds	r1, r4, r3
 8003254:	1c5a      	adds	r2, r3, #1
 8003256:	2030      	movs	r0, #48	; 0x30
 8003258:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800325c:	4422      	add	r2, r4
 800325e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003262:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003266:	3302      	adds	r3, #2
 8003268:	e7c5      	b.n	80031f6 <_printf_common+0x62>
 800326a:	2301      	movs	r3, #1
 800326c:	4622      	mov	r2, r4
 800326e:	4639      	mov	r1, r7
 8003270:	4630      	mov	r0, r6
 8003272:	47c0      	blx	r8
 8003274:	3001      	adds	r0, #1
 8003276:	d0e6      	beq.n	8003246 <_printf_common+0xb2>
 8003278:	f109 0901 	add.w	r9, r9, #1
 800327c:	e7d8      	b.n	8003230 <_printf_common+0x9c>
	...

08003280 <_printf_i>:
 8003280:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003284:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003288:	460c      	mov	r4, r1
 800328a:	7e09      	ldrb	r1, [r1, #24]
 800328c:	b085      	sub	sp, #20
 800328e:	296e      	cmp	r1, #110	; 0x6e
 8003290:	4617      	mov	r7, r2
 8003292:	4606      	mov	r6, r0
 8003294:	4698      	mov	r8, r3
 8003296:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003298:	f000 80b3 	beq.w	8003402 <_printf_i+0x182>
 800329c:	d822      	bhi.n	80032e4 <_printf_i+0x64>
 800329e:	2963      	cmp	r1, #99	; 0x63
 80032a0:	d036      	beq.n	8003310 <_printf_i+0x90>
 80032a2:	d80a      	bhi.n	80032ba <_printf_i+0x3a>
 80032a4:	2900      	cmp	r1, #0
 80032a6:	f000 80b9 	beq.w	800341c <_printf_i+0x19c>
 80032aa:	2958      	cmp	r1, #88	; 0x58
 80032ac:	f000 8083 	beq.w	80033b6 <_printf_i+0x136>
 80032b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80032b4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80032b8:	e032      	b.n	8003320 <_printf_i+0xa0>
 80032ba:	2964      	cmp	r1, #100	; 0x64
 80032bc:	d001      	beq.n	80032c2 <_printf_i+0x42>
 80032be:	2969      	cmp	r1, #105	; 0x69
 80032c0:	d1f6      	bne.n	80032b0 <_printf_i+0x30>
 80032c2:	6820      	ldr	r0, [r4, #0]
 80032c4:	6813      	ldr	r3, [r2, #0]
 80032c6:	0605      	lsls	r5, r0, #24
 80032c8:	f103 0104 	add.w	r1, r3, #4
 80032cc:	d52a      	bpl.n	8003324 <_printf_i+0xa4>
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6011      	str	r1, [r2, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	da03      	bge.n	80032de <_printf_i+0x5e>
 80032d6:	222d      	movs	r2, #45	; 0x2d
 80032d8:	425b      	negs	r3, r3
 80032da:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80032de:	486f      	ldr	r0, [pc, #444]	; (800349c <_printf_i+0x21c>)
 80032e0:	220a      	movs	r2, #10
 80032e2:	e039      	b.n	8003358 <_printf_i+0xd8>
 80032e4:	2973      	cmp	r1, #115	; 0x73
 80032e6:	f000 809d 	beq.w	8003424 <_printf_i+0x1a4>
 80032ea:	d808      	bhi.n	80032fe <_printf_i+0x7e>
 80032ec:	296f      	cmp	r1, #111	; 0x6f
 80032ee:	d020      	beq.n	8003332 <_printf_i+0xb2>
 80032f0:	2970      	cmp	r1, #112	; 0x70
 80032f2:	d1dd      	bne.n	80032b0 <_printf_i+0x30>
 80032f4:	6823      	ldr	r3, [r4, #0]
 80032f6:	f043 0320 	orr.w	r3, r3, #32
 80032fa:	6023      	str	r3, [r4, #0]
 80032fc:	e003      	b.n	8003306 <_printf_i+0x86>
 80032fe:	2975      	cmp	r1, #117	; 0x75
 8003300:	d017      	beq.n	8003332 <_printf_i+0xb2>
 8003302:	2978      	cmp	r1, #120	; 0x78
 8003304:	d1d4      	bne.n	80032b0 <_printf_i+0x30>
 8003306:	2378      	movs	r3, #120	; 0x78
 8003308:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800330c:	4864      	ldr	r0, [pc, #400]	; (80034a0 <_printf_i+0x220>)
 800330e:	e055      	b.n	80033bc <_printf_i+0x13c>
 8003310:	6813      	ldr	r3, [r2, #0]
 8003312:	1d19      	adds	r1, r3, #4
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6011      	str	r1, [r2, #0]
 8003318:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800331c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003320:	2301      	movs	r3, #1
 8003322:	e08c      	b.n	800343e <_printf_i+0x1be>
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6011      	str	r1, [r2, #0]
 8003328:	f010 0f40 	tst.w	r0, #64	; 0x40
 800332c:	bf18      	it	ne
 800332e:	b21b      	sxthne	r3, r3
 8003330:	e7cf      	b.n	80032d2 <_printf_i+0x52>
 8003332:	6813      	ldr	r3, [r2, #0]
 8003334:	6825      	ldr	r5, [r4, #0]
 8003336:	1d18      	adds	r0, r3, #4
 8003338:	6010      	str	r0, [r2, #0]
 800333a:	0628      	lsls	r0, r5, #24
 800333c:	d501      	bpl.n	8003342 <_printf_i+0xc2>
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	e002      	b.n	8003348 <_printf_i+0xc8>
 8003342:	0668      	lsls	r0, r5, #25
 8003344:	d5fb      	bpl.n	800333e <_printf_i+0xbe>
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	4854      	ldr	r0, [pc, #336]	; (800349c <_printf_i+0x21c>)
 800334a:	296f      	cmp	r1, #111	; 0x6f
 800334c:	bf14      	ite	ne
 800334e:	220a      	movne	r2, #10
 8003350:	2208      	moveq	r2, #8
 8003352:	2100      	movs	r1, #0
 8003354:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003358:	6865      	ldr	r5, [r4, #4]
 800335a:	60a5      	str	r5, [r4, #8]
 800335c:	2d00      	cmp	r5, #0
 800335e:	f2c0 8095 	blt.w	800348c <_printf_i+0x20c>
 8003362:	6821      	ldr	r1, [r4, #0]
 8003364:	f021 0104 	bic.w	r1, r1, #4
 8003368:	6021      	str	r1, [r4, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d13d      	bne.n	80033ea <_printf_i+0x16a>
 800336e:	2d00      	cmp	r5, #0
 8003370:	f040 808e 	bne.w	8003490 <_printf_i+0x210>
 8003374:	4665      	mov	r5, ip
 8003376:	2a08      	cmp	r2, #8
 8003378:	d10b      	bne.n	8003392 <_printf_i+0x112>
 800337a:	6823      	ldr	r3, [r4, #0]
 800337c:	07db      	lsls	r3, r3, #31
 800337e:	d508      	bpl.n	8003392 <_printf_i+0x112>
 8003380:	6923      	ldr	r3, [r4, #16]
 8003382:	6862      	ldr	r2, [r4, #4]
 8003384:	429a      	cmp	r2, r3
 8003386:	bfde      	ittt	le
 8003388:	2330      	movle	r3, #48	; 0x30
 800338a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800338e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003392:	ebac 0305 	sub.w	r3, ip, r5
 8003396:	6123      	str	r3, [r4, #16]
 8003398:	f8cd 8000 	str.w	r8, [sp]
 800339c:	463b      	mov	r3, r7
 800339e:	aa03      	add	r2, sp, #12
 80033a0:	4621      	mov	r1, r4
 80033a2:	4630      	mov	r0, r6
 80033a4:	f7ff fef6 	bl	8003194 <_printf_common>
 80033a8:	3001      	adds	r0, #1
 80033aa:	d14d      	bne.n	8003448 <_printf_i+0x1c8>
 80033ac:	f04f 30ff 	mov.w	r0, #4294967295
 80033b0:	b005      	add	sp, #20
 80033b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80033b6:	4839      	ldr	r0, [pc, #228]	; (800349c <_printf_i+0x21c>)
 80033b8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80033bc:	6813      	ldr	r3, [r2, #0]
 80033be:	6821      	ldr	r1, [r4, #0]
 80033c0:	1d1d      	adds	r5, r3, #4
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6015      	str	r5, [r2, #0]
 80033c6:	060a      	lsls	r2, r1, #24
 80033c8:	d50b      	bpl.n	80033e2 <_printf_i+0x162>
 80033ca:	07ca      	lsls	r2, r1, #31
 80033cc:	bf44      	itt	mi
 80033ce:	f041 0120 	orrmi.w	r1, r1, #32
 80033d2:	6021      	strmi	r1, [r4, #0]
 80033d4:	b91b      	cbnz	r3, 80033de <_printf_i+0x15e>
 80033d6:	6822      	ldr	r2, [r4, #0]
 80033d8:	f022 0220 	bic.w	r2, r2, #32
 80033dc:	6022      	str	r2, [r4, #0]
 80033de:	2210      	movs	r2, #16
 80033e0:	e7b7      	b.n	8003352 <_printf_i+0xd2>
 80033e2:	064d      	lsls	r5, r1, #25
 80033e4:	bf48      	it	mi
 80033e6:	b29b      	uxthmi	r3, r3
 80033e8:	e7ef      	b.n	80033ca <_printf_i+0x14a>
 80033ea:	4665      	mov	r5, ip
 80033ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80033f0:	fb02 3311 	mls	r3, r2, r1, r3
 80033f4:	5cc3      	ldrb	r3, [r0, r3]
 80033f6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80033fa:	460b      	mov	r3, r1
 80033fc:	2900      	cmp	r1, #0
 80033fe:	d1f5      	bne.n	80033ec <_printf_i+0x16c>
 8003400:	e7b9      	b.n	8003376 <_printf_i+0xf6>
 8003402:	6813      	ldr	r3, [r2, #0]
 8003404:	6825      	ldr	r5, [r4, #0]
 8003406:	6961      	ldr	r1, [r4, #20]
 8003408:	1d18      	adds	r0, r3, #4
 800340a:	6010      	str	r0, [r2, #0]
 800340c:	0628      	lsls	r0, r5, #24
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	d501      	bpl.n	8003416 <_printf_i+0x196>
 8003412:	6019      	str	r1, [r3, #0]
 8003414:	e002      	b.n	800341c <_printf_i+0x19c>
 8003416:	066a      	lsls	r2, r5, #25
 8003418:	d5fb      	bpl.n	8003412 <_printf_i+0x192>
 800341a:	8019      	strh	r1, [r3, #0]
 800341c:	2300      	movs	r3, #0
 800341e:	6123      	str	r3, [r4, #16]
 8003420:	4665      	mov	r5, ip
 8003422:	e7b9      	b.n	8003398 <_printf_i+0x118>
 8003424:	6813      	ldr	r3, [r2, #0]
 8003426:	1d19      	adds	r1, r3, #4
 8003428:	6011      	str	r1, [r2, #0]
 800342a:	681d      	ldr	r5, [r3, #0]
 800342c:	6862      	ldr	r2, [r4, #4]
 800342e:	2100      	movs	r1, #0
 8003430:	4628      	mov	r0, r5
 8003432:	f7fc fedd 	bl	80001f0 <memchr>
 8003436:	b108      	cbz	r0, 800343c <_printf_i+0x1bc>
 8003438:	1b40      	subs	r0, r0, r5
 800343a:	6060      	str	r0, [r4, #4]
 800343c:	6863      	ldr	r3, [r4, #4]
 800343e:	6123      	str	r3, [r4, #16]
 8003440:	2300      	movs	r3, #0
 8003442:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003446:	e7a7      	b.n	8003398 <_printf_i+0x118>
 8003448:	6923      	ldr	r3, [r4, #16]
 800344a:	462a      	mov	r2, r5
 800344c:	4639      	mov	r1, r7
 800344e:	4630      	mov	r0, r6
 8003450:	47c0      	blx	r8
 8003452:	3001      	adds	r0, #1
 8003454:	d0aa      	beq.n	80033ac <_printf_i+0x12c>
 8003456:	6823      	ldr	r3, [r4, #0]
 8003458:	079b      	lsls	r3, r3, #30
 800345a:	d413      	bmi.n	8003484 <_printf_i+0x204>
 800345c:	68e0      	ldr	r0, [r4, #12]
 800345e:	9b03      	ldr	r3, [sp, #12]
 8003460:	4298      	cmp	r0, r3
 8003462:	bfb8      	it	lt
 8003464:	4618      	movlt	r0, r3
 8003466:	e7a3      	b.n	80033b0 <_printf_i+0x130>
 8003468:	2301      	movs	r3, #1
 800346a:	464a      	mov	r2, r9
 800346c:	4639      	mov	r1, r7
 800346e:	4630      	mov	r0, r6
 8003470:	47c0      	blx	r8
 8003472:	3001      	adds	r0, #1
 8003474:	d09a      	beq.n	80033ac <_printf_i+0x12c>
 8003476:	3501      	adds	r5, #1
 8003478:	68e3      	ldr	r3, [r4, #12]
 800347a:	9a03      	ldr	r2, [sp, #12]
 800347c:	1a9b      	subs	r3, r3, r2
 800347e:	42ab      	cmp	r3, r5
 8003480:	dcf2      	bgt.n	8003468 <_printf_i+0x1e8>
 8003482:	e7eb      	b.n	800345c <_printf_i+0x1dc>
 8003484:	2500      	movs	r5, #0
 8003486:	f104 0919 	add.w	r9, r4, #25
 800348a:	e7f5      	b.n	8003478 <_printf_i+0x1f8>
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1ac      	bne.n	80033ea <_printf_i+0x16a>
 8003490:	7803      	ldrb	r3, [r0, #0]
 8003492:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003496:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800349a:	e76c      	b.n	8003376 <_printf_i+0xf6>
 800349c:	08003739 	.word	0x08003739
 80034a0:	0800374a 	.word	0x0800374a

080034a4 <memcpy>:
 80034a4:	b510      	push	{r4, lr}
 80034a6:	1e43      	subs	r3, r0, #1
 80034a8:	440a      	add	r2, r1
 80034aa:	4291      	cmp	r1, r2
 80034ac:	d100      	bne.n	80034b0 <memcpy+0xc>
 80034ae:	bd10      	pop	{r4, pc}
 80034b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80034b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80034b8:	e7f7      	b.n	80034aa <memcpy+0x6>

080034ba <memmove>:
 80034ba:	4288      	cmp	r0, r1
 80034bc:	b510      	push	{r4, lr}
 80034be:	eb01 0302 	add.w	r3, r1, r2
 80034c2:	d807      	bhi.n	80034d4 <memmove+0x1a>
 80034c4:	1e42      	subs	r2, r0, #1
 80034c6:	4299      	cmp	r1, r3
 80034c8:	d00a      	beq.n	80034e0 <memmove+0x26>
 80034ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80034ce:	f802 4f01 	strb.w	r4, [r2, #1]!
 80034d2:	e7f8      	b.n	80034c6 <memmove+0xc>
 80034d4:	4283      	cmp	r3, r0
 80034d6:	d9f5      	bls.n	80034c4 <memmove+0xa>
 80034d8:	1881      	adds	r1, r0, r2
 80034da:	1ad2      	subs	r2, r2, r3
 80034dc:	42d3      	cmn	r3, r2
 80034de:	d100      	bne.n	80034e2 <memmove+0x28>
 80034e0:	bd10      	pop	{r4, pc}
 80034e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80034e6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80034ea:	e7f7      	b.n	80034dc <memmove+0x22>

080034ec <_free_r>:
 80034ec:	b538      	push	{r3, r4, r5, lr}
 80034ee:	4605      	mov	r5, r0
 80034f0:	2900      	cmp	r1, #0
 80034f2:	d045      	beq.n	8003580 <_free_r+0x94>
 80034f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034f8:	1f0c      	subs	r4, r1, #4
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	bfb8      	it	lt
 80034fe:	18e4      	addlt	r4, r4, r3
 8003500:	f000 f8d2 	bl	80036a8 <__malloc_lock>
 8003504:	4a1f      	ldr	r2, [pc, #124]	; (8003584 <_free_r+0x98>)
 8003506:	6813      	ldr	r3, [r2, #0]
 8003508:	4610      	mov	r0, r2
 800350a:	b933      	cbnz	r3, 800351a <_free_r+0x2e>
 800350c:	6063      	str	r3, [r4, #4]
 800350e:	6014      	str	r4, [r2, #0]
 8003510:	4628      	mov	r0, r5
 8003512:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003516:	f000 b8c8 	b.w	80036aa <__malloc_unlock>
 800351a:	42a3      	cmp	r3, r4
 800351c:	d90c      	bls.n	8003538 <_free_r+0x4c>
 800351e:	6821      	ldr	r1, [r4, #0]
 8003520:	1862      	adds	r2, r4, r1
 8003522:	4293      	cmp	r3, r2
 8003524:	bf04      	itt	eq
 8003526:	681a      	ldreq	r2, [r3, #0]
 8003528:	685b      	ldreq	r3, [r3, #4]
 800352a:	6063      	str	r3, [r4, #4]
 800352c:	bf04      	itt	eq
 800352e:	1852      	addeq	r2, r2, r1
 8003530:	6022      	streq	r2, [r4, #0]
 8003532:	6004      	str	r4, [r0, #0]
 8003534:	e7ec      	b.n	8003510 <_free_r+0x24>
 8003536:	4613      	mov	r3, r2
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	b10a      	cbz	r2, 8003540 <_free_r+0x54>
 800353c:	42a2      	cmp	r2, r4
 800353e:	d9fa      	bls.n	8003536 <_free_r+0x4a>
 8003540:	6819      	ldr	r1, [r3, #0]
 8003542:	1858      	adds	r0, r3, r1
 8003544:	42a0      	cmp	r0, r4
 8003546:	d10b      	bne.n	8003560 <_free_r+0x74>
 8003548:	6820      	ldr	r0, [r4, #0]
 800354a:	4401      	add	r1, r0
 800354c:	1858      	adds	r0, r3, r1
 800354e:	4282      	cmp	r2, r0
 8003550:	6019      	str	r1, [r3, #0]
 8003552:	d1dd      	bne.n	8003510 <_free_r+0x24>
 8003554:	6810      	ldr	r0, [r2, #0]
 8003556:	6852      	ldr	r2, [r2, #4]
 8003558:	605a      	str	r2, [r3, #4]
 800355a:	4401      	add	r1, r0
 800355c:	6019      	str	r1, [r3, #0]
 800355e:	e7d7      	b.n	8003510 <_free_r+0x24>
 8003560:	d902      	bls.n	8003568 <_free_r+0x7c>
 8003562:	230c      	movs	r3, #12
 8003564:	602b      	str	r3, [r5, #0]
 8003566:	e7d3      	b.n	8003510 <_free_r+0x24>
 8003568:	6820      	ldr	r0, [r4, #0]
 800356a:	1821      	adds	r1, r4, r0
 800356c:	428a      	cmp	r2, r1
 800356e:	bf04      	itt	eq
 8003570:	6811      	ldreq	r1, [r2, #0]
 8003572:	6852      	ldreq	r2, [r2, #4]
 8003574:	6062      	str	r2, [r4, #4]
 8003576:	bf04      	itt	eq
 8003578:	1809      	addeq	r1, r1, r0
 800357a:	6021      	streq	r1, [r4, #0]
 800357c:	605c      	str	r4, [r3, #4]
 800357e:	e7c7      	b.n	8003510 <_free_r+0x24>
 8003580:	bd38      	pop	{r3, r4, r5, pc}
 8003582:	bf00      	nop
 8003584:	20000094 	.word	0x20000094

08003588 <_malloc_r>:
 8003588:	b570      	push	{r4, r5, r6, lr}
 800358a:	1ccd      	adds	r5, r1, #3
 800358c:	f025 0503 	bic.w	r5, r5, #3
 8003590:	3508      	adds	r5, #8
 8003592:	2d0c      	cmp	r5, #12
 8003594:	bf38      	it	cc
 8003596:	250c      	movcc	r5, #12
 8003598:	2d00      	cmp	r5, #0
 800359a:	4606      	mov	r6, r0
 800359c:	db01      	blt.n	80035a2 <_malloc_r+0x1a>
 800359e:	42a9      	cmp	r1, r5
 80035a0:	d903      	bls.n	80035aa <_malloc_r+0x22>
 80035a2:	230c      	movs	r3, #12
 80035a4:	6033      	str	r3, [r6, #0]
 80035a6:	2000      	movs	r0, #0
 80035a8:	bd70      	pop	{r4, r5, r6, pc}
 80035aa:	f000 f87d 	bl	80036a8 <__malloc_lock>
 80035ae:	4a21      	ldr	r2, [pc, #132]	; (8003634 <_malloc_r+0xac>)
 80035b0:	6814      	ldr	r4, [r2, #0]
 80035b2:	4621      	mov	r1, r4
 80035b4:	b991      	cbnz	r1, 80035dc <_malloc_r+0x54>
 80035b6:	4c20      	ldr	r4, [pc, #128]	; (8003638 <_malloc_r+0xb0>)
 80035b8:	6823      	ldr	r3, [r4, #0]
 80035ba:	b91b      	cbnz	r3, 80035c4 <_malloc_r+0x3c>
 80035bc:	4630      	mov	r0, r6
 80035be:	f000 f863 	bl	8003688 <_sbrk_r>
 80035c2:	6020      	str	r0, [r4, #0]
 80035c4:	4629      	mov	r1, r5
 80035c6:	4630      	mov	r0, r6
 80035c8:	f000 f85e 	bl	8003688 <_sbrk_r>
 80035cc:	1c43      	adds	r3, r0, #1
 80035ce:	d124      	bne.n	800361a <_malloc_r+0x92>
 80035d0:	230c      	movs	r3, #12
 80035d2:	6033      	str	r3, [r6, #0]
 80035d4:	4630      	mov	r0, r6
 80035d6:	f000 f868 	bl	80036aa <__malloc_unlock>
 80035da:	e7e4      	b.n	80035a6 <_malloc_r+0x1e>
 80035dc:	680b      	ldr	r3, [r1, #0]
 80035de:	1b5b      	subs	r3, r3, r5
 80035e0:	d418      	bmi.n	8003614 <_malloc_r+0x8c>
 80035e2:	2b0b      	cmp	r3, #11
 80035e4:	d90f      	bls.n	8003606 <_malloc_r+0x7e>
 80035e6:	600b      	str	r3, [r1, #0]
 80035e8:	50cd      	str	r5, [r1, r3]
 80035ea:	18cc      	adds	r4, r1, r3
 80035ec:	4630      	mov	r0, r6
 80035ee:	f000 f85c 	bl	80036aa <__malloc_unlock>
 80035f2:	f104 000b 	add.w	r0, r4, #11
 80035f6:	1d23      	adds	r3, r4, #4
 80035f8:	f020 0007 	bic.w	r0, r0, #7
 80035fc:	1ac3      	subs	r3, r0, r3
 80035fe:	d0d3      	beq.n	80035a8 <_malloc_r+0x20>
 8003600:	425a      	negs	r2, r3
 8003602:	50e2      	str	r2, [r4, r3]
 8003604:	e7d0      	b.n	80035a8 <_malloc_r+0x20>
 8003606:	428c      	cmp	r4, r1
 8003608:	684b      	ldr	r3, [r1, #4]
 800360a:	bf16      	itet	ne
 800360c:	6063      	strne	r3, [r4, #4]
 800360e:	6013      	streq	r3, [r2, #0]
 8003610:	460c      	movne	r4, r1
 8003612:	e7eb      	b.n	80035ec <_malloc_r+0x64>
 8003614:	460c      	mov	r4, r1
 8003616:	6849      	ldr	r1, [r1, #4]
 8003618:	e7cc      	b.n	80035b4 <_malloc_r+0x2c>
 800361a:	1cc4      	adds	r4, r0, #3
 800361c:	f024 0403 	bic.w	r4, r4, #3
 8003620:	42a0      	cmp	r0, r4
 8003622:	d005      	beq.n	8003630 <_malloc_r+0xa8>
 8003624:	1a21      	subs	r1, r4, r0
 8003626:	4630      	mov	r0, r6
 8003628:	f000 f82e 	bl	8003688 <_sbrk_r>
 800362c:	3001      	adds	r0, #1
 800362e:	d0cf      	beq.n	80035d0 <_malloc_r+0x48>
 8003630:	6025      	str	r5, [r4, #0]
 8003632:	e7db      	b.n	80035ec <_malloc_r+0x64>
 8003634:	20000094 	.word	0x20000094
 8003638:	20000098 	.word	0x20000098

0800363c <_realloc_r>:
 800363c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800363e:	4607      	mov	r7, r0
 8003640:	4614      	mov	r4, r2
 8003642:	460e      	mov	r6, r1
 8003644:	b921      	cbnz	r1, 8003650 <_realloc_r+0x14>
 8003646:	4611      	mov	r1, r2
 8003648:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800364c:	f7ff bf9c 	b.w	8003588 <_malloc_r>
 8003650:	b922      	cbnz	r2, 800365c <_realloc_r+0x20>
 8003652:	f7ff ff4b 	bl	80034ec <_free_r>
 8003656:	4625      	mov	r5, r4
 8003658:	4628      	mov	r0, r5
 800365a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800365c:	f000 f826 	bl	80036ac <_malloc_usable_size_r>
 8003660:	42a0      	cmp	r0, r4
 8003662:	d20f      	bcs.n	8003684 <_realloc_r+0x48>
 8003664:	4621      	mov	r1, r4
 8003666:	4638      	mov	r0, r7
 8003668:	f7ff ff8e 	bl	8003588 <_malloc_r>
 800366c:	4605      	mov	r5, r0
 800366e:	2800      	cmp	r0, #0
 8003670:	d0f2      	beq.n	8003658 <_realloc_r+0x1c>
 8003672:	4631      	mov	r1, r6
 8003674:	4622      	mov	r2, r4
 8003676:	f7ff ff15 	bl	80034a4 <memcpy>
 800367a:	4631      	mov	r1, r6
 800367c:	4638      	mov	r0, r7
 800367e:	f7ff ff35 	bl	80034ec <_free_r>
 8003682:	e7e9      	b.n	8003658 <_realloc_r+0x1c>
 8003684:	4635      	mov	r5, r6
 8003686:	e7e7      	b.n	8003658 <_realloc_r+0x1c>

08003688 <_sbrk_r>:
 8003688:	b538      	push	{r3, r4, r5, lr}
 800368a:	4c06      	ldr	r4, [pc, #24]	; (80036a4 <_sbrk_r+0x1c>)
 800368c:	2300      	movs	r3, #0
 800368e:	4605      	mov	r5, r0
 8003690:	4608      	mov	r0, r1
 8003692:	6023      	str	r3, [r4, #0]
 8003694:	f7fd f81a 	bl	80006cc <_sbrk>
 8003698:	1c43      	adds	r3, r0, #1
 800369a:	d102      	bne.n	80036a2 <_sbrk_r+0x1a>
 800369c:	6823      	ldr	r3, [r4, #0]
 800369e:	b103      	cbz	r3, 80036a2 <_sbrk_r+0x1a>
 80036a0:	602b      	str	r3, [r5, #0]
 80036a2:	bd38      	pop	{r3, r4, r5, pc}
 80036a4:	20000124 	.word	0x20000124

080036a8 <__malloc_lock>:
 80036a8:	4770      	bx	lr

080036aa <__malloc_unlock>:
 80036aa:	4770      	bx	lr

080036ac <_malloc_usable_size_r>:
 80036ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036b0:	1f18      	subs	r0, r3, #4
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	bfbc      	itt	lt
 80036b6:	580b      	ldrlt	r3, [r1, r0]
 80036b8:	18c0      	addlt	r0, r0, r3
 80036ba:	4770      	bx	lr

080036bc <_init>:
 80036bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036be:	bf00      	nop
 80036c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036c2:	bc08      	pop	{r3}
 80036c4:	469e      	mov	lr, r3
 80036c6:	4770      	bx	lr

080036c8 <_fini>:
 80036c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ca:	bf00      	nop
 80036cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ce:	bc08      	pop	{r3}
 80036d0:	469e      	mov	lr, r3
 80036d2:	4770      	bx	lr
